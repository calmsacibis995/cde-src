/*
 * generic imake template
 */
/***********************************************************************
	 NOTE HP MODIFIERS!!!!!!!!!!!!!
	 There are two hp specific sections in this file for hp
	 modifications.  The first one deals with ifndef-ifdef defines.  The
	 second one deals with macro definitions. Please add all
	 hp-domain-osf modifications between these lines if possible.  The
	 sections can be found by searching for SECTION 1 and SECTION 2.
*/

#ifndef XCOMM
#define XCOMM #
#endif
XCOMM -------------------------------------------------------------------------
XCOMM Makefile generated from IMAKE_TEMPLATE and INCLUDE_IMAKEFILE
XCOMM $XConsortium: Imake.tmpl /main/cde1_maint/8 1995/10/10 18:12:20 drk $
XCOMM
XCOMM Platform-specific parameters may be set in the appropriate <vendor>.cf
XCOMM configuration files.  Site-specific parameters should be set in the file
XCOMM site.def.  Full rebuilds are recommended if any parameters are changed.
XCOMM
XCOMM If your C preprocessor does not define any unique symbols, you will need
XCOMM to set BOOTSTRAPCFLAGS when rebuilding imake (usually when doing
XCOMM "make World" the first time).
XCOMM

#define YES 1
#define NO  0


/*
 * To add support for another platform:
 *
 *     1.  Identify a machine-specific cpp symbol.  If your preprocessor
 *         does not have any built in, you will need to add the symbol to the
 *         cpp_argv table in config/imakemdep.h and rebuild imake with the
 *         BOOTSTRAPCFLAGS variable set (see the macII for an example).
 *
 *     2.  Add all machine-specific cpp symbols (either defined by you or by
 *         the preprocessor or compiler) to the predefs table in
 *         config/imakemdep.h.
 *
 *     3.  But a new #ifdef block below that defines MacroIncludeFile and
 *         MacroFile for your new platform and then #undefs the machine-
 *         specific preprocessor symbols (to avoid problems with file names).
 *
 *     4.  Create a .cf file with the name given by MacroFile.
*/

/* HP enhancement for multiple build tree defines */
#include <localtree.tmpl>

#ifdef ultrix
#define MacroIncludeFile <ultrix.cf>
#define MacroFile ultrix.cf
#ifdef vax
#undef vax
#define VaxArchitecture
#endif
#ifdef mips
#undef mips
#define MipsArchitecture
#endif
#undef ultrix
#define UltrixArchitecture
#endif

#ifdef __hp_osf
#define MacroIncludeFile <hposf.cf>
#define MacroFile hposf.cf
#undef __hp_osf
#define HPOSFArchitecture
#endif /* __hp_osf */

#if defined (__alpha)
#define MacroIncludeFile <osf1.cf>
#define MacroFile osf1.cf
#undef __alpha
#define AlphaArchitecture
#endif /* __alpha */

#if defined(vax) && !defined(UltrixArchitecture)
#define MacroIncludeFile <bsd.cf>
#define MacroFile bsd.cf
#undef vax
#define VaxArchitecture
#endif

#ifdef sun
#define MacroIncludeFile <sun.cf>
#define MacroFile sun.cf
#undef sun
#define SunArchitecture
#endif /* sun */

#ifdef hpux
#define MacroIncludeFile <hp.cf>
#define MacroFile hp.cf
#undef hpux
#define HPArchitecture
#else
#ifdef __hpux
#define MacroIncludeFile <hp.cf>
#define MacroFile hp.cf
#undef __hpux
#define HPArchitecture
#endif /* __hpux */
#endif /* hpux */

#ifdef att
#define MacroIncludeFile <att.cf>
#define MacroFile att.cf
#undef att
#define ATTArchitecture
#endif /* att */

#ifdef usl
#define MacroIncludeFile <usl.cf>
#define MacroFile usl.cf
#undef usl
#define USLArchitecture
#endif /* usl */

#ifdef	__uxp__
#define	MacroIncludeFile <uxp.cf>
#define	MacroFile	uxp.cf
#undef __uxp__
#define UXPArchitecture
#endif /* __uxp__ */

#ifdef sco
#define MacroIncludeFile <sco.cf>
#define MacroFile sco.cf
#undef sco
#define SCOArchitecture
#endif

#ifdef apollo
#define MacroIncludeFile <apollo.cf>
#define MacroFile apollo.cf
#undef apollo
#define ApolloArchitecture
#endif /* apollo */

#ifdef sony
#define MacroIncludeFile <sony.cf>
#define MacroFile sony.cf
#undef sony
#undef sony_news
#define SonyArchitecture
#ifdef mc68020
#undef mc68020
#undef mc68030
#define Mc68020Architecture
#endif
#ifdef mips
#undef mips
#define MipsArchitecture
#endif
#if !defined(bsd43) || defined(SYSTYPE_SYSV)
#define SonySysvArchitecture
#else
#define SonyBsdArchitecture
#endif
#endif /* sony */

#ifdef M4310
#define MacroIncludeFile <pegasus.cf>
#define MacroFile pegasus.cf
#undef M4310
#define PegasusArchitecture
#endif /* M4310 */

#ifdef M4330
#define MacroIncludeFile <m4330.cf>
#define MacroFile m4330.cf
#undef  M4330
#define M4330Architecture
#endif /* M4330 */

#ifdef macII
/* A/UX cpp has no unique symbol:  build imake with BOOTSTRAPCFLAGS=-DmacII */
#define MacroIncludeFile <macII.cf>
#define MacroFile macII.cf
#undef  macII
#define MacIIArchitecture
#endif /* macII */

#ifdef CRAY
#define MacroIncludeFile <cray.cf>
#define MacroFile cray.cf
#undef cray
#define CrayArchitecture
#endif /* CRAY */

#ifdef sgi
#define MacroIncludeFile <sgi.cf>
#define MacroFile sgi.cf
#undef sgi
#define SGIArchitecture
#undef mips
#define MipsArchitecture
#endif

#ifdef stellar
#define MacroIncludeFile <stellar.cf>
#define MacroFile stellar.cf
#undef stellar
#define StellarArchitecture
#endif

#if defined(ibm) || defined(_IBMR2) || defined(ibm032) || defined(aix)
#define MacroIncludeFile <ibm.cf>
#define MacroFile ibm.cf
#ifdef ibm
#undef ibm
#endif
#define IBMArchitecture
#ifdef i386
#undef i386
#define PS2Architecture
#endif
#ifdef ibm032
#undef ibm032
#define RtArchitecture
#endif
#ifdef aix
#undef aix
#define AIXArchitecture
#endif
#ifdef _IBMR2
#undef _IBMR2
#define RsArchitecture
#endif
#endif /* ibm */

#ifdef luna
#undef luna
#define MacroIncludeFile <luna.cf>
#define MacroFile luna.cf
#ifdef mc68000
#undef mc68000
#define Mc68000Architecture
#else
#undef mc88000
#define Mc88000Architecture
#endif
#endif

#ifdef Mips
#  define MacroIncludeFile "Mips.cf"
#  define MacroFile Mips.cf
#  undef Mips
#  if defined(SYSTYPE_BSD43) || defined(BSD) || defined(BSD43)
#    define MipsBsdArchitecture
#  else /* BSD */
#    define MipsSysvArchitecture
#  endif /* BSD */
#endif /* Mips */

#ifdef MOTOROLA
# define MacroIncludeFile <moto.cf>
# define MacroFile moto.cf
# undef MOTOROLA
# ifdef SYSV
#  define MotoR3Architecture
# endif
# ifdef SVR4
#  define MotoR4Architecture
# endif
#endif /* MOTOROLA */

#ifdef SYSV386
# define MacroIncludeFile <x386.cf>
# define MacroFile x386.cf
# ifdef SVR4
#  define i386SVR4Architecture
# else
#  define i386SVR3Architecture
# endif
#endif /* SYSV386 */

#ifdef DGUX
#define MacroIncludeFile <DGUX.cf>
#define MacroFile DGUX.cf
#undef DGUX
#define DguxArchitecture
#endif

#ifdef __convex__
# define MacroIncludeFile <convex.cf>
# define MacroFile convex.cf
# ifdef convex
#  undef convex
# endif
# define ConvexArchitecture
#endif

#ifdef __WPX__
#define MacroIncludeFile <wpx.cf>
#define MacroFile wpx.cf
#undef __WPX__
#define WPXArchitecture
#ifdef i386
#undef i386
#define I386Architecture
#endif
#endif /* __WPX__ */

/*********************** HP Addition *************************/
#ifndef X11Release
#define X11Release Release5
#endif
/* Unity versus cde vs. rivers setup */
#ifndef RiversVersion
#define RiversVersion /**/
#endif
#define UseCdeVersion YES
#ifndef UnityVersion
#define UseUnityVersion NO
#define UnityVersion /**/
#else
#define UseUnityVersion YES
#endif
/*********************** END HP Addition *************************/

#ifndef MacroIncludeFile
XCOMM WARNING:  Imake.tmpl not configured; guessing at definitions!!!
XCOMM This might mean that BOOTSTRAPCFLAGS was not set when building imake.
#define MacroIncludeFile <generic.cf>
#define MacroFile generic.cf
#endif

/*
 * System Libraries
 */

/*****************************************************************************
 *                                                                           *
 *                       DO NOT MODIFY BELOW THIS LINE                       *
 *                                                                           *
 *****************************************************************************/


XCOMM -------------------------------------------------------------------------
XCOMM site-specific configuration parameters that need to come before
XCOMM the platform-specific parameters - edit site.def to change
#define BeforeVendorCF
#include <site.def>
#undef BeforeVendorCF
 
XCOMM -------------------------------------------------------------------------
XCOMM platform-specific configuration parameters - edit MacroFile to change
#include MacroIncludeFile

/* It is a kludge to put these two macros here,
 * but Project.tmpl needs them and it is not clear there is a better place.
 */

/*
 * Concat - concatenates two strings.
 */
#ifndef Concat
#if defined(__STDC__) && !defined(UnixCpp)
#define Concat(a,b)a##b
#else
#define Concat(a,b)a/**/b
#endif
#endif

/*
 * Concat3 - concatenates three strings.
 */
#ifndef Concat3
#if defined(__STDC__) && !defined(UnixCpp)
#define Concat3(a,b,c)a##b##c
#else
#define Concat3(a,b,c)a/**/b/**/c
#endif
#endif

XCOMM -------------------------------------------------------------------------
XCOMM site-specific configuration parameters that go after
XCOMM the platform-specific parameters - edit site.def to change
#define AfterVendorCF
#include <site.def>
#undef AfterVendorCF

/***********************************************************************
* INCLUDE CDE SPECIFIC CPP MACROS
***********************************************************************/
#define BeforeCdeImakeTmpl
#include <cde/cdeImake.tmpl>
#undef BeforeCdeImakeTmpl


/*
 * defaults for various generic parameters; set in site.def if needed
 */

#ifndef HasSharedLibraries
#define HasSharedLibraries NO
#endif
#ifndef SystemV
#define SystemV         NO  /* SYSV (R3) */
#endif
#ifndef SystemV4
#define SystemV4        NO  /* SVR4 */
#endif
#ifndef OSMajorVersion
#define OSMajorVersion          0
#endif
#ifndef OSMinorVersion
#define OSMinorVersion          0
#endif
#ifndef UnalignedReferencesAllowed
#define UnalignedReferencesAllowed NO   /* if arbitrary deref is okay */
#endif
#ifndef ExecableScripts
#if SystemV
#define ExecableScripts     NO
#else
#define ExecableScripts     YES /* kernel exec() can handle #! */
#endif
#endif

#ifndef BourneShell         /* to force shell in makefile */
#define BourneShell     /bin/sh
#endif
#ifndef ConstructMFLAGS
#if SystemV && !SystemV4 && !defined(AIXArchitecture)
#define ConstructMFLAGS     YES /* build MFLAGS from MAKEFLAGS */
#else
#define ConstructMFLAGS     NO  /* build MFLAGS from MAKEFLAGS */
#endif
#endif

#ifndef HasLargeTmp
#define HasLargeTmp     NO  /* be paranoid */
#endif
#ifndef HasLdRunPath
#define HasLdRunPath NO
#endif
#ifndef HasSockets
#if SystemV || SystemV4
#define HasSockets      NO  /* do not assume it has them */
#else
#define HasSockets      YES /* bsd does have them */
#endif
#endif
#ifndef HasVFork
#if SystemV
#define HasVFork        NO  /* not yet... */
#else
#define HasVFork        YES
#endif
#endif
#ifndef HasPutenv
#define HasPutenv       NO  /* assume not */
#endif
#ifndef HasVoidSignalReturn
#define HasVoidSignalReturn YES /* assume yes */
#endif
#ifndef HasBsearch
#define HasBsearch      YES /* assume yes */
#endif
#ifndef HasSaberC
#define HasSaberC       NO  /* for people unclear on the concept */
#endif
#ifndef HasFortran
#define HasFortran      NO
#endif
#ifndef HasNdbm
#define HasNdbm         NO
#endif
#ifndef HasSecureRPC
#define HasSecureRPC        NO  /* if you have Secure RPC */
#endif
#ifndef HasShm
#if SystemV || SystemV4
#define HasShm          YES
#else
#define HasShm          NO
#endif
#endif
#ifndef NeedConstPrototypes
#define NeedConstPrototypes NO
#endif
#ifndef NeedVarargsPrototypes
#define NeedVarargsPrototypes   NO
#endif
#ifndef NeedNestedPrototypes
#define NeedNestedPrototypes    NO
#endif
#ifndef NeedFunctionPrototypes
#define NeedFunctionPrototypes (NeedVarargsPrototypes || NeedNestedPrototypes)
#endif
#ifndef NeedWidePrototypes
#define NeedWidePrototypes  YES /* mix and match ANSI-C, non-ANSI */
#endif

#ifndef StripInstalledPrograms
#define StripInstalledPrograms NO   /* leave symbol table just in case */
#endif

#ifndef UsrLibDir
#ifdef ProjectRoot
#define UsrLibDir Concat(ProjectRoot,/lib)
#ifndef AlternateUsrLibDir
#define AlternateUsrLibDir YES
#endif
#else
#define UsrLibDir /usr/lib
#ifndef AlternateUsrLibDir
#define AlternateUsrLibDir NO
#endif
#endif
#else
#ifndef AlternateUsrLibDir
#define AlternateUsrLibDir YES
#endif
#endif

#ifndef IncRoot
#ifdef ProjectRoot
#define IncRoot Concat(ProjectRoot,/include)
#ifndef AlternateIncRoot
#define AlternateIncRoot YES
#endif
#else
#define IncRoot /usr/include
#ifndef AlternateIncRoot
#define AlternateIncRoot NO
#endif
#endif
#else
#ifndef AlternateIncRoot
#define AlternateIncRoot YES
#endif
#endif
#ifndef UNCOMPRESSPATH
#define UNCOMPRESSPATH /usr/ucb/uncompress
#endif
#ifndef OptimizedCDebugFlags
#define OptimizedCDebugFlags -O
#endif

#ifndef DebuggableCDebugFlags
#define DebuggableCDebugFlags -g
#endif
#ifndef NoOpCDebugFlags
#define NoOpCDebugFlags /* as nothing */
#endif
#ifndef DefaultCDebugFlags
#define DefaultCDebugFlags OptimizedCDebugFlags
#endif
#ifndef DefaultCCOptions
#define DefaultCCOptions /* as nothing: this is for floating point, etc. */
#endif
#ifndef InstPgmFlags
#define InstPgmFlags -s
#endif
#ifndef InstBinFlags
#define InstBinFlags -m 0755
#endif
#ifndef InstUidFlags
#define InstUidFlags -m 4755
#endif
#ifndef InstLibFlags
#define InstLibFlags -m 0644
#endif
#ifndef InstIncFlags
#define InstIncFlags -m 0444
#endif
#ifndef InstManFlags
#define InstManFlags -m 0444
#endif
#ifndef InstDatFlags
#define InstDatFlags -m 0444
#endif
#ifndef InstKmemFlags
#define InstKmemFlags InstUidFlags    /* put -g kmem -m 2755 in site.def... */
#endif

#ifndef ArCmd
#if HasLargeTmp | SystemV4
#define ArCmd ar cq /* do nothing special */
#else
#define ArCmd ar clq    /* use local dir for temp files */
#endif
#endif
#ifndef BootstrapCFlags
#define BootstrapCFlags /**/
#endif
#ifndef HasGcc
#define HasGcc NO
#endif
#ifndef CcCmd
#if HasGcc
#define CcCmd gcc -fstrength-reduce -fpcc-struct-return
#else
#define CcCmd cc
#endif
#endif
#if HasFortran
#ifndef FortranCmd
#define FortranCmd f77
#endif
#ifndef FortranFlags
#define FortranFlags /**/
#endif
#ifndef FortranDebugFlags
#define FortranDebugFlags /**/      /* for -O or -g */
#endif
#endif
#ifndef AsCmd
#define AsCmd as
#endif
#ifndef CompressCmd
#define CompressCmd compress
#endif
#ifndef CppCmd
#define CppCmd /lib/cpp
#endif

#ifndef PreProcessCmd
#define PreProcessCmd CcCmd -E
#endif
#ifndef InstallCmd
#if SystemV | SystemV4
#ifdef UseInstalled
#define InstallCmd $(BINDIR)/bsdinst        /* hack should be in project */
#else
#define InstallCmd $(SCRIPTSRC)/bsdinst.sh  /* hack should be in project */
#endif
#else
#define InstallCmd install
#endif
#endif
#ifndef LdCmd
#define LdCmd ld
#endif
#ifndef LintCmd
#define LintCmd lint
#endif
#ifndef LintLibFlag
#if SystemV || SystemV4
#define LintLibFlag -o
#else
#define LintLibFlag -C
#endif
#endif
#ifndef LintOpts
#if SystemV || SystemV4
#define LintOpts -ax
#else
#define LintOpts -axz
#endif
#endif
#ifndef CpCmd
#define CpCmd cp
#endif

#ifndef LnCmd
#if SystemV
#define LnCmd ln /* or even cp */
#else
#define LnCmd ln -s
#endif
#endif
#ifndef MakeCmd
#define MakeCmd make
#endif
#ifndef MvCmd
#define MvCmd mv
#endif
#ifndef ChmodCmd
#define ChmodCmd chmod
#endif
#ifndef DoRanlibCmd
#if SystemV || SystemV4
#define DoRanlibCmd 0
#else
#define DoRanlibCmd 1
#endif
#endif
#ifndef RanlibCmd
#define RanlibCmd ranlib
#endif
#ifndef RanlibInstFlags
#define RanlibInstFlags /**/
#endif
#ifndef RmCmd
#define RmCmd rm -f
#endif
#ifndef StandardIncludes
#define StandardIncludes /**/           /* for platform-specifics */
#endif
#ifndef StandardDefines
#if SystemV
#define StandardDefines -DSYSV
#else
#if SystemV4
#define StandardDefines -DSVR4
#else
#define StandardDefines /**/
#endif
#endif
#endif
#ifndef StandardCppDefines
#define StandardCppDefines StandardDefines
#endif

#ifndef Malloc0ReturnsNull
#define Malloc0ReturnsNull NO
#endif
#ifndef NdbmDefines
#if HasNdbm
#define NdbmDefines -DNDBM
#else
#define NdbmDefines /**/
#endif
#endif
#ifndef ExtraLibraries
#if SystemV4
#if HasSockets
#define ExtraLibraries -lsocket -lnsl
#else
#define ExtraLibraries -lnsl
#endif
#else
#define ExtraLibraries /**/
#endif
#endif
#ifndef ExtraLoadFlags
#define ExtraLoadFlags /**/
#endif
#ifndef LdCombineFlags
#if SystemV4
#define LdCombineFlags -r
#else
#define LdCombineFlags -X -r
#endif
#endif
#ifndef TagsCmd
#define TagsCmd ctags
#endif
#ifndef LoaderLibPrefix
#define LoaderLibPrefix /**/            /* cray does -l libX11.a */
#endif
#ifndef DependFlags
#define DependFlags /**/
#endif

#ifndef TroffCmd
#define TroffCmd psroff
#endif
#ifndef MsMacros
#define MsMacros -ms
#endif
#ifndef TblCmd
#define TblCmd tbl
#endif
#ifndef EqnCmd
#define EqnCmd eqn
#endif
#ifndef ExpandManNames
#if SystemV
#define ExpandManNames NO
#else
#define ExpandManNames YES
#endif
#endif
#ifndef TOPDIR
#define TOPDIR .
#endif
#ifndef CURDIR
#define CURDIR .
#endif
#ifndef ExtraFilesToClean
#define ExtraFilesToClean /**/
#endif
#ifndef FilesToClean
#define FilesToClean *.CKP *.ln *.BAK *.bak *.o core errs ,* *~ *.a .emacs_* tags TAGS make.log MakeOut
#endif

/****************  BEGIN HP SPECIFIC SECTION 1 DEFINES ********************/
/** Set up -Ddefines for cde system paths **/
#ifndef CdeInstallationTop
#define CdeInstallationTop /usr/dt
#endif
#ifndef CdeConfigurationTop
#define CdeConfigurationTop /etc/dt
#endif
#ifndef CdeLogFilesTop
#define CdeLogFilesTop /var/dt
#endif
#ifndef CdeUserTop
#define CdeUserTop .dt
#endif

#ifndef ARCHIVED_LINK
#define ARCHIVED_LINK NO
#endif
#ifndef GnuMakeCmd
#define GnuMakeCmd /x/cdesrc/admin/BuildTools/gnumake/gnumake
#endif


#ifndef YaccCmd
#define YaccCmd yacc
#endif
#ifndef LexCmd
#define LexCmd lex
#endif
/* use mit libraries from build tree normally */
#ifndef UseMitLibrariesFromSystemOnly
#define UseMitLibrariesFromSystemOnly NO
#endif
#ifndef CoeUsrLibDir
#define CoeUsrLibDir UsrLibDir
#endif
#ifndef DtUsrLibDir
#define DtUsrLibDir /usr/dt/lib
#endif

#ifndef NlsTagUtil
#define NlsTagUtil	$(CDESRC)/localized/util/merge
#endif

#ifndef BUILD_UNITY_1_ONLY
#define BUILD_UNITY_1_ONLY NO
#endif

#if BUILD_UNITY_1_ONLY
#ifndef UseDtEncap
#define UseDtEncap	YES
#endif
#else
#ifndef UseDtEncap
#define UseDtEncap	NO
#endif
#endif

#ifndef HPVersion
#define HPVersion NO
#endif
#ifndef TheR5Tree
#define TheR5Tree YES
#endif 
#ifndef BbaFlags 
#define BbaFlags /**/
#endif
#ifndef LdBbaGenCmd
#define LdBbaGenCmd @echo out
#endif
#ifndef BbaGenCmd
#define BbaGenCmd @echo out
#endif
#ifndef BbaResultsRoot
#define BbaResultsRoot /bba_root/bba
#endif
#ifndef BbaDumpData
#define BbaDumpData bbadump.data
#endif
#ifndef BbaLOption
#define BbaLOption -l 0
#endif
#ifndef Build1_0_Server
#define Build1_0_Server NO
#endif
#ifndef ExtraCCOptions 
#define ExtraCCOptions /**/
#endif
#ifndef SharedMemoryDefines  /* global default no SHMLINK */
#define SharedMemoryDefines /**/
#endif
#ifndef LastLoadFlags 
#define LastLoadFlags /**/
#endif

/** Ansi is the default unless C++ is used. **/
#ifndef UseCPlusPlus
#define UseCPlusPlus NO
#endif

#if UseCPlusPlus
#undef UseAnsiC
#define UseAnsiC NO
#else /* CPlusPlus */
#ifndef UseAnsiC
#define UseAnsiC YES
#endif /* Ansi */
#endif /* CPlusPlus */

#ifndef AnsiDefines
#define AnsiDefines /**/
#endif

#ifndef ExtraHPDefines /** cannot use Wp option with Ansi on HP **/
#define ExtraHPDefines /**/
#endif

#ifndef VersionDefines
#define VersionDefines  /**/
#endif
#ifndef OSName
#define OSName /**/
#endif
#ifndef OSRev
#define OSRev /**/
#endif
#ifndef XVersion
#define XVersion /**/
#endif



/*******************************************************************************
	Definitions to support automatic version strings
*******************************************************************************/
#if HPVersion
#define HPVersionName	_hp_Version
#  ifndef HPVersionSrc
#define HPVersionSrc	HPVersionName.c
#  endif
#  ifndef HPVersionObj
#define HPVersionObj	HPVersionName.o
#  endif
#ifndef CreationDate
#define CreationDate (build date: `date`)
#endif
#  ifndef HPVersionString
#define HPVersionString		/**/
#  endif
/** Only Imakefiles with DESKTOP_VERSION_STRING = DeskTopVersionString
 ** will actually make a desktop version string.
 ** for old vue VUE_VERSION_STRING = VUEVersionString gives the same 
 ** result.
***/
#include <desktopversion.tmpl>
#endif		/* HPVersion */
/*******************************************************************************
	END Definitions to support automatic version strings
*******************************************************************************/
#ifndef DesktopVersionString
#define DesktopVersionString	/**/
#endif
#ifndef VUEVersionString
#define VUEVersionString	/**/
#endif
#ifndef ExtraVersionString	
#define ExtraVersionString	/**/
#endif
#  ifndef HPVersionObj
#define HPVersionObj   /**/
#  endif


/*** The following determines which versions of motif and X you 
     link clients against
***/



#if X11Release == Release4
#ifndef MotifVersion
#define MotifVersion Motif1.1 /* used for includes and libraries */
#endif
#endif

#ifndef MotifVersion /* if not r4 use motif1.2 */
#define MotifVersion Motif1.2 /* used for includes and libraries */
#endif


#ifndef PositionIndependentCFlags
#define PositionIndependentCFlags /**/
#endif
#ifndef CPlusPlusPositionIndependentCFlags
#define CPlusPlusPositionIndependentCFlags PositionIndependentCFlags
#endif

#ifndef ExtraCFlags
#define ExtraCFlags  /**/
#endif
#ifndef DefaultCCInlibs
#define DefaultCCInlibs /**/
#endif
#ifndef StripFlags
#define StripFlags /**/
#endif

#ifndef SharedClientLoadFlags
#define SharedClientLoadFlags /**/
#endif

#ifndef DefaultCPlusPlusIncludes
#define DefaultCPlusPlusIncludes /**/ /* -I/usr/include/CC for hp */
#endif
#ifndef DefaultCPlusPlusDefines
#define DefaultCPlusPlusDefines     StandardDefines
#endif
#ifndef DefaultCPlusPlusDebugFlags
#define DefaultCPlusPlusDebugFlags  DefaultCDebugFlags
#endif
#ifndef DefaultCPlusPlusOptions
#define DefaultCPlusPlusOptions     /**/
#endif
#ifndef ExtraCPlusPlusOptions
#define ExtraCPlusPlusOptions     /**/
#endif
#ifndef CPlusPlusTranslateOnly
#define CPlusPlusTranslateOnly     -Fc /* HP & Domain definition */
#endif
#ifndef ExtraCPlusPlusFlags
#define ExtraCPlusPlusFlags /**/
#endif
#ifndef CPlusPlusCcCmd
#define CPlusPlusCcCmd CC  
#endif
#ifndef CPlusPlusLibPath
#define CPlusPlusLibPath /**/
#endif
#ifndef CppTextFlags
/*
 * Try to make C preprocessor suitable for text file pre-processing:
 *  1) Suppress preprocessor line control info;
 *  2) Preserve C-style comments
 *  3) Undefine symbols which might be inadvertently replace text
 *  4) Use non-ansi (/lib/cpp) preprocessor to prevent unwanted line merging
 *     (of lines ending with backslash)
 */
#define CppTextFlags -P -C /* suppress line control info; preserve comments */
#endif
#ifndef CompatibilityFlags
#define CompatibilityFlags /**/
#endif
/******************* END OF HP SPECIFIC SECTION 1 DEFINES *******/

            SHELL = BourneShell

              TOP = TOPDIR
      CURRENT_DIR = CURDIR

               AR = ArCmd
  BOOTSTRAPCFLAGS = BootstrapCFlags /* set if cpp does not have uniq sym */
               AS = AsCmd
#if HasFortran
               FC = FortranCmd
      FDEBUGFLAGS = FortranDebugFlags
          FCFLAGS = FortranFlags $(FDEBUGFLAGS)
#endif
         COMPRESS = CompressCmd
              CPP = CppCmd $(STD_CPP_DEFINES)       /* simple filters */
    PREPROCESSCMD = PreProcessCmd $(STD_CPP_DEFINES)    /* prefered; mdep */
          INSTALL = InstallCmd
               LD = LdCmd
             LINT = LintCmd
      LINTLIBFLAG = LintLibFlag
         LINTOPTS = LintOpts
               LN = LnCmd
               MV = MvCmd
               CHMOD = ChmodCmd
               CP = CpCmd
#if DoRanlibCmd
           RANLIB = RanlibCmd
  RANLIBINSTFLAGS = RanlibInstFlags
#endif
               RM = RmCmd
            TROFF = TroffCmd
         MSMACROS = MsMacros
              TBL = TblCmd
              EQN = EqnCmd
     STD_INCLUDES = StandardIncludes
  STD_CPP_DEFINES = StandardCppDefines $(VERSION_DEFINES)
      STD_DEFINES = StandardDefines
 EXTRA_LOAD_FLAGS = ExtraLoadFlags
  EXTRA_LIBRARIES = ExtraLibraries
             TAGS = TagsCmd
#if ConstructMFLAGS
           MFLAGS = -$(MAKEFLAGS)
#endif
#if HasSharedLibraries
    SHAREDCODEDEF = SharedCodeDef
         SHLIBDEF = SharedLibraryDef
#endif
#if !HasVoidSignalReturn
   SIGNAL_DEFINES = -DSIGNALRETURNSINT
#endif
/*
 * The following supports forcing of function prototypes
 */
#if NeedFunctionPrototypes && NeedVarargsPrototypes && NeedConstPrototypes && NeedNestedPrototypes
#define _funcprotodef -DFUNCPROTO=15
#else
#if NeedFunctionPrototypes && NeedVarargsPrototypes && NeedNestedPrototypes
#define _funcprotodef -DFUNCPROTO=11
#else
#if NeedFunctionPrototypes && NeedNestedPrototypes
#define _funcprotodef -DFUNCPROTO=9
#else
#if NeedFunctionPrototypes && NeedVarargsPrototypes && NeedConstPrototypes
#define _funcprotodef -DFUNCPROTO=7
#else
#if NeedFunctionPrototypes && NeedConstPrototypes
#define _funcprotodef -DFUNCPROTO=5
#else
#if NeedFunctionPrototypes && NeedVarargsPrototypes
#define _funcprotodef -DFUNCPROTO=3
#else
#if NeedFunctionPrototypes
#define _funcprotodef -DFUNCPROTO
#else
#define _funcprotodef /**/
#endif
#endif
#endif
#endif
#endif
#endif
#endif
#if NeedWidePrototypes
#define _wideprotodef /**/
#else
#define _wideprotodef -DNARROWPROTO
#endif
    PROTO_DEFINES = _funcprotodef _wideprotodef
#undef _funcprotodef
#undef _wideprotodef

#if StripInstalledPrograms
     INSTPGMFLAGS = InstPgmFlags    /* install flags for stripping */
#else
     INSTPGMFLAGS =
#endif
     INSTBINFLAGS = InstBinFlags    /* install flags for programs */
     INSTUIDFLAGS = InstUidFlags    /* install flags for setuid programs */
     INSTLIBFLAGS = InstLibFlags    /* install flags for libraries */
     INSTINCFLAGS = InstIncFlags    /* install flags for headers */
     INSTMANFLAGS = InstManFlags    /* install flags for man pages */
     INSTDATFLAGS = InstDatFlags    /* install flags for data files */
    INSTKMEMFLAGS = InstKmemFlags   /* install flags for /dev/kmem progs */

#ifdef ProjectRoot
      PROJECTROOT = ProjectRoot
#endif
/************************** HP modified ***************************/
X11ENVTOP = $(TOP)/$(X11ENV)

#ifdef UseInstalled
#  if AlternateIncRoot
#    ifdef HPArchitecture
         TOP_INCLUDES = -I$(INCROOT)/$(X11LINKENV) -I$(INCROOT)/$(XMENV) -I$(INCROOT) 
#    else
       TOP_INCLUDES = -I$(INCROOT) -I$(INCROOT)/X11 
#      ifdef RsArchitecture
         TOP_INCLUDES = -I$(INCROOT) -I$(INCROOT)/X11 -I$(INCROOT)/X11/ext
#      endif /* RS */
#    endif /* HPAR */
#  endif /* Altincroot */
#else /* UseInstalled */
#  if UseMitLibrariesFromSystemOnly /* use system headers also */
#    ifdef UXPArchitecture
       TOP_INCLUDES = -I$(X11ENVTOP) -I$(X11ENVTOP)/X11 \
       -I$(INCROOT)/X11 -I$(INCROOT)/X11/extensions
       TOP++_INCLUDES = -I$(X11ENVTOP) -I$(X11ENVTOP)/X11 \
       $(C++INCLUDES) -I$(INCROOT)/X11 -I$(INCROOT)/X11/extensions
#    else
       TOP_INCLUDES = -I$(X11ENVTOP) -I$(X11ENVTOP)/X11 \
       -I$(INCROOT) -I$(INCROOT)/X11 -I$(INCROOT)/X11/extensions
       TOP++_INCLUDES = -I$(X11ENVTOP) -I$(X11ENVTOP)/X11 \
       $(C++INCLUDES) -I$(INCROOT) -I$(INCROOT)/X11 -I$(INCROOT)/X11/extensions
#    endif
#    ifdef HPArchitecture
         TOP_INCLUDES = -I$(X11ENVTOP) -I$(X11ENVTOP)/X11 \
	    -I$(INCROOT)/$(X11LINKENV) -I$(INCROOT)/$(X11LINKENV)/X11 -I$(INCROOT)/$(X11LINKENV)/X11/extensions
         TOP++_INCLUDES = -I$(X11ENVTOP) -I$(X11ENVTOP)/X11 \
            $(C++INCLUDES) -I$(INCROOT)/$(X11LINKENV) \
	    -I$(INCROOT)/$(X11LINKENV)/X11 -I$(INCROOT)/$(X11LINKENV)/X11/extensions
#endif
#    ifdef RsArchitecture
       TOP_INCLUDES = -I$(X11ENVTOP) -I$(X11ENVTOP)/X11 \
       -I$(INCROOT) -I$(INCROOT)/X11 -I$(INCROOT)/X11/ext
       TOP++_INCLUDES = -I$(X11ENVTOP) -I$(X11ENVTOP)/X11 \
       $(C++INCLUDES) $(C++INCLUDES)/X11 $(C++INCLUDES)/X11/ext
#    endif /* Rs */
#  else
     TOP_INCLUDES = -I$(X11ENVTOP) -I$(X11ENVTOP)/X11 /* def: for builds within tree */
     TOP++_INCLUDES = -I$(X11ENVTOP) -I$(X11ENVTOP)/X11 $(C++INCLUDES) /* def: for builds within tree */
#  endif /* Use Mit */
#endif /* Use Installed */

      CDEBUGFLAGS = DefaultCDebugFlags
        CCOPTIONS = DefaultCCOptions    /* to distinguish from param flags */
/*
 * STD_INCLUDES contains system-specific includes
 * TOP_INCLUDES specifies how to get to /usr/include or its build substitute
 * EXTRA_INCLUDES contains project-specific includes set in project incfiles
 * INCLUDES contains client-specific includes set in Imakefile
 * LOCAL_LDFLAGS contains client-specific ld flags flags set in Imakefile
 */
      ALLINCLUDES = $(INCLUDES) $(EXTRA_INCLUDES) $(TOP_INCLUDES) $(STD_INCLUDES) $(LAST_INCLUDES)
        LINTFLAGS = $(LINTOPTS) -DLINT $(ALLDEFINES)
/************************** HP modified ***************************/
	/* Define location of nls tagging utility */
           NLSTAGUTIL= NlsTagUtil


	   /* SPECIAL_CC_OPTIONS is a vehicle for hp 700 ESLIT option */
           CFLAGS = $(CDEBUGFLAGS) $(CCOPTIONS) $(ALLDEFINES) \
		    $(EXTRA_CCOPTIONS) $(SPECIAL_CC_OPTIONS)
#if AlternateUsrLibDir && !defined(UseInstalled)
           LDLIBS = -L$(USRLIBDIR) $(SYS_LIBRARIES) $(EXTRA_LIBRARIES) $(BBA_DOT_A) $(LAST_LOAD_FLAGS)
#else
           LDLIBS = $(SYS_LIBRARIES) $(EXTRA_LIBRARIES) $(BBA_DOT_A) $(LAST_LOAD_FLAGS)
#endif
/*********************** end HP modified **************************/
   LDCOMBINEFLAGS = LdCombineFlags
      DEPENDFLAGS = DependFlags

        MACROFILE = MacroFile
           RM_CMD = $(RM) FilesToClean ExtraFilesToClean

    IMAKE_DEFINES = /* leave blank, for command line use only */
#ifdef UseInstalled
         IRULESRC = $(CONFIGDIR)    /* used in rules file */
        IMAKE_CMD = $(IMAKE) -DUseInstalled -I$(IRULESRC) $(IMAKE_DEFINES)
#else
         IRULESRC = $(CONFIGSRC)
        IMAKE_CMD = $(NEWTOP)$(IMAKE) -I$(NEWTOP)$(IRULESRC) $(IMAKE_DEFINES)
#endif
     ICONFIGFILES = $(IRULESRC)/Imake.tmpl $(IRULESRC)/Imake.rules \
            $(IRULESRC)/Project.tmpl $(IRULESRC)/site.def \
            $(IRULESRC)/$(MACROFILE) $(EXTRA_ICONFIGFILES)


/******************* BEGIN HP SPECIFIC SECTION 2 MACRO DEFS *************/
/** make macros for -Ddefines setting cde system paths **/
CDE_INSTALLATION_TOP = CdeInstallationTop
CDE_CONFIGURATION_TOP = CdeConfigurationTop
CDE_LOGFILES_TOP = CdeLogFilesTop
CDE_USER_TOP = CdeUserTop


             GNUMAKE = GnuMakeCmd

          /*************************************************
           * Support for Automatic HPVersion Strings       *
          **************************************************/
HP_VERSION_OBJ = HPVersionObj
HP_VERSION_SRC = HPVersionSrc
CREATION_DATE  = CreationDate
HP_VERSION_STRING = HPVersionString
EXTRA_VERSION_STRING = ExtraVersionString

/* used for partial clones away from build trees */
#ifndef SERVERTOPDIR
#define SERVERTOPDIR TOPDIR
#endif
        SERVERTOP = SERVERTOPDIR


/*
 * Setup environment variables to be used when linking
 */
#ifdef HPArchitecture
          STLIBCXXENV = ST_LIBCXX=/usr/lib/libC.a
#else
          STLIBCXXENV =
#endif

#if HasLdRunPath
#if UseCplusPlus
         LDRUNPATHENV = LD_RUN_PATH=$(DTUSRLIBDIR):$(USRLIBDIR):$(CXXLIBDIR)
#else
         LDRUNPATHENV = LD_RUN_PATH=$(DTUSRLIBDIR):$(USRLIBDIR)
#endif
#endif /* HasLdRunPath */

#if UseCPlusPlus
             ENVSETUP = $(STLIBCXXENV) $(LDRUNPATHENV)
# else
             ENVSETUP = $(LDRUNPATHENV)
#endif

/*
 * Define link macros
 */
#if UseCPlusPlus
#  ifdef SunArchitecture
       PRISTINELINKCC = CPlusPlusCcCmd -norunpath
              LINKCC = $(ENVSETUP) CPlusPlusCcCmd -norunpath
#  else
       PRISTINELINKCC = CPlusPlusCcCmd
              LINKCC = $(ENVSETUP) CPlusPlusCcCmd
#  endif
          C++INCLUDES = DefaultCPlusPlusIncludes
#  ifdef HPArchitecture
           C++LIBPATH = 
#  else
           C++LIBPATH = CPlusPlusLibPath
#  endif
#else
       PRISTINELINKCC = CcCmd
               LINKCC = $(ENVSETUP) CcCmd
          C++INCLUDES = 
           C++LIBPATH =
#endif /* UseCPlusPlus */
               CC = CcCmd $(BBAFLAGS)
#if UseAnsiC || UseCPlusPlus
     ANSI_DEFINES = AnsiDefines
     EXTRA_HP_DEFINES =
#else
     ANSI_DEFINES = 
     EXTRA_HP_DEFINES=ExtraHPDefines
#endif
         PICFLAGS = PositionIndependentCFlags
         BBAFLAGS = BbaFlags
        LD_BBAGEN = LdBbaGenCmd
           BBAGEN = BbaGenCmd
 BBA_RESULTS_ROOT = BbaResultsRoot
    BBA_DUMP_DATA = BbaDumpData
     BBA_D_OPTION = -d $(BBA_RESULTS_ROOT)/$(HARDWARE)/$(CURRENT_DIR)/$(BBA_DUMP_DATA)
     BBA_L_OPTION = BbaLOption
  EXTRA_CCOPTIONS = ExtraCCOptions
  LAST_LOAD_FLAGS = LastLoadFlags
       ALLDEFINES = $(LOCAL_INCLUDES) $(ALLINCLUDES) $(STD_DEFINES) $(EXTRA_DEFINES) $(VERSION_DEFINES) $(PROTO_DEFINES) $(ANSI_DEFINES) $(DEFINES) $(EXTRA_HP_DEFINES) 
      STD_DEFINES = StandardDefines
  VERSION_DEFINES = VersionDefines
           OSNAME = OSName
            OSREV = OSRev
         XVERSION = XVersion
    CPP_TXT_FLAGS = CppTextFlags
   OSMAJORVERSION = OSMajorVersion
   OSMINORVERSION = OSMinorVersion
/* Old environments are set up as subdirectories.
 * E.g.  There is a TOP/X11R4 subdirectory for R4 in this r5 tree.
 * If X11release is R5 we want to access TOP and not TOP/X11R5.
 * X11ENV adds the subdir to TOP.
**/
#if X11Release == Release5
           X11ENV = 
#else
           X11ENV = X11R/**/X11Release
#endif
    X11VERSIONENV =  R/**/X11Release/**/+
       X11LINKENV = X11R/**/X11Release
         MOTIFENV = MotifVersion
            XMENV = MotifVersion
              C++ = CPlusPlusCcCmd $(BBAFLAGS)
       C++DEFINES = DefaultCPlusPlusDefines
C++TRANSLATE_ONLY = CPlusPlusTranslateOnly
  EXTRA_C++FLAGS = ExtraCPlusPlusFlags
       C++OPTIONS = DefaultCPlusPlusOptions
 EXTRA_C++OPTIONS = ExtraCPlusPlusOptions
    C++DEBUGFLAGS = DefaultCPlusPlusDebugFlags
      COMPATFLAGS = CompatibilityFlags
      EXTRA_CFLAGS= ExtraCFlags
     SHCLTLDFLAGS = SharedClientLoadFlags
        PICCFLAGS = PositionIndependentCFlags
         C++FLAGS = $(C++INCLUDES) $(CFLAGS)
         C++FLAGS = $(C++DEBUGFLAGS) $(C++OPTIONS) \
		    $(ALL++INCLUDES) $(ALL++DEFINES) $(EXTRA_C++OPTIONS) \
		    $(SPECIAL_C++OPTIONS)
      C++PICFLAGS = CPlusPlusPositionIndependentCFlags
      ALL++INCLUDES = $(INCLUDES) $(EXTRA_INCLUDES) $(TOP++_INCLUDES) $(STD_INCLUDES) $(LAST_INCLUDES)
       ALL++DEFINES = $(STD_DEFINES) $(EXTRA_DEFINES) $(VERSION_DEFINES) $(PROTO_DEFINES) $(ANSI_DEFINES) $(DEFINES) $(EXTRA_HP_DEFINES)

#if !UseCPlusPlus
#if !ARCHIVED_LINK
        CCINLIBS  = DefaultCCInlibs
        LDOPTIONS = $(SHCLTLDFLAGS) $(LOCAL_LDFLAGS) $(ALL_LIBPATH)
#else
#if AlternateUsrLibDir && defined(UseInstalled)
        LDOPTIONS = $(SHCLTLDFLAGS) $(LOCAL_LDFLAGS) $(ALL_LIBPATH)
#else
        LDOPTIONS = $(SHCLTLDFLAGS) $(LOCAL_LDFLAGS) $(ALL_LIBPATH)
#endif
#endif

#else /* C++ */
#if !ARCHIVED_LINK
        CCINLIBS  = DefaultCCInlibs
        LDOPTIONS = $(SHCLTLDFLAGS) $(LOCAL_LDFLAGS) $(ALL_LIBPATH)
#else
#if AlternateUsrLibDir && defined(UseInstalled)
        LDOPTIONS = $(SHCLTLDFLAGS) $(LOCAL_LDFLAGS) $(ALL_LIBPATH)
#else
        LDOPTIONS = $(C++DEBUGFLAGS) $(C++OPTIONS) $(ANSI_DEFINES) $(LOCAL_LD++FLAGS) $(SPECIAL_C++OPTIONS)  -L$(USRLIBDIR) 
#endif
#endif
#endif



     SHLIBLDFLAGS = SharedLibraryLoadFlags




/* the following are doubtful */
#ifndef LibraryCDebugFlags
#define LibraryCDebugFlags OptimizedCDebugFlags
#endif

#ifndef LibraryCCOptions
#define LibraryCCOptions DefaultCCOptions
#endif
#ifndef ServerCCOptions
#define ServerCCOptions DefaultCCOptions
#endif

/*** end doubtful ***/
/*******END  HP SPECIFIC SECTION 2 MACRO DEFS **********************/

/*
 * get project-specific configuration and rules
 */

/*
 * Include SunCDE template if enabled
 */
#if SunCDE
#include <sun/SunCDE.tmpl>
#endif

/***********************************************************************
 * INCLUDE CDE SPECIFIC MAKE MACROS
 ***********************************************************************/
#define AfterCdeImakeTmpl
#include <cde/cdeImake.tmpl>
#undef AfterCdeImakeTmpl

#include <Project.tmpl>

/**** HP ADDITION ****/

/**** Template and rules files for Motif tests and clients ****/
#include <Motif.tmpl>

#include <cde/cde.rules>

#include <local.rules>

#include <Imake.rules>

#include <Motif.rules>


#ifdef IHaveLocalTmpl
#include <LclPre.tmpl>
#endif /* IHaveLocalTmpl */

XCOMM -------------------------------------------------------------------------
XCOMM start of Imakefile
#include INCLUDE_IMAKEFILE

XCOMM -------------------------------------------------------------------------
XCOMM common rules for all Makefiles - do not edit
/*
 * These need to be here so that rules in Imakefile occur first;  the blank
 * all is to make sure that an empty Imakefile does not default to make clean.
 */
emptyrule::

CleanTarget()

#ifndef IHaveSpecialMakefileTarget
MakefileTarget()
#endif

TagsTarget()
#ifdef MakefileAdditions
MakefileAdditions()
#endif

SaberLoadTarget(saber,$(SRCS),NullParameter,$(ALLDEFINES))

SaberLoadTarget(osaber,$(OBJS),NullParameter,$(ALLDEFINES))


#ifdef IHaveSubdirs
XCOMM -------------------------------------------------------------------------
XCOMM rules for building in SUBDIRS - do not edit

InstallSubdirs($(SUBDIRS))
InstallManSubdirs($(SUBDIRS))
CleanSubdirs($(SUBDIRS))
TagSubdirs($(SUBDIRS))
MakefileSubdirs($(SUBDIRS))
IncludesSubdirs($(SUBDIRS))
LocalIncludesSubdirs($(SUBDIRS))
#else
XCOMM -------------------------------------------------------------------------
XCOMM empty rules for directories that do not have SUBDIRS - do not edit

install::
	@echo "install in $(CURRENT_DIR) done"

install.man::
	@echo "install.man in $(CURRENT_DIR) done"

Makefiles::

includes::

binstall::

localincludes::

#endif /* if subdirectory rules are needed */
#ifdef IHaveLocalTmpl
#include <LclPost.tmpl>
#endif /* IHaveLocalTmpl */

XCOMM -------------------------------------------------------------------------
XCOMM dependencies generated by makedepend



