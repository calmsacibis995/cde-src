DESKTOP_VERSION_STRING = DesktopVersionString

MODULE=Test

LOCAL_CPP_DEFINES = -DCDE_INSTALLATION_TOP=$(CDE_INSTALLATION_TOP) \
                    -DCDE_CONFIGURATION_TOP=$(CDE_CONFIGURATION_TOP)

#define IHaveSubdirs
#define PassCDebugFlags 'CDEBUGFLAGS=$(CDEBUGFLAGS)'

SUBDIRS = PrintObj

MakeSubdirs($(SUBDIRS))
DependSubdirs($(SUBDIRS))

INCLUDES = -I. -I.. -IPrintObj -I../util

/* DEPLIBS contains the list of library depencies for a client.
 * LOCAL_LIBRARIES contains the list of libraries on the link line.
 * Generally, the dependency form of a library has DEP as a prefix.
 * e.g. put $(XLIB) in LOCAL_LIBRARIES and $(DEPXLIB) in DEPLIBS.
 * NOTE: if DEPLIBS is not set here, it is by default null and there
 *       are no library dependencies for clients.
 *       You cannot put -Llibpath into DEPLIBS. You must put actual
 *       paths to the library.
 */

#if defined(UXPArchitecture)
DEPLIBS = ./PrintObj/libPrintObj.a ../util/libUtil.a \
		$(DEPDTSVCLIB) $(DEPXMLIB) $(DEPXTOOLLIB) $(DEPXLIB) 
#else
DEPLIBS = ./PrintObj/libPrintObj.a ../util/libUtil.a
#endif

/* put EXTRA_DEFINES and EXTRA_INCLUDES and anything else below */
#ifdef HPArchitecture
#endif

#ifdef SunArchitecture
.NO_PARALLEL:
SYS_LIBRARIES = -ldl $(I18NSYSLIB) -lgen -lsocket -lnsl
LAST_LOAD_FLAGS = -Bstatic -lC -Bdynamic -lm -lc -ladm -Bstatic
EXTRA_DEFINES = -DOSMAJORVERSION=$(OSMAJORVERSION) -DOSMINORVERSION=$(OSMINORVERSION)
#endif

#ifdef RsArchitecture
/* NONSHAREDLIBCOBJ = nonsharelibC.o */
NONSHAREDLIBCOBJ =
EXTRA_DEFINES = -DHAS_EXCEPTIONS
#endif

#ifdef USLArchitecture
#endif

LOCAL_LIBRARIES = ./PrintObj/libPrintObj.a ../util/libUtil.a $(DTSVCLIB)

#if defined(USLArchitecture) || defined(UXPArchitecture)
LOCAL_LIBRARIES = ./PrintObj/libPrintObj.a ../util/libUtil.a $(DTSVCLIB) $(XMLIB) $(XTOOLLIB) $(XLIB)
#endif

#ifdef AlphaArchitecture
EXTRA_DEFINES = -DMESSAGE_CAT
#endif

HEADERS=\
	BaseObj.h

SRCS = \
	BaseObj.C \
	Test.C

OBJS = \
	BaseObj.o \
	Test.o \
	$(NONSHAREDLIBCOBJ)

NormalLibraryObjectRule()
ComplexProgramTarget(Test)

clean::
	$(RM) *.map
