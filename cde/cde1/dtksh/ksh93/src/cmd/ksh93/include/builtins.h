/* $XConsortium: builtins.h /main/cde1_maint/3 1995/10/14 00:07:02 montyb $ */
/***************************************************************
*                                                              *
*                      AT&T - PROPRIETARY                      *
*                                                              *
*        THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF        *
*                    AT&T BELL LABORATORIES                    *
*         AND IS NOT TO BE DISCLOSED OR USED EXCEPT IN         *
*            ACCORDANCE WITH APPLICABLE AGREEMENTS             *
*                                                              *
*                Copyright (c) 1995 AT&T Corp.                 *
*              Unpublished & Not for Publication               *
*                     All Rights Reserved                      *
*                                                              *
*       The copyright notice above does not evidence any       *
*      actual or intended publication of such source code      *
*                                                              *
*               This software was created by the               *
*           Advanced Software Technology Department            *
*                    AT&T Bell Laboratories                    *
*                                                              *
*               For further information contact                *
*                    {research,attmail}!dgk                    *
*                                                              *
***************************************************************/

/* : : generated by proto : : */
                  

#ifndef SYSDECLARE
#if !defined(__PROTO__)
#if defined(__STDC__) || defined(__cplusplus) || defined(_proto) || defined(c_plusplus)
#if defined(__cplusplus)
#define __MANGLE__	"C"
#else
#define __MANGLE__
#endif
#define __STDARG__
#define __PROTO__(x)	x
#define __OTORP__(x)
#define __PARAM__(n,o)	n
#if !defined(__STDC__) && !defined(__cplusplus)
#if !defined(c_plusplus)
#define const
#endif
#define signed
#define void		int
#define volatile
#define __V_		char
#else
#define __V_		void
#endif
#else
#define __PROTO__(x)	()
#define __OTORP__(x)	x
#define __PARAM__(n,o)	o
#define __MANGLE__
#define __V_		char
#define const
#define signed
#define void		int
#define volatile
#endif
#if defined(__cplusplus) || defined(c_plusplus)
#define __VARARG__	...
#else
#define __VARARG__
#endif
#if defined(__STDARG__)
#define __VA_START__(p,a)	va_start(p,a)
#else
#define __VA_START__(p,a)	va_start(p)
#endif
#endif


#include	<option.h>
#include	"FEATURE/options"
#include	"FEATURE/dynamic"
#include	"shtable.h"

#define	SYSLOGIN	(sh.bltin_cmds)
#define SYSEXEC		(sh.bltin_cmds+1)
#define SYSSET		(sh.bltin_cmds+2)
#define SYSTRUE		(sh.bltin_cmds+4)
#define SYSCOMMAND	(sh.bltin_cmds+5)
#define SYSCD		(sh.bltin_cmds+6)
#define SYSBREAK	(sh.bltin_cmds+7)
#define SYSCONT		(sh.bltin_cmds+8)
#define SYSTYPESET	(sh.bltin_cmds+9)
#define SYSTEST		(sh.bltin_cmds+10)
#define SYSBRACKET	(sh.bltin_cmds+11)

/* entry point for shell special builtins */
extern __MANGLE__ int b_alias __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_brk_cont __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_dot_cmd __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_exec __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_eval __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_ret_exit __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_login __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_true __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_false __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_read_export __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_set __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_shift __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_trap __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_typeset __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_unset __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_unalias __PROTO__((int, char*[],__V_*));

/* The following are for job control */
#if defined(SIGCLD) || defined(SIGCHLD)
    extern __MANGLE__ int b_jobs __PROTO__((int, char*[],__V_*));
    extern __MANGLE__ int b_kill __PROTO__((int, char*[],__V_*));
#   ifdef SIGTSTP
	extern __MANGLE__ int b_bg_fg __PROTO__((int, char*[],__V_*));
#   endif	/* SIGTSTP */
#endif

/* The following utilities are built-in because of side-effects */
extern __MANGLE__ int b_builtin __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_cd __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_command __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_getopts __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_hist __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_let __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_read __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_ulimit __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_umask __PROTO__((int, char*[],__V_*));
#ifdef _cmd_universe
    extern __MANGLE__ int b_universe __PROTO__((int, char*[],__V_*));
#endif /* _cmd_universe */
#ifdef SHOPT_FS_3D
    extern __MANGLE__ int b_vpath_map __PROTO__((int, char*[],__V_*));
#endif /* SHOPT_FS_3D */
extern __MANGLE__ int b_wait __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_whence __PROTO__((int, char*[],__V_*));

extern __MANGLE__ int b_alarm __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_print __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_printf __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_pwd __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_sleep __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_test __PROTO__((int, char*[],__V_*));
#ifndef SHOPT_ECHOPRINT
    extern __MANGLE__ int b_echo __PROTO__((int, char*[],__V_*));
#endif /* SHOPT_ECHOPRINT */
/* The following utilities need not be built-ins, but improve performance */
extern __MANGLE__ int b_basename __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_cat __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_chmod __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_cmp __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_cut __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_dirname __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_getconf __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_head __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_id __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_logname __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_mkdir __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_tail __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_tty __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_uname __PROTO__((int, char*[],__V_*));
extern __MANGLE__ int b_wc __PROTO__((int, char*[],__V_*));

/* The following are extensions for apollo computers */
#ifdef	 apollo
    extern __MANGLE__ int b_rootnode __PROTO__((int, char*[],__V_*));
    extern __MANGLE__ int b_inlib __PROTO__((int, char*[],__V_*));
    extern __MANGLE__ int b_ver __PROTO__((int, char*[],__V_*));
#endif	/* apollo */

extern __MANGLE__ const char	e_alrm1[];
extern __MANGLE__ const char	e_alrm2[];
extern __MANGLE__ const char	e_badfun[];
extern __MANGLE__ const char	e_baddisc[];
extern __MANGLE__ const char	e_nofork[];
extern __MANGLE__ const char	e_nosignal[];
extern __MANGLE__ const char	e_nolabels[];
extern __MANGLE__ const char	e_notimp[];
extern __MANGLE__ const char	e_nosupport[];
extern __MANGLE__ const char	e_badbase[];
extern __MANGLE__ const char	e_overlimit[];

extern __MANGLE__ const char	e_needspath[];
extern __MANGLE__ const char	e_eneedsarg[];
extern __MANGLE__ const char	e_toodeep[];
extern __MANGLE__ const char	e_badconf[];
extern __MANGLE__ const char	e_badname[];
extern __MANGLE__ const char	e_badwrite[];
extern __MANGLE__ const char	e_badsyntax[];
#ifdef _cmd_universe
    extern __MANGLE__ const char	e_nouniverse[];
#endif /* _cmd_universe */
extern __MANGLE__ const char	e_histopen[];
extern __MANGLE__ const char	e_condition[];
extern __MANGLE__ const char	e_badrange[];
extern __MANGLE__ const char	e_numeric[];
extern __MANGLE__ const char	e_trap[];
extern __MANGLE__ const char	e_direct[];
extern __MANGLE__ const char	e_defedit[];
extern __MANGLE__ const char	e_cneedsarg[];
#ifdef SHOPT_FS_3D
    extern __MANGLE__ const char	e_cantset[];
    extern __MANGLE__ const char	e_cantget[];
    extern __MANGLE__ const char	e_mapping[];
    extern __MANGLE__ const char	e_versions[];
#endif /* SHOPT_FS_3D */
#ifdef apollo
    extern __MANGLE__ const char	e_rootnode[];
    extern __MANGLE__ const char	e_nover[];
    extern __MANGLE__ const char	e_badver[];
    extern __MANGLE__ const char	e_badinlib[];
#endif /* apollo */

/* for option parsing */
extern __MANGLE__ const char sh_optalarm[];
extern __MANGLE__ const char sh_optalias[];
extern __MANGLE__ const char sh_optbuiltin[];
extern __MANGLE__ const char sh_optcd[];
extern __MANGLE__ const char sh_optcflow[];
extern __MANGLE__ const char sh_optcommand[];
extern __MANGLE__ const char sh_optdot[];
#ifndef ECHOPRINT
    extern __MANGLE__ const char sh_optecho[];
#endif /* !ECHOPRINT */
extern __MANGLE__ const char sh_opteval[];
extern __MANGLE__ const char sh_optexec[];
extern __MANGLE__ const char sh_optexport[];
extern __MANGLE__ const char sh_optgetopts[];
extern __MANGLE__ const char sh_optgetconf[];
extern __MANGLE__ const char sh_optjoblist[];
extern __MANGLE__ const char sh_opthist[];
extern __MANGLE__ const char sh_optjobs[];
extern __MANGLE__ const char sh_optkill[];
extern __MANGLE__ const char sh_optksh[];
extern __MANGLE__ const char sh_optlet[];
extern __MANGLE__ const char sh_optprint[];
extern __MANGLE__ const char sh_optprintf[];
extern __MANGLE__ const char sh_optpwd[];
extern __MANGLE__ const char sh_optread[];
extern __MANGLE__ const char sh_optset[];
extern __MANGLE__ const char sh_optsleep[];
extern __MANGLE__ const char sh_opttrap[];
extern __MANGLE__ const char sh_opttypeset[];
extern __MANGLE__ const char sh_optulimit[];
extern __MANGLE__ const char sh_optumask[];
extern __MANGLE__ const char sh_optunalias[];
#ifdef _cmd_universe
    extern __MANGLE__ const char sh_optuniverse[];
#endif /* _cmd_universe */
extern __MANGLE__ const char sh_optunset[];
#ifdef SHOPT_FS_3D
    extern __MANGLE__ const char sh_optvpath[];
    extern __MANGLE__ const char sh_optvmap[];
#endif /* SHOPT_FS_3D */
extern __MANGLE__ const char sh_optwhence[];
#endif /* SYSDECLARE */
