/* $XConsortium: path.h /main/cde1_maint/3 1995/10/14 00:09:00 montyb $ */
/***************************************************************
*                                                              *
*                      AT&T - PROPRIETARY                      *
*                                                              *
*        THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF        *
*                    AT&T BELL LABORATORIES                    *
*         AND IS NOT TO BE DISCLOSED OR USED EXCEPT IN         *
*            ACCORDANCE WITH APPLICABLE AGREEMENTS             *
*                                                              *
*                Copyright (c) 1995 AT&T Corp.                 *
*              Unpublished & Not for Publication               *
*                     All Rights Reserved                      *
*                                                              *
*       The copyright notice above does not evidence any       *
*      actual or intended publication of such source code      *
*                                                              *
*               This software was created by the               *
*           Advanced Software Technology Department            *
*                    AT&T Bell Laboratories                    *
*                                                              *
*               For further information contact                *
*                    {research,attmail}!dgk                    *
*                                                              *
***************************************************************/

/* : : generated by proto : : */
                  
#ifndef PATH_OFFSET
#if !defined(__PROTO__)
#if defined(__STDC__) || defined(__cplusplus) || defined(_proto) || defined(c_plusplus)
#if defined(__cplusplus)
#define __MANGLE__	"C"
#else
#define __MANGLE__
#endif
#define __STDARG__
#define __PROTO__(x)	x
#define __OTORP__(x)
#define __PARAM__(n,o)	n
#if !defined(__STDC__) && !defined(__cplusplus)
#if !defined(c_plusplus)
#define const
#endif
#define signed
#define void		int
#define volatile
#define __V_		char
#else
#define __V_		void
#endif
#else
#define __PROTO__(x)	()
#define __OTORP__(x)	x
#define __PARAM__(n,o)	o
#define __MANGLE__
#define __V_		char
#define const
#define signed
#define void		int
#define volatile
#endif
#if defined(__cplusplus) || defined(c_plusplus)
#define __VARARG__	...
#else
#define __VARARG__
#endif
#if defined(__STDARG__)
#define __VA_START__(p,a)	va_start(p,a)
#else
#define __VA_START__(p,a)	va_start(p)
#endif
#endif


/*
 *	UNIX shell path handling interface
 *	Written by David Korn
 *	These are the definitions for the lexical analyzer
 */

#include	"FEATURE/options"
#include	<nval.h>

#define PATH_OFFSET	2		/* path offset for path_join */
#define MAXDEPTH (32*sizeof(int))	/* maximum levels of recursion */

struct argnod;

/* pathname handling routines */
extern __MANGLE__ void 		path_alias __PROTO__((Namval_t*,char*));
extern __MANGLE__ char 		*path_absolute __PROTO__((const char*,const char*));
extern __MANGLE__ char 		*path_basename __PROTO__((const char*));
extern __MANGLE__ int 		path_expand __PROTO__((const char*, struct argnod**));
extern __MANGLE__ void 		path_exec __PROTO__((const char*,char*[],struct argnod*));
extern __MANGLE__ int		path_open __PROTO__((const char*,char*));
extern __MANGLE__ char 		*path_get __PROTO__((const char*));
extern __MANGLE__ char		*path_join __PROTO__((char*,const char*));
extern __MANGLE__ char 		*path_pwd __PROTO__((int));
extern __MANGLE__ int		path_search __PROTO__((const char*,const char*,int));
extern __MANGLE__ char		*path_relative __PROTO__((const char*));
extern __MANGLE__ int		path_complete __PROTO__((const char*, const char*,struct argnod**));
#ifdef SHOPT_BRACEPAT
    extern __MANGLE__ int 		path_generate __PROTO__((struct argnod*,struct argnod**));
#endif /* SHOPT_BRACEPAT */

/* constant strings needed for whence */
extern __MANGLE__ const char e_real[];
extern __MANGLE__ const char e_user[];
extern __MANGLE__ const char e_sys[];
extern __MANGLE__ const char e_dot[];
extern __MANGLE__ const char e_pwd[];
extern __MANGLE__ const char e_logout[];
extern __MANGLE__ const char e_alphanum[];
extern __MANGLE__ const char e_mailmsg[];
extern __MANGLE__ const char e_suidprofile[];
extern __MANGLE__ const char e_sysprofile[];
extern __MANGLE__ const char e_traceprompt[];
extern __MANGLE__ const char e_crondir[];
#ifdef SHOPT_SUID_EXEC
    extern __MANGLE__ const char	e_suidexec[];
#endif /* SHOPT_SUID_EXEC */
#ifdef SHOPT_VPIX
    extern __MANGLE__ const char	e_vpix[];
    extern __MANGLE__ const char	e_vpixdir[];
#endif /* SHOPT_VPIX */
extern __MANGLE__ const char is_[];
extern __MANGLE__ const char is_alias[];
extern __MANGLE__ const char is_builtin[];
extern __MANGLE__ const char is_builtver[];
extern __MANGLE__ const char is_reserved[];
extern __MANGLE__ const char is_talias[];
extern __MANGLE__ const char is_xalias[];
extern __MANGLE__ const char is_function[];
extern __MANGLE__ const char is_xfunction[];
extern __MANGLE__ const char is_ufunction[];
#ifdef SHELLMAGIC
    extern __MANGLE__ const char e_prohibited[];
#endif /* SHELLMAGIC */

#ifdef SHOPT_ACCT
#   include	"FEATURE/acct"
#   ifdef	_sys_acct
	extern __MANGLE__ void sh_accinit __PROTO__((void));
	extern __MANGLE__ void sh_accbegin __PROTO__((const char*));
	extern __MANGLE__ void sh_accend __PROTO__((void));
	extern __MANGLE__ void sh_accsusp __PROTO__((void));
#   else
#	undef	SHOPT_ACCT
#   endif	/* _sys_acct */
#endif /* SHOPT_ACCT */

#endif /*! PATH_OFFSET */
