/* $XConsortium: proc.h /main/cde1_maint/3 1995/10/14 00:42:04 montyb $ */
/***************************************************************
*                                                              *
*                      AT&T - PROPRIETARY                      *
*                                                              *
*         THIS IS PROPRIETARY SOURCE CODE LICENSED BY          *
*                          AT&T CORP.                          *
*                                                              *
*                Copyright (c) 1995 AT&T Corp.                 *
*                     All Rights Reserved                      *
*                                                              *
*           This software is licensed by AT&T Corp.            *
*       under the terms and conditions of the license in       *
*       http://www.research.att.com/orgs/ssr/book/reuse        *
*                                                              *
*               This software was created by the               *
*           Software Engineering Research Department           *
*                    AT&T Bell Laboratories                    *
*                                                              *
*               For further information contact                *
*                     gsf@research.att.com                     *
*                                                              *
***************************************************************/

/* : : generated by proto : : */
                  

/*
 * process library interface
 */

#ifndef _PROC_H
#if !defined(__PROTO__)
#if defined(__STDC__) || defined(__cplusplus) || defined(_proto) || defined(c_plusplus)
#if defined(__cplusplus)
#define __MANGLE__	"C"
#else
#define __MANGLE__
#endif
#define __STDARG__
#define __PROTO__(x)	x
#define __OTORP__(x)
#define __PARAM__(n,o)	n
#if !defined(__STDC__) && !defined(__cplusplus)
#if !defined(c_plusplus)
#define const
#endif
#define signed
#define void		int
#define volatile
#define __V_		char
#else
#define __V_		void
#endif
#else
#define __PROTO__(x)	()
#define __OTORP__(x)	x
#define __PARAM__(n,o)	o
#define __MANGLE__
#define __V_		char
#define const
#define signed
#define void		int
#define volatile
#endif
#if defined(__cplusplus) || defined(c_plusplus)
#define __VARARG__	...
#else
#define __VARARG__
#endif
#if defined(__STDARG__)
#define __VA_START__(p,a)	va_start(p,a)
#else
#define __VA_START__(p,a)	va_start(p)
#endif
#endif

#define _PROC_H

#include <ast.h>

#define PROC_ARGMOD	(1<<0)	/* argv[-1],argv[0] can be modified	*/
#define PROC_BACKGROUND	(1<<1)	/* shell background (&) setup		*/
#define PROC_CLEANUP	(1<<2)	/* close parent redirect fds on error	*/
#define PROC_DAEMON	(1<<3)	/* daemon setup				*/
#define PROC_ENVCLEAR	(1<<4)	/* clear environment			*/
#define PROC_GID	(1<<5)	/* setgid(getgid())			*/
#define PROC_IGNORE	(1<<6)	/* ignore parent pipe errors		*/
#define PROC_OVERLAY	(1<<7)	/* overlay current process if possible	*/
#define PROC_PARANOID	(1<<8)	/* restrict everything			*/
#define PROC_PRIVELEGED	(1<<9)	/* setuid(0), setgid(getegid())		*/
#define PROC_READ	(1<<10)	/* proc pipe fd 1 returned		*/
#define PROC_SESSION	(1<<11)	/* session leader			*/
#define PROC_UID	(1<<12)	/* setuid(getuid())			*/
#define PROC_WRITE	(1<<13)	/* proc pipe fd 0 returned		*/

#define PROC_ARG_BIT	14	/* bits per op arg			*/
#define PROC_OP_BIT	4	/* bits per op				*/

#define PROC_ARG_NULL	((1<<PROC_ARG_BIT)-1)

#define PROC_fd_dup	0x4
#define PROC_FD_CHILD	0x1
#define PROC_FD_PARENT	0x2

#define PROC_sig_dfl	0x8
#define PROC_sig_ign	0x9

#define PROC_sys_pgrp	0xa
#define PROC_sys_umask	0xb

#define PROC_op1(o,a)	(((o)<<(2*PROC_ARG_BIT))|((a)&((PROC_ARG_NULL<<PROC_ARG_BIT)|PROC_ARG_NULL)))
#define PROC_op2(o,a,b)	(((o)<<(2*PROC_ARG_BIT))|(((b)&PROC_ARG_NULL)<<PROC_ARG_BIT)|((a)&PROC_ARG_NULL))

#define PROC_FD_CLOSE(p,f)	PROC_op2(PROC_fd_dup|(f),p,PROC_ARG_NULL)
#define PROC_FD_DUP(p,c,f)	PROC_op2(PROC_fd_dup|(f),p,c)
#define PROC_SIG_DFL(s)		PROC_op1(PROC_sig_dfl,s,0)
#define PROC_SIG_IGN(s)		PROC_op1(PROC_sig_ign,s,0)
#define PROC_SYS_PGRP(g)	PROC_op1(PROC_sys_pgrp,g)
#define PROC_SYS_UMASK(m)	PROC_op1(PROC_sys_umask,m,0)

#define PROC_OP(x)	(((x)>>(2*PROC_ARG_BIT))&((1<<PROC_OP_BIT)-1))
#define PROC_ARG(x,n)	((n)?(((x)>>(((n)-1)*PROC_ARG_BIT))&PROC_ARG_NULL):(((x)&~((1<<(2*PROC_ARG_BIT))-1))==~((1<<(2*PROC_ARG_BIT))-1))?(-1):((x)&~((1<<(2*PROC_ARG_BIT))-1)))

typedef struct
{
	pid_t	pid;			/* process id			*/
	pid_t	pgrp;			/* process group id		*/
	int	rfd;			/* read fd if applicable	*/
	int	wfd;			/* write fd if applicable	*/

#ifdef _PROC_PRIVATE_
_PROC_PRIVATE_
#endif

} Proc_t;

extern __MANGLE__ int	procclose __PROTO__((Proc_t*));
extern __MANGLE__ int	procfree __PROTO__((Proc_t*));
extern __MANGLE__ Proc_t*	procopen __PROTO__((const char*, char**, char**, long*, long));
extern __MANGLE__ int	procrun __PROTO__((const char*, char**));

#endif
