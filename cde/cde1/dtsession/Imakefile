XCOMM $XConsortium: Imakefile /main/cde1_maint/12 1995/11/28 18:24:13 gtsang $
/*                                                                      *
 * (c) Copyright 1993, 1994 Hewlett-Packard Company                     *
 * (c) Copyright 1993, 1994 International Business Machines Corp.       *
 * (c) Copyright 1993, 1994 Sun Microsystems, Inc.                      *
 * (c) Copyright 1993, 1994 Novell, Inc.                                *
 */

DESKTOP_VERSION_STRING = DesktopVersionString


/* General case INCLUDES DEFINES LOCAL_LIBRARIES
 * Each individual architecture may have more or less of the above.
 * Use EXTRA_DEFINES and EXTRA_INCLUDES to add defines and includes
 * to an individual architecture.  There is no equivalent for
 * LOCAL_LIBRARIES.
 * USE_libraryname in LOCAL_LIBRARIES is by default empty.
 * It should be set when necessary to the real library macro name.
 */

        DEFINES = -DMESSAGE_CAT \
                  -DCDE_INSTALLATION_TOP=\"$(CDE_INSTALLATION_TOP)\" \
                  -DCDE_CONFIGURATION_TOP=\"$(CDE_CONFIGURATION_TOP)\"
       INCLUDES = -I. -I$(BMSLIBSRC)

/* DEPLIBS contains the list of library depencies for a client.
 * LOCAL_LIBRARIES contains the list of libraries on the link line.
 * Generally, the dependency form of a library has DEP as a prefix.
 * e.g. put $(XLIB) in LOCAL_LIBRARIES and $(DEPXLIB) in DEPLIBS.
 * NOTE: if DEPLIBS is not set here, it is by default null and there
 *       are no library dependencies for clients.
 *       You cannot put -Llibpath into DEPLIBS. You must put actual
 *       paths to the library.
 */
#if defined(SunArchitecture)
DEPLIBS = $(DEPDTWIDGETLIB) $(DEPDTSVCLIB) \
                  $(DEPXMLIB) $(DEPXTOOLLIB) $(DEPXLIB)
LOCAL_LIBRARIES = $(DTWIDGETLIB) $(DTSVCLIB) $(TTLIB) \
                  $(XMLIB) $(XTOOLLIB) $(USE_XHPLIB) $(XLIB)
#else
DEPLIBS = $(DEPDTHELPLIB) $(DEPDTWIDGETLIB) $(DEPDTSVCLIB) \
                  $(DEPXMLIB) $(DEPXTOOLLIB) $(DEPXLIB)
LOCAL_LIBRARIES = $(DTWIDGETLIB) $(DTSVCLIB) $(TTLIB)\
                  $(XMLIB) $(XTOOLLIB) $(USE_XHPLIB) $(XLIB)
#endif /* SunArchitecture */
SYS_LIBRARIES = -lm


#ifdef AlphaArchitecture
SYS_LIBRARIES = -lm
EXTRA_DEFINES = -DMULTIBYTE -DXLIB_ILLEGAL_ACCESS -DSIA
#endif

#ifdef HPArchitecture
EXTRA_DEFINES = -DMULTIBYTE -DUSE_HPSSEXT
USE_XHPLIB = $(XHPLIB)
#endif

#if defined(RsArchitecture)
#if AixPreCDESupport
DEFINES = $(DEFINES) -D_AIX_PRE_CDE1_0_SUPPORT
#endif
#if (OSMajorVersion == 3)
EXTRA_SRC = SmHftRing.c SmMigResources.c
EXTRA_OBJS = $(ALTDIRECTORY)SmHftRing.o $(ALTDIRECTORY)SmMigResources.o
#else
EXTRA_SRC = SmMigResources.c
EXTRA_OBJS = $(ALTDIRECTORY)SmMigResources.o
#endif
SYS_LIBRARIES = -lbsd -liconv
#endif

#if defined(RsArchitecture)
EXTRA_DEFINES = -D_ILS_MACROS -DSBSTDINC_H_NO_REDEFINE
/*
 * bsd library needed for vfork()
 * s library needed for authenticate()
 */
SYS_LIBRARIES = -lm -lbsd -ls
#endif

#if defined(SCOArchitecture)
SYS_LIBRARIES = -lcrypt -lm
#endif

#if defined(SunArchitecture)
EXTRA_SRC = OWsync.c
EXTRA_OBJS = $(ALTDIRECTORY)OWsync.o
EXTRA_DEFINES = -D${PROGRAMS} -DSUN_SDT_COLOR_OBJECT_CACHE -DUSE_X11SSEXT
#SYS_LIBRARIES = -lelf -lm -ldl -lw
SYS_LIBRARIES = -lelf -lXext -lpam
EXTRA_CCOPTIONS = -xstrconst -dalign
EXTRA_INCLUDES = -I../../binstall/include/X11/extensions

/* Following files need a "long long" for large file support.  Use -Xa */  
dtsession_res.o SmRestore.o SmConMgmt.o	:= CCOPTIONS = -Xa
#endif

#if defined(USLArchitecture)
/* not needed for archive. usl shared libs must resolve every
 * reference whether used or not.
 */
SYS_LIBRARIES = -lelf -lm -ldl $(WIDECHARSYSLIB) -lgen -liaf
PROTO_DEFINES =
DEFINES = -DCDE_INSTALLATION_TOP=\"$(CDE_INSTALLATION_TOP)\" \
          -DCDE_CONFIGURATION_TOP=\"$(CDE_CONFIGURATION_TOP)\"
#endif

#if defined(UXPArchitecture)
/* not needed for archive. usl shared libs must resolve every
 * reference whether used or not.
 */
SYS_LIBRARIES = -lelf -lm -ldl $(WIDECHARSYSLIB) -lgen
#endif

PROGRAMS=dtsession dtsession_res

/**** Every .o except version.o may only be built in a remote
 **** directory as we do with rgy -> $(ALTDIRECTORY)
 ****/
OBJS1=   $(ALTDIRECTORY)SmMain.o \
	$(ALTDIRECTORY)SmGlobals.o \
        $(ALTDIRECTORY)SmHelp.o \
	$(ALTDIRECTORY)SmCommun.o \
	$(ALTDIRECTORY)SmError.o \
	$(ALTDIRECTORY)SmProperty.o \
	$(ALTDIRECTORY)SmProtocol.o \
	$(ALTDIRECTORY)SmSave.o \
	$(ALTDIRECTORY)SmScreen.o \
	$(ALTDIRECTORY)SmRestore.o \
	$(ALTDIRECTORY)SmUI.o \
	$(ALTDIRECTORY)SmWindow.o \
	$(ALTDIRECTORY)SmLock.o \
	$(ALTDIRECTORY)SrvPalette.o\
	$(ALTDIRECTORY)SrvFile_io.o\
	$(ALTDIRECTORY)SmStrDefs.o \
	$(ALTDIRECTORY)SmConMgmt.o \
	$(EXTRA_OBJS) \
	version.o

SRCS1=	SmMain.c \
	SmHelp.c \
	SmGlobals.c \
	SmCommun.c \
	SmError.c \
        SmProperty.c \
        SmProtocol.c \
        SmSave.c \
        SmScreen.c \
        SmRestore.c \
        SmUI.c \
        SmWindow.c \
	SmLock.c \
	SrvPalette.c\
	SrvFile_io.c\
	SmStrDefs.c \
	SmConMgmt.c \
	$(EXTRA_SRC) \
	version.c

OBJS2= dtsession_res.o
SRCS2= dtsession_res.c


all::

/**************************************************************************
 *
 *  Extra things for the Passwd Etc. version
 *
 **************************************************************************/

#ifdef USE_RGY
      EXTRA_DEFINES = -DMULTIBYTE -DUSE_HPSSEXT -D__PASSWD_ETC +e
    EXTRA_LIBRARIES = $(RGYLIB) $(NCKLIB) -lndbm -lBSD
#endif


/******* RGY or KRB CASE *******************************/
#if (defined(USE_KRB) || defined(USE_RGY)) && defined(HPArchitecture)
/*******************************************************/
ALTDIRECTORY = $(CDESRC)/dtsession/
SRCS=    version.c

includes::
        @echo " linking $(ALTDIRECTORY)version.c to version.c";\
        ln -f -s $(ALTDIRECTORY)version.c .
version.o: version.c
        ObjectCompile($(_NOOP_))

/* don't build other .o's */
.c.o:
ComplexProgramTarget($(PROGRAMS))

/******* NORMAL NON-RGY CASE *******************************/
#else
/***************************************************/
NormalLibraryObjectRule()
ComplexProgramTarget_1(dtsession,$(LOCAL_LIBRARIES),/**/)
ComplexProgramTarget_2(dtsession_res,$(LOCAL_LIBRARIES),/**/)

LOCAL_CPP_DEFINES = -DCDE_CONFIGURATION_TOP=$(CDE_CONFIGURATION_TOP) \
                    -DCDE_INSTALLATION_TOP=$(CDE_INSTALLATION_TOP) \
                    -DBINDIR=$(BINDIR)

CppText2Rule(Dtsession,Dtsession.src,$(LOCAL_CPP_DEFINES),)
CppText2Rule(sys.session,sys.session.src,$(LOCAL_CPP_DEFINES),)
CppText2Rule(sys.session.ive,sys.session.src,-DIVE $(LOCAL_CPP_DEFINES),)
CppText2Rule(sys.resources,sys.resources.src,$(LOCAL_CPP_DEFINES),)
CppText2Rule(sys.resources.ive,sys.resources.src,-DIVE $(LOCAL_CPP_DEFINES),)
/* CppText2Rule(dtloadresources,dtloadresources.src,$(LOCAL_CPP_DEFINES),) */
CppTextRule(sys.font,sys.font.src,$(LOCAL_CPP_DEFINES),)
CppTextRule(dtsession.msg,dtsession.msg.src,$(LOCAL_CPP_DEFINES),)

/***** For dtge make a client_OBJS.o using client_main.o ******/
/***** This implies the existence of client_main.c       ******/
/***** dtge hidden symbols *******/
#ifdef BuildHugeObject
#ifdef HPArchitecture
#ifdef __hp9000s300
HIDDEN_SYMBOLS = -h _main -h __DtWmStringsAreEqual \
	-h _ShowWaitState -h _InitCursorInfo -h _InitNlsStrings  \
	-h _PrintError -h __DtNextToken -h __DtWmStringsAreEqual -h _CreateLockCursor
#else
HIDDEN_SYMBOLS = -h main -h _DtWmStringsAreEqual \
    -h ShowWaitState -h InitCursorInfo -h InitNlsStrings  \
	-h PrintError -h _DtNextToken -h _DtWmStringsAreEqual -h CreateLockCursor
#endif
#endif
SpecialRelocatableTarget(dtsession,$(HIDDEN_SYMBOLS),$(OBJS))
#endif
#endif /* KRB || RGY */

/* These headers are for using installed build. dthello uses these files
*/
HEADERS = Srv.h SrvFile_io.h SrvPalette.h 
BuildMultipleInstall($(HEADERS),include/Misc)
