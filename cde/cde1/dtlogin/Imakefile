XCOMM $XConsortium: Imakefile /main/cde1_maint/11 1995/12/18 13:06:49 mgreess $
/*                                                                      *
 * (c) Copyright 1993, 1994 Hewlett-Packard Company                     *
 * (c) Copyright 1993, 1994 International Business Machines Corp.       *
 * (c) Copyright 1993, 1994 Sun Microsystems, Inc.                      *
 * (c) Copyright 1993, 1994 Novell, Inc.                                *
 */
DESKTOP_VERSION_STRING = DesktopVersionString

MODULE=dtlogin

/*******************************
#ifdef BandAidCompiler
#include BandAidCompiler
#endif
*******************************/

#if InstallXdmConfig 
#define IHaveSubdirs
   XDMCONFIGDIR = XdmConfigurationSubdirectory
         SUBDIRS= $(XDMCONFIGDIR) bootxutil
#define PassCDebugFlags 'CDEBUGFLAGS=$(CDEBUGFLAGS)'
#endif


/* please list any new dtlogin headers for use by krb and rgy */
HEADERS = \
dm.h vg.h vglogo.h vgmsg.h vgproto.h

#if defined (USLArchitecture) || defined(UXPArchitecture)
IAFLIB = -liaf
#else
IAFLIB =
#endif

#if HasXdmAuth
DESDEFS = -DHASDES -DHASXDMAUTH -DSILLYEXPORTRULE
DESOBJS = xdmauthR6.o
DESSRCS = xdmauthR6.c
#else
#if HasDESLibrary
DESDEFS = -DHASDES
DESOBJS = xdmauth.o
DESSRCS = xdmauth.c
#else
DESDEFS = 
DESOBJS =
DESSRCS = 
#endif
#endif

#ifdef UsePamLibrary
PAM_SRCS = pam_svc.c
PAM_OBJS = pam_svc.o
PAM_LIB = -lpam
#else
PAM_SRCS =
PAM_OBJS =
PAM_LIB =
#endif

#ifdef SunArchitecture 
SOLARIS_SRCS = solaris.c
SOLARIS_OBJS = solaris.o
#else
SOLARIS_SRCS =
SOLARIS_OBJS =
#endif

#if defined(SunArchitecture)
PAM_LIB = -lauth
#endif

         XDMDIR = $(CDE_LOGFILES_TOP)

/******************  DTLOGIN ARCHIVE SECTION *****************
   A better long-term solution is a dtgreet subdirectory since dtgreet
   is built with shared libraries.
   dtlogin is always built archived in HP because of 
   its importance for user startup. DEPLIBS needs to be explicitly set
   because default is null DEPLIBS for shared libraries.
   Does this need to be ifdef'd hp? */
/* Defaults */
LOGINDEPXMULIB = $(DEPXMULIB)
LOGINXMULIB = $(XMULIB)
LOGINDEPXLIB = $(DEPXLIB)
LOGINXLIB = $(XLIB)

#ifdef HPArchitecture
#  if (! defined(UseInstalled)) && (! defined(UseMitLibrariesFromSystemOnly))
#    ifdef SHLIB
LOGINDEPXMULIB = $(XMUSRC)/libXmu.a
LOGINXMULIB = $(LOGINDEPXMULIB)
LOGINDEPXLIB = $(XLIBSRC)/libX11.a
LOGINXLIB = $(LOGINDEPXLIB)
/* This is really a kludge !! */
LOGINLDOPTIONS = -Wl,-a archive
#    endif
#  endif
#  if OSMajorVersion >= 10
SYS_LIBRARIES = -lsec
#  endif
#endif

#if defined(SunArchitecture)
/* note: libcmd.a is a Sun static private lib for login related work. 
 *       It should come before $(PAM_LIB) in link line, at least when compiled
 * 	 on Solaris 2.4 and run on Solaris 2.5.  In Solaris 2.4 some of 
 *       libcmd.a functions are also in libauth.so.  But on Solaris 2.5 
 *       these Sun private functions have been removed from libauth.so. */
SYS_LIBRARIES = -lresolv -ldl -lbsm -lcmd $(PAM_LIB) -lsocket -lnsl

#  ifdef UsePamLibrary
   EXTRA_DEFINES = -DPAM -DSUNAUTH
#  else
   EXTRA_DEFINES = -DSUNAUTH
#  endif

/* Following files need a "long long" for large file system support. Use -Xa */
error.o cryptokey.o dm.o := CCOPTIONS = -Xa
#endif

#if defined(USLArchitecture)
SYS_LIBRARIES = -lm -ldl $(WIDECHARSYSLIB) -lgen -lresolv
#endif

#if defined(UXPArchitecture)
SYS_LIBRARIES = -lm -ldl $(WIDECHARSYSLIB) -lgen -lresolv
#endif

#if defined(RsArchitecture)
SYS_LIBRARIES = -ls
#endif

#ifdef AlphaArchitecture
SYS_LIBRARIES = -lm -lXdmcp
#endif

/**************************************************************************
 *
 *  Source and object modules
 *
 *    SRCS1 = Dtlogin sources
 *    OBJS1 = Dtlogin objects
 *
 *    SRCS2 = Dtgreet sources
 *    OBJS2 = Dtgreet objects
 *
 *    SRCS3 = Dtchooser sources
 *    OBJS3 - Dtchooser objects
 *
 **************************************************************************/

#ifdef AlphaArchitecture
          SRCS1 = access.c account.c authR6.c genauth.c daemon.c dm.c \
                  dpylist.c error.c file.c mitauthR6.c protodpy.c policy.c \
                  reset.c resource.c server.c session.c socketR6.c util.c \
                  verify.c version.c apollo.c sysauth.c fontpath.c $(DESSRCS) \
		  qualify.c usl_ptty.c choose.c netaddrR6.c xdmcp.c
          OBJS1 = access.o account.o authR6.o genauth.o daemon.o dm.o \
                  dpylist.o error.o file.o mitauthR6.o protodpy.o policy.o \
                  reset.o resource.o server.o session.o socketR6.o util.o \
                  verify.o version.o apollo.o sysauth.o fontpath.o $(DESOBJS) \
		  qualify.o usl_ptty.o choose.o netaddrR6.o xdmcp.o
#else
          SRCS1 = access.c account.c auth.c cryptokey.c daemon.c dm.c \
                  dpylist.c error.c file.c mitauth.c protodpy.c policy.c \
                  reset.c resource.c server.c session.c socket.c util.c \
                  verify.c version.c apollo.c sysauth.c fontpath.c \
		  $(DESSRCS) qualify.c usl_ptty.c choose.c netaddr.c \
		  $(PAM_SRCS) $(SOLARIS_SRCS) 
          OBJS1 = access.o account.o auth.o cryptokey.o daemon.o dm.o \
                  dpylist.o error.o file.o mitauth.o protodpy.o policy.o \
                  reset.o resource.o server.o session.o socket.o util.o \
                  verify.o version.o apollo.o sysauth.o fontpath.o \
		  $(DESOBJS) qualify.o usl_ptty.o choose.o netaddr.o \
		  $(PAM_OBJS) $(SOLARIS_OBJS)
#endif

#ifdef AlphaArchitecture
          SRCS2 = vgcallback.c vglogo.c vgmain.c vgutil.c \
                  vgversion.c vgapollo.c vglang.c vgsiaform.c
          OBJS2 = vgcallback.o vglogo.o vgmain.o vgutil.o \
                  vgversion.o vgapollo.o vglang.o vgsiaform.o
#else
          SRCS2 = vgcallback.c vglogo.c vgmain.c vgutil.c \
                  vgversion.c vgapollo.c vglang.c
          OBJS2 = vgcallback.o vglogo.o vgmain.o vgutil.o \
                  vgversion.o vgapollo.o vglang.o
#endif

          SRCS3 = chooser.c dtchooser.c vglogo.c vgutil.c \
		  vgcallback.c vglang.c
          OBJS3 = chooser.o dtchooser.o vglogo.o vgutil.o \
		  vgcallback.o vglang.o

       PROGRAMS = dtlogin dtgreet dtchooser


/**************************************************************************
 *
 *  Defines
 *
 **************************************************************************/

        SIGDEFS = $(SIGNAL_DEFINES)

 OSMAJORVERSION = OSMajorVersion
 OSMINORVERSION = OSMinorVersion
     DTDEFINES = -DBINDIR=\"$(BINDIR)\" -DXDMDIR=\"$(XDMDIR)\" $(SIGDEFS) \
                  $(DESDEFS) ConnectionFlags \
                  -DOSMAJORVERSION=$(OSMAJORVERSION) \
                  -DOSMINORVERSION=$(OSMINORVERSION) \
                  -DCDE_INSTALLATION_TOP=\"$(CDE_INSTALLATION_TOP)\" \
                  -DCDE_CONFIGURATION_TOP=\"$(CDE_CONFIGURATION_TOP)\"

#if defined (HPArchitecture)
        DEFINES = $(DTDEFINES)  -DAUDIT  -DBYPASSLOGIN NetDefines
#else
#if defined (RsArchitecture)
        DEFINES = $(DTDEFINES) -D_NO_PROTO -D_ILS_MACROS
        DEFINES = $(DTDEFINES) -D_ILS_MACROS -DBSD44SOCKETS -D__NetBSD__
#else
#if defined (AlphaArchitecture)
        DEFINES = $(DTDEFINES) -DXDMCP -DSIA
#else
        DEFINES = $(DTDEFINES)
#endif
#endif
#endif

/**/#
/**/# Special definitions for compiling default resources; these parameters
/**/# should be set in util/imake.includes/site.def or the appropriate .macros
/**/# file in that directory.  The lack of initial spaces is to prevent imake
/**/# from accidently turning the lines into rules by putting a leading tab.
/**/#
/**/# Do NOT change these lines!
/**/#
DEF_SERVER = $(BINDIR)/X
DEF_USER_PATH = DefaultUserPath         /* no leading spaces or imake will */
DEF_SYSTEM_PATH = DefaultSystemPath     /* indent as rule */
BOURNE_SHELL = DefaultSystemShell
CPP_PROGRAM = CppCmd
DEF_BM_PATH = /etc/dt/appconfig/icons/%L/%B%M.bm:/etc/dt/appconfig/icons/%L/%B%M.pm:/etc/dt/appconfig/icons/%L/%B:/etc/dt/appconfig/icons/C/%B%M.bm:/etc/dt/appconfig/icons/C/%B%M.pm:/etc/dt/appconfig/icons/C/%B:/usr/dt/appconfig/icons/%L/%B%M.bm:/usr/dt/appconfig/icons/%L/%B%M.pm:/usr/dt/appconfig/icons/%L/%B:/usr/dt/appconfig/icons/C/%B%M.bm:/usr/dt/appconfig/icons/C/%B%M.pm:/usr/dt/appconfig/icons/C/%B
DEF_PM_PATH=/etc/dt/appconfig/icons/%L/%B%M.pm:/etc/dt/appconfig/icons/%L/%B%M.bm:/etc/dt/appconfig/icons/%L/%B:/etc/dt/appconfig/icons/C/%B%M.pm:/etc/dt/appconfig/icons/C/%B%M.bm:/etc/dt/appconfig/icons/C/%B:/usr/dt/appconfig/icons/%L/%B%M.pm:/usr/dt/appconfig/icons/%L/%B%M.bm:/usr/dt/appconfig/icons/%L/%B:/usr/dt/appconfig/icons/C/%B%M.pm:/usr/dt/appconfig/icons/C/%B%M.bm:/usr/dt/appconfig/icons/C/%B

RES_DEFINES = '-DDEF_SERVER_LINE=":0 Local local $(DEF_SERVER) :0"' \
                  '-DXRDB_PROGRAM="$(BINDIR)/xrdb"' \
                  '-DDEF_USER_PATH="$(DEF_USER_PATH)"' \
                  '-DDEF_SYSTEM_PATH="$(DEF_SYSTEM_PATH)"' \
                  '-DDEF_FAILSAFE_CLIENT="$(BINDIR)/xterm"' \
                  '-DDEF_AUTH_FILE="$(XDMDIR)/auth-server"' \
                  '-DDEF_AUTH_DIR="$(XDMDIR)"' \
                  '-DDEF_USER_AUTH_DIR="$(XDMDIR)/tmp"' \
                  '-DCPP_PROGRAM="$(CPP_PROGRAM)"' \
		  '-DDEF_PM_SEARCH_PATH="$(DEF_PM_PATH)"' \
                  '-DDEF_BM_SEARCH_PATH="$(DEF_BM_PATH)"'

/**/#
/**/# These -D flags had to be taken out of the RES_DEFINES macro in order
/**/# to get around a buffer limitation in the Sun C compiler code generation
/**/# phase.  The code generation phase creates a temporary assembler file
/**/# containing the command line to the compiler and all the .ident pragmas.
/**/# With resent changes to the Imakefile, the command line had gotten so
/**/# long that it exceeded an internal buffer length resulting in errors in
/**/# the generated assembler code.  The EXTRA_RES_DEFINES were extracted
/**/# from the RES_DEFINES macro in order to shorten the command line on
/**/# the Sun platform.  These particular -D flags were chosen as the
/**/# least likely to change or be system dependent.
/**/#
#ifdef SunArchitecture 
EXTRA_RES_DEFINES =
#else
EXTRA_RES_DEFINES = \
                  '-DDEF_SESSION="$(CDE_INSTALLATION_TOP)/bin/Xsession"' \
                  '-DDEF_SYSTEM_SHELL="$(BOURNE_SHELL)"' \
                  '-DDEF_CHOOSER="$(CDE_INSTALLATION_TOP)/bin/dtchooser"' \
                  '-DDEF_XDM_CONFIG="Xconfig"'
#endif



/**************************************************************************
 *
 *  Includes
 *
 **************************************************************************/

    INCLUDES= -I.



/**************************************************************************
 *
 *  Libraries
 *
 *    BASE_LIBS1 = Dtlogin base libraries
 *    BASE_LIBS2 = Dtgreet base libraries
 *
 **************************************************************************/


    DEPLIBS1 = $(DEPXAUTHLIB) $(DEPXDMCPLIB) $(LOGINDEPXMULIB) \
	       $(LOGINDEPXLIB) $(DEPDTSVCLIB)
    DEPLIBS2  = $(DEPDTWIDGETLIB) $(DEPDTSVCLIB) $(DEPXMLIB)  \
	        $(DEPXTOOLLIB) $(DEPXLIB)
    DEPLIBS3 = $(DEPXDMCPLIB) $(DEPXMLIB) $(DEPXTOOLLIB) $(DEPXLIB)

    BASE_LIBS1  = $(XAUTHLIB) $(LOGINXMULIB) $(XDMCPLIB) $(LOGINXLIB) \
		  $(DTSVCLIB)
    BASE_LIBS2  = $(DTWIDGETLIB) $(DTSVCLIB) $(XDMCPLIB) $(XMLIB) \
		  $(XTOOLLIB) $(XLIB)
    BASE_LIBS3  = $(DTWIDGETLIB) $(DTSVCLIB) $(XDMCPLIB) $(XMLIB) \
		  $(XTOOLLIB) $(XLIB)

    LOCAL_LIBRARIES1 = $(BASE_LIBS1) $(IAFLIB)
    LOCAL_LIBRARIES2 = $(BASE_LIBS2)
    LOCAL_LIBRARIES3 = $(BASE_LIBS3)


/* usl needs to resolve all Xt symbols invoked by Xmu at shared
 * library link time.
 * Likewise for the BMS references from libDt for vuegreet.
 */
#if defined(USLArchitecture)
#if HasSharedLibraries
    BASE_LIBS1  = $(XAUTHLIB) $(LOGINXMULIB) $(XDMCPLIB) $(XTOOLLIB) \
		  $(LOGINXLIB)
    BASE_LIBS2  = $(DTWIDGETLIB) $(DTSVCLIB) $(XDMCPLIB) \
		  $(XMLIB) $(XTOOLLIB) $(XLIB)
#endif
#endif

#if defined(UXPArchitecture)
#if HasSharedLibraries
    BASE_LIBS1  = $(XAUTHLIB) $(LOGINXMULIB) $(XDMCPLIB) $(XTOOLLIB) \
		  $(LOGINXLIB)
    BASE_LIBS2  = $(DTWIDGETLIB) $(DTSVCLIB) \
		  $(XMLIB) $(XTOOLLIB) $(XLIB)
#endif
#endif



/**************************************************************************
 *
 *  Extra things for the HP-UX BLS version
 *
 **************************************************************************/

#ifndef BLS
#ifdef HPArchitecture
#  if (OSMajorVersion == 8) && (OSMinorVersion == 8)
#    define BLS
#  endif
#endif
#endif

#ifdef BLS

#  define IHaveSubdirs
#  define PassCDebugFlags 'CDEBUGFLAGS=$(CDEBUGFLAGS)'

          SUBDIRS = bls

   MakeSubdirs($(SUBDIRS))
   DependSubdirs($(SUBDIRS))


         BLSLIBSRC = ./bls

    EXTRA_DEFINES = -UAUDIT -D_NO_PROTO

     EXTRA_CFLAGS = -Wp,-H256000

  EXTRA_LIBRARIES = $(BLSLIBSRC)/libbls.a -lsec

  STD_CPP_DEFINES = -DSYSV  -DBLS

#endif



/**************************************************************************
 *
 *  Extra things for the Kerberos/AFS version (dtlogin.krb)
 *
 **************************************************************************/

#ifdef USE_KRB

#  define IHaveSubdirs
#  define PassCDebugFlags 'CDEBUGFLAGS=$(CDEBUGFLAGS)'

        SUBDIRS = afs

   MakeSubdirs($(SUBDIRS))
   DependSubdirs($(SUBDIRS))


      KRBLIBSRC = $(LIBSRC)/krb
      DEPKRBLIB = $(KRBLIBSRC)/libkrb.a
         KRBLIB = $(DEPKRBLIB)

      DESLIBSRC = $(LIBSRC)/des
      DEPDESLIB = $(DESLIBSRC)/libdes.a
         DESLIB = $(DEPDESLIB)

  KRBINCLUDESRC = $(KRBLIBSRC)/include

      AFSLIBSRC = ./afs

  AFSINCLUDESRC = $(AFSLIBSRC)

 EXTRA_INCLUDES = -I$(KRBINCLUDESRC) -I$(AFSINCLUDESRC)

  EXTRA_DEFINES = -D__KERBEROS -D__AFS


LOCAL_LIBRARIES1 = $(BASE_LIBS1)  \
                   $(KRBLIB) \
		   $(IAFLIB) \
                   $(AFSLIBSRC)/libafsutil.a \
                   $(AFSLIBSRC)/$(VENDOR)/$(HARDWARE)/libdes.a

LOCAL_LIBRARIES2 = $(BASE_LIBS2) \
                   $(KRBLIB) \
                   $(AFSLIBSRC)/$(VENDOR)/$(HARDWARE)/libkauth.a \
                   $(AFSLIBSRC)/$(VENDOR)/$(HARDWARE)/libprot.a \
                   $(AFSLIBSRC)/$(VENDOR)/$(HARDWARE)/libubik.a \
                   $(AFSLIBSRC)/$(VENDOR)/$(HARDWARE)/libauth.a \
                   $(AFSLIBSRC)/$(VENDOR)/$(HARDWARE)/librxkad.a \
                   $(AFSLIBSRC)/$(VENDOR)/$(HARDWARE)/libsys.a \
                   $(AFSLIBSRC)/$(VENDOR)/$(HARDWARE)/libdes.a \
                   $(AFSLIBSRC)/$(VENDOR)/$(HARDWARE)/librx.a \
                   $(AFSLIBSRC)/$(VENDOR)/$(HARDWARE)/liblwp.a \
                   $(AFSLIBSRC)/$(VENDOR)/$(HARDWARE)/libcom_err.a \
                   $(AFSLIBSRC)/libafsutil.a \
                   -lBSD

#endif



/**************************************************************************
 *
 *  Extra things for the Passwd Etc. version (dtlogin.rgy)
 *
 **************************************************************************/

#ifdef USE_RGY
     EXTRA_INCLUDES = -I$(RGYINCLUDESRC)

      EXTRA_DEFINES = -D__PASSWD_ETC +e

    EXTRA_LIBRARIES = $(RGYLIB) $(NCKLIB) -lndbm -lBSD
#endif



/**************************************************************************
 *
 *  Extra things for Dtge 
 *
 *    HIDDEN_SYMBOLS1 = Dtlogin hidden symbols
 *    HIDDEN_SYMBOLS2 = Dtgreet hidden symbols
 *
 **************************************************************************/

#ifdef HPArchitecture
#  ifdef __hp9000s300

      HIDDEN_SYMBOLS1 = -h _main -h _BecomeDaemon -h _GetHourGlass \
                        -h _Verify
      HIDDEN_SYMBOLS2 = -h _main -h _LogError  -h _PingServer

#  else

      HIDDEN_SYMBOLS1 = -h main -h BecomeDaemon -h GetHourGlass \
                        -h Verify 
      HIDDEN_SYMBOLS2 = -h main -h LogError  -h PingServer

#  endif
#endif



/**************************************************************************
 *
 *  Rules
 *
 **************************************************************************/
all::
#if defined(USE_KRB) || defined(USE_RGY)
includes::
	@for i in $(SRCS1) $(SRCS2) $(HEADERS);do \
	$(RM) $$i; \
	echo "linking $(DTLOGINSRC)/$$i to $$i";\
	ln -f -s $(DTLOGINSRC)/$$i .; \
	done
#endif




NormalLibraryObjectRule()

ComplexProgramTarget_1(dtlogin,$(LOCAL_LIBRARIES1), $(LOGINLDOPTIONS))
ComplexProgramTarget_2(dtgreet,$(LOCAL_LIBRARIES2), /**/)
ComplexProgramTarget_3(dtchooser,$(LOCAL_LIBRARIES3), /**/)

#ifdef __ppc
/* Problem with "-O" in dtgreet ... wrong size login widget. */
/* Override "-O" (xO2) with "-xO1". */
vgutil.o:
	$(RM) $@
	$(CC) -c $(CFLAGS) -xO1 $(_NOOP_) $*.c
#endif

SpecialObjectRule(resource.o, $(ICONFIGFILES), $(EXTRA_RES_DEFINES) $(RES_DEFINES) $(CCINLIBS))
#ifdef HPArchitecture
#ifndef DEBUGTREE
SpecialObjectRule(session.o,,+O1 $(CCINLIBS))
#endif
#endif

#if !defined(USE_KRB) && !defined(USE_RGY)

LOCAL_CPP_DEFINES = -DCDE_CONFIGURATION_TOP=$(CDE_CONFIGURATION_TOP) \
                    -DCDE_INSTALLATION_TOP=$(CDE_INSTALLATION_TOP) \
                    -DCDE_LOGFILES_TOP=$(CDE_LOGFILES_TOP)

#if defined(USLArchitecture)
    PREPROCESSCMD = $(CPP)
#endif

#if defined(UXPArchitecture)
    PREPROCESSCMD = $(CPP)
#endif

CppTextRule(config/0015.sun.env,config/0015.sun.env.src,$(LOCAL_CPP_DEFINES),)
CppTextRule(config/0020.dtims,config/0020.dtims.src,$(LOCAL_CPP_DEFINES),)
CppTextRule(config/Xfailsafe,config/Xfailsafe.src,$(LOCAL_CPP_DEFINES),)
CppTextRule(config/Xsession,config/Xsession.src,$(LOCAL_CPP_DEFINES) $(INCLUDES),)
CppTextRule(config/Xsession.ow,config/Xsession.ow.src,$(LOCAL_CPP_DEFINES) $(INCLUDES),)
CppTextRule(config/Xsession.ow2,config/Xsession.ow2.src,$(LOCAL_CPP_DEFINES) $(INCLUDES),)
CppTextRule(config/sessionetc,config/sessionetc.src,$(LOCAL_CPP_DEFINES) $(INCLUDES),)
CppTextRule(config/sessionexit,config/sessionexit.src,$(LOCAL_CPP_DEFINES) $(INCLUDES),)
CppTextRule(config/Xinitrc.ow,config/Xinitrc.ow.src,$(LOCAL_CPP_DEFINES) $(INCLUDES),)
CppTextRule(config/Xconfig,config/Xconfig.src,$(LOCAL_CPP_DEFINES),)
CppTextRule(config/Xpasswd,config/Xpasswd.src,$(LOCAL_CPP_DEFINES),)
CppTextRule(config/Xpasswd2,config/Xpasswd2.src,$(LOCAL_CPP_DEFINES),)
CppTextRule(config/Xservers,config/Xservers.src,$(LOCAL_CPP_DEFINES),)
CppTextRule(config/Xresources,config/Xresources.src,$(LOCAL_CPP_DEFINES),)
CppTextRule(config/Xresources.ow,config/Xresources.ow.src,$(LOCAL_CPP_DEFINES),)
CppTextRule(config/Dtlogin,config/Dtlogin.src,$(LOCAL_CPP_DEFINES),)
CppTextRule(config/Xstartup,config/Xstartup.src,$(LOCAL_CPP_DEFINES),)
CppTextRule(config/Xsetup,config/Xsetup.src,$(LOCAL_CPP_DEFINES) $(INCLUDES),)
CppTextRule(config/Xreset,config/Xreset.src,$(LOCAL_CPP_DEFINES),)
CppTextRule(config/Xaccess,config/Xaccess.src,$(LOCAL_CPP_DEFINES),)
CppTextRule(config/dtprofile,config/dtprofile.src,$(LOCAL_CPP_DEFINES),)

#if defined (HPArchitecture)
CppTextRule(config/Xservers.nc,config/Xservers.src,-D_NO_CONSOLE,)
CppTextRule(config/Xsession.ive,config/Xsession.src,-DIVE $(LOCAL_CPP_DEFINES) $(INCLUDES),)
CppTextRule(config/Xresources.ive,config/Xresources.src,-DIVE $(LOCAL_CPP_DEFINE
S),)
#endif

#ifdef AlphaArchitecture
CppTextRule(config/Xservers.nc,config/Xservers.src,-D_NO_CONSOLE $(LOCAL_CPP_DEFINES),)
CppTextRule(config/Xservers.con,config/Xservers.src,$(LOCAL_CPP_DEFINES),)
CppTextRule(config/Xconfig.nc,config/Xconfig.src,-D_NO_CONSOLE $(LOCAL_CPP_DEFINES),)
CppTextRule(config/Xconfig.con,config/Xconfig.src,$(LOCAL_CPP_DEFINES),)
#endif

#ifdef HPArchitecture
all:: nls/C/dtlogin.cat
nls/C/dtlogin.cat: dtlogin.msg
	[ -d nls/C ] || mkdir -p nls/C
	gencat $@ $?
#else
#ifdef HPOSFArchitecture
all:: nls/C/dtlogin.cat

nls/C/dtlogin.cat: dtlogin.msg
	sh -c '\[ -d nls/C ] || mkdir -p nls/C ;'
	gencat $@ $? ;
#else
#ifdef ApolloArchitecture
all:: nls/C/dtlogin.cat

nls/C/dtlogin.cat: dtlogin.msg
	/bin/sh -c '\
	[ -d nls/C ] || /sys5.3/bin/mkdir -p nls/C ;\
	if [ -f /bin/gencat ]; then \
		gencat $@ $? ;\
	else \
		$(TOP)/lib/bms/$(VENDOR)/$(MACHINE)/gencat $@ $? ;\
	fi'

#endif
#endif  /* HPOSFArchitecture */
#endif  
#endif /* USE_KRB && USE_RGY */

#if InstallXdmConfig 
MakeDirectories(install,$(XDMDIR))
MakeSubdirs($(SUBDIRS))
#endif

/*
 * Don't install; let people read the instructions about putting in the
 * abort-display() resource:
 */
#ifdef comment
InstallProgramWithFlags(xdmshell,$(BINDIR), /**/)
#endif

#if !defined(USE_KRB) && !defined(USE_RGY)
/***** For dtge make a client_OBJS.o using client_main.o ******/
/***** This implies the existence of client_main.c       ******/
#ifdef BuildHugeObject
#if defined (HPArchitecture) && ! defined (BLS)
SpecialRelocatableTarget(dtlogin,$(HIDDEN_SYMBOLS1),$(OBJS1))
SpecialRelocatableTarget(dtgreet,$(HIDDEN_SYMBOLS2),$(OBJS2))
#endif
#endif
#endif
