/*
 * Copyright (c) 1996 Sun Microsystems, Inc.
 */

// --> This is the Base Port Class.

#ifndef _SDM_PORTOBJECTS_H
#define _SDM_PORTOBJECTS_H

#pragma ident "@(#)PortObjects.hh	1.37 97/06/09 SMI"

#include <SDtMail/Sdtmail.hh>
#include <SDtMail/Vector.hh>
#include <sys/types.h>

// Forward declarations
class SdmDataPort;
class SdmMessage;
class SdmDpDataChan;
class SdmDpMessageComponent;

// This enum defines the types of callbacks that can be registered with the data port
//

typedef enum SdmDpCallbackType_t {
  DPCBTYPE_ErrorLog,			// "error" type messages generated by the data port
  DPCBTYPE_DebugLog,			// "debug" type messages generated by the data port
  DPCBTYPE_NotifyLog,			// "notify" type messages generated by the data port
  DPCBTYPE_BusyIndication,		// an indication that the data port is busy processing a command
  DPCBTYPE_LockActivity			// a lock event generated by the data port
} SdmDpCallbackType;

// This enum defines the type of events that can be returned to a callback registered
// with the data port - used in "type" field in SdmDpEvent structures. 
//

typedef enum SdmDpEventType_T {
  DPEVENT_ErrorLog,			// DPCBTYPE_ErrorLog
  DPEVENT_DebugLog,			// DPCBTYPE_DebugLog
  DPEVENT_NotifyLog,			// DPCBTYPE_NotifyLog
  DPEVENT_BusyIndication,		// DPCBTYPE_BusyIndication
  DPEVENT_SessionLockGoingAway,		// DPCBTYPE_LockActivity
  DPEVENT_SessionLockTakenAway,		// DPCBTYPE_LockActivity
  DPEVENT_WaitingForSessionLock,	// DPCBTYPE_LockActivity
  DPEVENT_NotWaitingForSessionLock,	// DPCBTYPE_LockActivity
  DPEVENT_WaitingForUpdateLock,		// DPCBTYPE_LockActivity
  DPEVENT_NotWaitingForUpdateLock,	// DPCBTYPE_LockActivity
  DPEVENT_ServerConnectionBroken,	// DPCBTYPE_LockActivity
  DPEVENT_MailboxConnectionReadOnly,// DPCBTYPE_LockActivity
  DPEVENT_MailboxChangedByOtherUser	// DPCBTYPE_LockActivity
} SdmDpEventType;

// These structures define the "events" that are passed in to the calback functions
// The 'base event' is data that is shared between all events, and all elements in the
// base event must be in all other events in the same order at the beginning.
//

typedef struct {
  SdmDpEventType	type;
} SdmDpBaseEvent;

// Event for error logging response

typedef struct {
  SdmDpEventType	type;
  SdmString*		errorMessage;	// error message being reported
} SdmDpErrorLogEvent;

// Event for debug logging response

typedef struct {
  SdmDpEventType	type;
  SdmString*		debugMessage;	// debugging message being reported
} SdmDpDebugLogEvent;

// Event for notification logging response

typedef struct {
  SdmDpEventType	type;
  SdmString*		notifyMessage;	// debugging message being reported
} SdmDpNotifyLogEvent;

// Event for busy indication response

typedef struct {
  SdmDpEventType	type;
} SdmDpBusyIndicationEvent;

// Event for lock activity

typedef struct {
  SdmDpEventType	type;
} SdmDpLockActivityEvent;

/*
 * this union is defined so libsdtmail can always use the same sized
 * data port event structure internally, to avoid memory fragmentation.
 */
typedef union _DataPortCallbackEvent {
  SdmDpBaseEvent       		sdmDpBase;
  SdmDpErrorLogEvent	  	sdmDpErrorLog;
  SdmDpDebugLogEvent	   	sdmDpDebugLog;
  SdmDpNotifyLogEvent	   	sdmDpNotifyLog;
  SdmDpBusyIndicationEvent	sdmDpBusyIndication;
  SdmDpLockActivityEvent	sdmDpLockActivity;
} SdmDpEvent;

// SdmDpCallback is a pointer to a function that is registered with the data port
// and is called when an appropriate event occurs
//

typedef void (*SdmDpCallback)(void* userdata, SdmDpCallbackType type, SdmDpEvent* response);

// SdpDpGroupPrivilegeActionCallback is a poitner to a function that is registered
// with the data port machinery and is called when group privileges are to be
// enabled or disabled

typedef void (*SdmDpGroupPrivilegeActionCallback)(void* userData, SdmBoolean enableFlag);

// This enum defines the type used in the various GetContents calls and allows
// the caller to specify the type of data to be retrieved
//

typedef enum SdmDpContentType_T {
  DPCTTYPE_rawfull,		// the entire message in raw format
  DPCTTYPE_rawheader,		// the entire message header in raw format
  DPCTTYPE_rawbody,		// the entire message body in raw format
  DPCTTYPE_processedcomponent	// the "final contents" of the component in question
} SdmDpContentType;


// SdmDpMessageStructure class: implements a container for describing a 
// single message component, including a handle on how to get at the
// contents of that component
//
// Note: while this may appear to be the "c-client" message structure,
// it is patterned after it, but it is not a direct copy. All parts of
// this structure are owned by the caller that requested the structure
// be filled in. All contents of the structure are destroyed when the
// structure is deleted; therefore, the caller must make private copies
// if it wants them to survive the destruction of the object.
//
class SdmDpMessageStructure;

typedef SdmPtrVector<SdmDpMessageStructure *> SdmDpMessageStructureL; // message structure vector
typedef SdmPtrVector<SdmDpMessageStructureL *> SdmDpMessageStructureLL; // vector of message structure vectors

class SdmDpMessageStructure {

public:
  SdmDpMessageStructure();
  virtual ~SdmDpMessageStructure();
  SdmDpMessageStructure& operator=(const SdmDpMessageStructure &rhs);
  SdmDpMessageStructure(const SdmDpMessageStructure &msgstr);

public:
  // These structure parts will always be present or set appropriately

  SdmMsgStrType ms_type;		// Message type: primary mime type (e.g. text, multipart)
  SdmMsgStrEncoding ms_encoding;	// Message encoding: transport encoding
  SdmString ms_subtype; 		// Message subtype: secondary mime type (e.g. plain, mixed)
  unsigned long ms_lines;		// size in lines
  unsigned long ms_bytes; 		// size in bytes 
  SdmMsgStrDisposition ms_disposition; 	// component disposition: unspecified, inline, attachment
  SdmBoolean ms_cached;                 // message data cached?
  SdmDpMessageComponent *ms_component;	// message component identifier

  // These structure parts are optional and may or may not be present
  // for a particular message; they are non-zero if available

  SdmString ms_id;			// Message identification: message/content id
  SdmString ms_description;  		// Message description: content description
  SdmDpMessageStructureL *ms_ms;	// if encapsulated message (ms_type=multipart/message), it is here
  SdmString ms_md5;			// MD5 checksum if present
  SdmString ms_attachment_name;	// attachment name (if present)
  mode_t ms_unix_mode;		// "unix mode" hint for saving to file (if non-zero)
};

// SdmDpMessageComponent class: implements a container that describes fully a 
// "message component" so that it can be used to reference any component of 
// a message that is accessible by the data port on any currently open message 
// store. Its definition here is as a base class, with each channel adapter
// adding in its own data as appropriate.
//
class SdmDpMessageComponent {

public:
  SdmDpMessageComponent() {};
  virtual ~SdmDpMessageComponent() {} ;
  virtual SdmDpMessageComponent *DeepCopy() = 0;
  virtual void Print() const = 0;
  virtual int operator==(const SdmDpMessageComponent& mcmp) const = 0;
  virtual SdmBoolean IsComponentDeleted() const { return Sdm_False; } 

private:
 // Disallow directly creating copies or a new SdmDpMessageComponent based upon an existing one
 SdmDpMessageComponent& operator=(const SdmDpMessageComponent &rhs);
 SdmDpMessageComponent(const SdmDpMessageComponent &msgcmp);
};

// The SdmDpDataChanFactory type - a function that returns a data channel object

typedef SdmDpDataChan * (*SdmDpDataChanMetaFactory)(SdmDataPort* parentDataPort);

// hack to provide a "list of channel providers"
// It is a list of channel names and functions to call which create a Data Channel object.
// Later should make a list that can be dynamically loaded, etc.

class SdmDpDataChanProvider {
public:
  SdmDpDataChanProvider(SdmDpDataChanMetaFactory A, const char *B) {
    cpl_create_channel = A;
    cpl_channel_name = B;
  };
  ~SdmDpDataChanProvider() {};
  SdmDpDataChan *DataChanFactory(SdmDataPort* parentDataPort) {
    return(cpl_create_channel(parentDataPort));
  }

private:
  SdmDpDataChanMetaFactory 	cpl_create_channel;
  SdmString   			cpl_channel_name;
};

typedef SdmPtrVector<SdmDpDataChanProvider *> SdmDpDataChanProviderL;

#endif	// _SDM_PORTOBJECTS_H
