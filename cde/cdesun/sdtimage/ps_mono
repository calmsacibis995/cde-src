ce.c:  if (prog->ce_okay && entry && attr)
ce.c:  if (!prog->ce_okay) return(NULL) ;
ce.c:       if (prog->ce_okay == -1)
ce.c:         prog->ce_okay = init_ce();
ce.c:       if (prog->ce_okay == FALSE) {
display.c:    if (current_display->depth == 1 || prog->ps_mono == True) {
display.c:	XtVaSetValues (palette->zoom_value, DtNposition, prog->def_ps_zoom, NULL);
display.c:    if ((prog->tt_sender != (char *) NULL) && 
display.c:    if ((status == DESTROY_CHECKING) && (prog->tt_started == TRUE)) {
display.c:		   DIALOG_TITLE, catgets (prog->catd, 1, 386, "Image Viewer"),
display.c:		   DIALOG_TEXT, catgets (prog->catd, 1, 1,
display.c:		   BUTTON_IDENT, 0, catgets (prog->catd, 1, 2, "Close"),
display.c:    if (prog->verbose == TRUE)
display.c:		   DIALOG_TITLE, catgets (prog->catd, 1, 387, "Image Viewer"),
display.c:		   DIALOG_TEXT, catgets (prog->catd, 1, 3,
display.c:		   BUTTON_IDENT, 0, catgets (prog->catd, 1, 4, "Close"),
display.c:	fprintf (stderr, catgets (prog->catd, 1, 5, "XIL Error: %s\n"), (*xil->error_get_string) (error));
display.c:       prog->footer_priority = 0;
display.c:     if ((prog->frame_mapped == TRUE) && (current_display == ps_display) &&
display.c:	 (current_state != (StateInfo *) NULL) && (prog->dps == TRUE) &&
display.c:       if (prog->standardin) 
display.c:         sprintf (label, "%s - %s", prog->name, catgets (prog->catd, 1, 434,
display.c:         sprintf (label, "%s - %s", prog->name, s);
display.c:      if (strcmp (s, catgets (prog->catd, 1, 388, "(None)")) == 0)
display.c:		       XmNiconName, catgets (prog->catd, 1, 6, "Image Viewer"),
display.c:	if (prog->dps == TRUE)
display.c:	if ((pg_overview != NULL) && (prog->dps == FALSE) &&
display.c:	if (strcmp (title, catgets (prog->catd, 1, 7, 
display.c:	    strcmp (title, catgets (prog->catd, 1, 8,
display.c:			 XmNtitle, catgets (prog->catd, 1, 9,
display.c:	if (strcmp (title, catgets (prog->catd, 1, 10,
display.c:			   XmNtitle, catgets (prog->catd, 1, 11,
display.c:			   XmNtitle, catgets (prog->catd, 1, 12,
display.c:            if (prog->verbose)
display.c:			catgets (prog->catd, 1, 13, 
display.c:       sprintf (right, catgets (prog->catd, 1, 14, "Page: %d of %d"), 
display.c:       sprintf (right, catgets (prog->catd, 1, 15, "Page: %d of %d"), 
dither.c:      if (prog->verbose)
dither.c:	fprintf (stderr, catgets (prog->catd, 1, 16,
dither.c:		 prog->name, depth);
dither.c:	    if (prog->verbose) {
dither.c:		fprintf (stderr, catgets (prog->catd, 1, 17,
dither.c:		    prog->name, depth);
dither.c:	    if (prog->verbose) {
dither.c:		   catgets (prog->catd, 1, 18,
dither.c:		   prog->name);
dither.c:	if (prog->verbose)
dither.c:		   catgets (prog->catd, 1, 19, 
dither.c:		   prog->name, depth);
dither.c:	if (prog->verbose)
dither.c:		   catgets (prog->catd, 1, 20, 
dither.c:		   prog->name);
dither.c:	if (prog->verbose) {
dither.c:		catgets (prog->catd, 1, 21,
dither.c:		prog->name);
dither.c:	if (prog->verbose) {
dither.c:		catgets (prog->catd, 1, 22,
dither.c:		prog->name);
dither.c:      if (prog->verbose)
dither.c:		 catgets (prog->catd, 1, 23, 
dither.c:		 prog->name, depth);
dragdrop.c:		    DIALOG_TITLE, catgets (prog->catd, 1, 389, "Image Viewer - Drag and Drop"),
dragdrop.c:		    DIALOG_TEXT, catgets (prog->catd, 1, 24,
dragdrop.c:		    BUTTON_IDENT, 0, catgets (prog->catd, 1, 25, "Continue"),
dragdrop.c:		    DIALOG_TITLE, catgets (prog->catd, 1, 390, "Image Viewer - Drag and Drop"),
dragdrop.c:		    DIALOG_TEXT, catgets (prog->catd, 1, 26,
dragdrop.c:		    BUTTON_IDENT, 0, catgets (prog->catd, 1, 27, "Continue"),
dragdrop.c:		    DIALOG_TITLE, catgets (prog->catd, 1, 391, "Image Viewer - Drag and Drop"),
dragdrop.c:		    DIALOG_TEXT, catgets (prog->catd, 1, 28,
dragdrop.c:		    BUTTON_IDENT, 0, catgets (prog->catd, 1, 29, "Continue"),
dragdrop.c:       strcpy (current_filename, catgets (prog->catd, 1, 30, "(Untitled)"));
dragdrop.c:     make_tmpfile (&(prog->datafile), current_filename);
dragdrop.c:     dnd_file = fopen (prog->datafile, "w");
dragdrop.c:		    DIALOG_TITLE, catgets (prog->catd, 1, 392, "Image Viewer - Drag and Drop"),
dragdrop.c:		    DIALOG_TEXT, catgets (prog->catd, 1, 31,
dragdrop.c:		    BUTTON_IDENT, 0, catgets (prog->catd, 1, 32, "Continue"),
dragdrop.c:		    DIALOG_TITLE, catgets (prog->catd, 1, 393, "Image Viewer - Drag and Drop"),
dragdrop.c:		    DIALOG_TEXT, catgets (prog->catd, 1, 33,
dragdrop.c:		    BUTTON_IDENT, 0, catgets (prog->catd, 1, 34, "Continue"),
dragdrop.c:     status = open_newfile (current_filename, prog->datafile, -1, NULL, 0);
dragdrop.c:	 drag_name = malloc (strlen (catgets (prog->catd, 1, 35, "(Untitled)")) + 1);
fileui.c:	       catgets (prog->catd, 1, 36, "Image Viewer - Open")); ac++;
fileui.c:				prog->directory, strlen (prog->directory) + 1,
fileui.c:	       catgets (prog->catd, 1, 37, "Image Viewer - Open As")); ac++;
fileui.c:				prog->directory, strlen (prog->directory) + 1,
fileui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 38,
fileui.c:	       catgets (prog->catd, 1, 39, "Image Viewer - Save")); ac++;
fileui.c:				prog->directory, strlen (prog->directory) + 1,
fileui.c:               catgets (prog->catd, 1, 40, "Image Viewer - Save As")); ac++;
fileui.c:				   prog->directory, strlen (prog->directory) + 1,
fileui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 41,
fileui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 42,
fileui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 43, "None"));
fileui.c:     xmstrings[1] = XmStringCreateLocalized (catgets (prog->catd, 1, 44, "Unix"));
fileui.c:     xmstrings[2] = XmStringCreateLocalized (catgets (prog->catd, 1, 45, "Encoded"));
fileui.c:     xmstrings[3] = XmStringCreateLocalized (catgets (prog->catd, 1, 46, "LZW"));
fileui.c:     xmstrings[4] = XmStringCreateLocalized (catgets (prog->catd, 1, 47, "JPEG"));
fileui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 48,
fileui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 49, "B&W"));
fileui.c:     xmstrings[1] = XmStringCreateLocalized (catgets (prog->catd, 1, 50, "256"));
fileui.c:     xmstrings[2] = XmStringCreateLocalized (catgets (prog->catd, 1, 51, "Millions"));
gif.c:  gifin_fatal( catgets (prog->catd, 1, 52,                  \
gif.c:    gifin_fatal(catgets (prog->catd, 1, 53,
gif.c:  strcpy (gif_err_str, catgets (prog->catd, 1, 54,
gif.c:                                  catgets (prog->catd, 1, 55,
gif.c:                              catgets (prog->catd, 1, 56, "%s: Short read within image data\n"), 
gifcompr.c:        if (prog->verbose)
gifcompr.c:	  printf( catgets (prog->catd, 1, 57, "error writing output file\n"));
gifencod.c:	        if (prog->verbose)
gifencod.c:  		  printf( catgets (prog->catd, 1, 58,
help.c:     XtSetArg (al[ac], XmNtitle, catgets (prog->catd, 1, 59, "Image Viewer Help")); ac++;
help.c:		    DIALOG_TITLE, catgets (prog->catd, 1, 60, "Image Viewer Help"),
help.c:		    DIALOG_TEXT, catgets (prog->catd, 1, 61, "You must select an item within Image Viewer."),
help.c:		    BUTTON_IDENT, 0, catgets (prog->catd, 1, 62, "Continue"),
help.c:       fprintf (stderr, catgets (prog->catd, 1, 63, 
help.c:       fprintf (stderr, catgets (prog->catd, 1, 64,
help.c:     XtSetArg(al[ac], XmNtitle, catgets (prog->catd, 1, 65, 
help.c:       xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 66, 
help.c:     sprintf (text, catgets (prog->catd, 1, 67, "Image Viewer Version %s"),
help.c:     sprintf (text, catgets (prog->catd, 1, 465, "Copyright (c) 1994 - 1997:"));
help.c:     sprintf (text, catgets (prog->catd, 1, 69, "Sun Microsystems, Inc."));
help.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 70, 
image.c:	  if (prog->verbose)
image.c:            printf (catgets (prog->catd, 1, 71, "cannot malloc memory\n"));
image.c:	  if (prog->verbose)
image.c:            printf (catgets (prog->catd, 1, 72, "cannot malloc memory\n"));
image.c:    if (prog->verbose)
image.c:      fprintf (stderr, catgets (prog->catd, 1, 73, 
image.c:	       "%s: %d depth is not supported.\n"), prog->name,
image.c:       zoom = (float) prog->def_ps_zoom / 100.0;
image.c:	    if (prog->verbose)
image.c:		fprintf (stderr, catgets (prog->catd, 1, 74, 
image.c:				 "%s: xil_create() failed.\n"), prog->name);
image.c:    if (prog->verbose)
image.c:      fprintf (stderr, catgets (prog->catd, 1, 75,
image.c:				"%s: xil_create() failed.\n"), prog->name);
image.c:    if (prog->verbose)
image.c:	       catgets (prog->catd, 1, 76, 
image.c:	       prog->name);
image.c:    if (prog->verbose)
image.c:	       catgets (prog->catd, 1, 77, 
image.c:	       prog->name);
image.c:      if (prog->verbose)
image.c:		 catgets (prog->catd, 1, 78, 
image.c:		 prog->name);
image.c:	if (prog->verbose)
image.c:	    fprintf (stderr, catgets (prog->catd, 1, 79, 
image.c:				   "%s: xil_create() failed.\n"), prog->name);
imageinfoui.c:     XtSetArg(al[ac], XmNtitle, catgets (prog->catd, 1, 80, 
imageinfoui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 81,
imageinfoui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 82,
imageinfoui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 83,
imageinfoui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 84, 
imageinfoui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 85,
imageinfoui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 86, 
imageinfoui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 87, 
imageinfoui.c:    sprintf ( s, catgets (prog->catd, 1, 88, "%.1f in / %.1f cm / %d pix"), 
imageinfoui.c:    sprintf ( s, catgets (prog->catd, 1, 89, "%.1f in / %.1f cm / %d pix"), 
imageinfoui.c:       sprintf ( s, catgets (prog->catd, 1, 90, "%d colors"), image->colors);
imageinfoui.c:       sprintf ( s, catgets (prog->catd, 1, 91, "Millions of colors"));
imageinfoui.c:       sprintf ( s, catgets (prog->catd, 1, 92, "N/A"));
imageinfoui.c:       sprintf( s, catgets (prog->catd, 1, 93, "%.1f MBytes"), 
imageinfoui.c:       sprintf( s, catgets (prog->catd, 1, 94, "%.1f KBytes"), 
imageinfoui.c:       sprintf( s, catgets (prog->catd, 1, 95, "%d Bytes"), image->file_size );
imagetool.c:    fprintf (stderr, catgets (prog->catd, 1, 96,
imagetool.c:			      prog->name, cmd_option);
imagetool.c:      prog->tt_started = TRUE;
imagetool.c:      prog->snapshot_on_start = TRUE;
imagetool.c:	       printf(catgets (prog->catd, 1, 97,
imagetool.c:    fprintf (stderr, catgets (prog->catd, 1, 394, "Usage: %s %s"), "sdtimage",
imagetool.c:	      prog->standardin++;
imagetool.c:	      prog->verbose++;
imagetool.c:	      prog->tt_started = TRUE;
imagetool.c:	      prog->snapshot_on_start = TRUE;
imagetool.c:	      prog->timeout = atoi(argv[i++]);
imagetool.c:	      fprintf (stderr, catgets (prog->catd, 1, 98,
imagetool.c:					prog->name, prog->rel, XmVERSION_STRING);
imagetool.c:	      fprintf (stderr, catgets (prog->catd, 1, 99,
imagetool.c:		       prog->name, s);
imagetool.c:	   if (prog->standardin)
imagetool.c:	     fprintf (stderr, catgets (prog->catd, 1, 435,
imagetool.c:				"%s: Ignoring `%s'\n"), prog->name, s);
imagetool.c:    if (prog->standardin) {
imagetool.c:      prog->standardinfile = (char *) mktemp ("/tmp/image.XXXXXX");
imagetool.c:      if ((fp = fopen (prog->standardinfile, "w")) == NULL) {
imagetool.c:        fprintf (stderr, catgets (prog->catd, 1, 436,
imagetool.c:                 	 prog->name, prog->standardinfile);
imagetool.c:      fp = fopen (prog->standardinfile, "r");
imagetool.c:      pathname = malloc (strlen (prog->standardinfile) + 1);
imagetool.c:      strcpy (pathname, prog->standardinfile);
imagetool.c:	  pathname = malloc (strlen (tmp_file) + strlen (prog->directory) + 2);
imagetool.c:	  sprintf (pathname,"%s/%s", prog->directory, tmp_file);
imagetool.c:   	     prog->directory = tmp_dir;
imagetool.c:    prog->catd = catopen (IMAGETOOL_CAT, NL_CAT_LOCALE);
imagetool.c:    appname = catgets (prog->catd, 1, 100, "Image Viewer");
imagetool.c:    prog->name = malloc (strlen (appname) + 1);
imagetool.c:    strcpy (prog->name, appname);
imagetool.c:    prog->directory = getcwd (NULL, MAXPATHLEN);
imagetool.c:    if (prog->directory == NULL ) {
imagetool.c:       fprintf (stderr, catgets (prog->catd, 1, 101,
imagetool.c:		prog->name);
imagetool.c:      prog->timeout = 180;
imagetool.c:    prog->sb_right = TRUE;
imagetool.c:	prog->sb_right = FALSE;
imagetool.c:       host = malloc (strlen (prog->hostname) + 1);
imagetool.c:       strcpy (host, prog->hostname);
imagetool.c:           host = malloc (strlen (prog->hostname) + 1);
imagetool.c:           strcpy (host, prog->hostname);
imagetool.c:          fprintf(stderr, catgets (prog->catd, 1, 102,
imagetool.c:		  prog->name);
imagetool.c:    prog->newsserver = malloc (strlen (tmp_server) + 1);
imagetool.c:    strcpy (prog->newsserver, tmp_server);
imagetool.c:    if (strcmp (host, prog->hostname) != 0)
imagetool.c:       prog->remote = TRUE;
imagetool.c:    if (prog->xil_opened)
imagetool.c:    catclose (prog->catd);
imagetool.c:    if (prog->datafile != (char *) NULL)
imagetool.c:       unlink (prog->datafile);
imagetool.c:    if (prog->compfile != (char *) NULL)
imagetool.c:       unlink (prog->compfile);
imagetool.c:    if (prog->uncompfile != (char *) NULL)
imagetool.c:       unlink (prog->uncompfile);
imagetool.c:    if (prog->printfile != (char *) NULL)
imagetool.c:       unlink (prog->printfile);
imagetool.c:    if (prog->rashfile != (char *) NULL)
imagetool.c:       unlink (prog->rashfile);
imagetool.c:    for (i = 0, prog->wm_cmdstrlen = 0; i < argc; i++) {
imagetool.c:      prog->wm_cmdstrlen += strlen(argv[i]) + 1;
imagetool.c:    d_ptr = prog->wm_cmdstr = (char *) malloc(prog->wm_cmdstrlen);
imagetool.c:      fprintf (stderr, catgets (prog->catd, 1, 103,
imagetool.c:    prog->ce_okay = TRUE;
imagetool.c:    set_labels (catgets (prog->catd, 1, 104, "(None)"));
imagetool.c:    if (prog->tt_started == TRUE) {
imagetool.c:	fprintf (stderr, catgets (prog->catd, 1, 105,
imagetool.c:			 "%s: Could not initialize ToolTalk.\n"), prog->name);
imagetool.c:      prog->frame_mapped = TRUE;
imagetool.c:    if (prog->tt_started == False)
imagetool.c:    if (prog->snapshot_on_start == TRUE)
menus.c:      XtVaSetValues (saveas->shell, XmNtitle, catgets (prog->catd, 1, 395,
menus.c:      XtVaSetValues (saveas->shell, XmNtitle, catgets (prog->catd, 1, 396,
menus.c:      XtVaSetValues (saveas->shell, XmNtitle, catgets (prog->catd, 1, 397,
menus.c:      xmstring = XmStringCreateLocalized (catgets (prog->catd, 1, 438, "0"));
misc.c:    sprintf (tmp_filename, "%s.%s", prog->file_template, filename);
misc.c:	  if (write_tmpfile (&(prog->compfile), data, basename (filename), 
misc.c:          tmp_name = prog->compfile;
misc.c:	  if (write_tmpfile (&(prog->compfile), data, basename (filename), 
misc.c:          tmp_name = prog->compfile;
misc.c:	  if (write_tmpfile (&(prog->uncompfile), data, basename (filename), 
misc.c:          tmp_name = prog->uncompfile;
misc.c:       file_exists = make_tmpfile (&(prog->uncompfile), tmp_uncompname);
misc.c:          tmp_out = fopen (prog->uncompfile, "w");
misc.c:       tmp_name = prog->uncompfile;
misc.c:        fprintf (stderr, catgets (prog->catd, 1, 106, "Out of memory - exiting\n"));
open.c:		   DIALOG_TITLE, catgets (prog->catd, 1, 398, "Image Viewer - Open"),
open.c:		   DIALOG_TEXT, catgets (prog->catd, 1, 107,
open.c:		   BUTTON_IDENT, 0, catgets (prog->catd, 1, 108, "Continue"),
open.c:	    sprintf (error, catgets (prog->catd, 1, 109, 
open.c:		   DIALOG_TITLE, catgets (prog->catd, 1, 399, "Image Viewer - Open"),
open.c:		   BUTTON_IDENT, 0, catgets (prog->catd, 1, 110, "Continue"),
open.c:	    free (prog->directory);
open.c:	    prog->directory = malloc (strlen (fname) + 1);
open.c:	    strcpy (prog->directory, fname);
open.c:	    sprintf (error, catgets (prog->catd, 1, 111, 
open.c:		   DIALOG_TITLE, catgets (prog->catd, 1, 400, "Image Viewer - Open"),
open.c:		   BUTTON_IDENT, 0, catgets (prog->catd, 1, 112, "Continue"),
open.c:	 * uid and gid because 'access' checks the REAL u/gid but prog->u/gid 
open.c:	if ( !( (file_info.st_uid == prog->uid && file_info.st_mode & S_IRUSR)
open.c:	       || (file_info.st_gid == prog->gid && file_info.st_mode & S_IRGRP)
open.c:	    sprintf (error, catgets (prog->catd, 1, 113,
open.c:		   DIALOG_TITLE, catgets (prog->catd, 1, 401, "Image Viewer - Open"),
open.c:		   BUTTON_IDENT, 0, catgets (prog->catd, 1, 114, "Continue"),
open.c:	    sprintf (error, catgets (prog->catd, 1, 115,
open.c:		   DIALOG_TITLE, catgets (prog->catd, 1, 402, "Image Viewer - Open"),
open.c:		   BUTTON_IDENT, 0, catgets (prog->catd, 1, 116, "Continue"),
open.c:      sprintf (error, catgets (prog->catd, 1, 117, "%s does not exist."), fname);
open.c:		   DIALOG_TITLE, catgets (prog->catd, 1, 403, "Image Viewer - Open"),
open.c:		   BUTTON_IDENT, 0, catgets (prog->catd, 1, 118, "Continue"),
open.c:     if ((prog->tt_started == TRUE) && (status == 0)) 
open.c:    if ((prog->tt_started == TRUE) && (status == 0)) 
open.c:     if (prog->frame_mapped == True)
open.c:      if (strcmp (title, catgets (prog->catd, 1, 119,
open.c:       if (strcmp (title, catgets (prog->catd, 1, 120, 
open.c:			catgets (prog->catd, 1, 404, "Image Viewer - Save As"),
open.c:       if (strcmp (title, catgets (prog->catd, 1, 121,
open.c:			XmNtitle, catgets (prog->catd, 1, 122,
open.c:     if (prog->standardinfile != NULL) {
open.c:       unlink (prog->standardinfile);
open.c:       free (prog->standardinfile);
open.c:       prog->standardinfile = NULL;
open.c:      if (prog->ce_okay == -1) {
open.c:	prog->ce_okay = True;
open.c:      if (strcmp (type, catgets (prog->catd, 1, 123, "DATA")) == 0) {
open.c:		     DIALOG_TEXT, catgets (prog->catd, 1, 124,
open.c:		     BUTTON_IDENT, 0, catgets (prog->catd, 1, 125, "Continue"),
open.c:		     DIALOG_TEXT, catgets (prog->catd, 1, 126,
open.c:		     BUTTON_IDENT, 0, catgets (prog->catd, 1, 127, "Continue"),
open.c:	(prog->xil_opened == FALSE)) {
open.c:	 if (prog->xil_opened == False) {
open.c:	 if (prog->ce_okay == TRUE) {
open.c:	   if (strcmp (type, catgets (prog->catd, 1, 128, "DATA")) == 0) 
open.c:	   sprintf (error, catgets (prog->catd, 1, 129, "Error opening file as a %s."), save_file_type->popup_list_name);
open.c:		     DIALOG_TITLE, catgets (prog->catd, 1, 405, "Image Viewer - Open As"),
open.c:		     BUTTON_IDENT, 0, catgets (prog->catd, 1, 130, "Continue"),
open.c:	 sprintf (error, catgets (prog->catd, 1, 131, "Error opening %s."), realpath);
open.c:		      DIALOG_TITLE, catgets (prog->catd, 1, 406, "Image Viewer - Open"),
open.c:		      BUTTON_IDENT, 0, catgets (prog->catd, 1, 132, "Continue"),
open.c:	 sprintf (error, catgets (prog->catd, 1, -1, "Error opening %s."), realpath);
open.c:		      DIALOG_TITLE, catgets (prog->catd, 1, -1, "Image Viewer - Open"),
open.c:		      BUTTON_IDENT, 0, catgets (prog->catd, 1, -1, "Continue"),
open.c:      sprintf (error, catgets (prog->catd, 1, 133, "Error opening file as a %s.\nOpening file as a %s."), save_file_type->popup_list_name, file_type->popup_list_name);
open.c:		   DIALOG_TITLE, catgets (prog->catd, 1, 407, "Image Viewer - Open As"),
open.c:		   BUTTON_IDENT, 0, catgets (prog->catd, 1, 134, "Continue"),
open.c:	  sprintf (error, catgets (prog->catd, 1, 131, "Error opening %s."), realpath);
open.c:		      DIALOG_TITLE, catgets (prog->catd, 1, 406, "Image Viewer - Open"),
open.c:		      BUTTON_IDENT, 0, catgets (prog->catd, 1, 132, "Continue"),
open.c:	current_state->zoom = prog->def_ps_zoom / 100.0;
pageviewui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 135,
pageviewui.c:     sprintf (last_page, catgets (prog->catd, 1, 136, "Page %d"), 
pageviewui.c:     XtSetArg(al[ac], XmNtitle, catgets (prog->catd, 1, 137, 
pageviewui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 138,
pageviewui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 139,
pageviewui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 140, 
pageviewui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 141, 
pageviewui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 142, 
pageviewui.c:     sprintf (first_page, catgets (prog->catd, 1, 143, "Page %d"),
pageviewui.c:     sprintf (last_page, catgets (prog->catd, 1, 144, "Page %d"), end);
paletteui.c:	     catgets (prog->catd, 1, 145, "Image Viewer - Palette")); ac++;
paletteui.c:    xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 146, "%"));
paletteui.c:    xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 147, 
paletteui.c:    xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 148, 
paletteui.c:    xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 149, 
ppm.c:    if ( ich == EOF && prog->verbose )
ppm.c:	fprintf (stderr, catgets (prog->catd, 1, 150,
ppm.c:		 prog->name);
ppm.c:	    if ( ich == EOF && prog->verbose )
ppm.c:		fprintf (stderr, catgets (prog->catd, 1, 151,
ppm.c:			 "%s: EOF / read error in pbm_getc.\n"), prog->name);
ppm.c:    if ( (ch < '0' || ch > '9') && prog->verbose )
ppm.c:	fprintf (stderr, catgets (prog->catd, 1, 152,
ppm.c:		 prog->name);
ppm.c:    if ( maxval > PPM_MAXMAXVAL && prog->verbose )
ppm.c:        fprintf (stderr, catgets (prog->catd, 1, 153,
ppm.c:		 prog->name);
ppm.c:    if ( maxval > PGM_MAXMAXVAL && prog->verbose )
ppm.c:	fprintf (stderr, catgets (prog->catd, 1, 154,
ppm.c:		 prog->name);
ppm.c:	fprintf( stderr, catgets (prog->catd, 1, -1, 
ppm.c:	fprintf( stderr, catgets (prog->catd, 1, -1,
ppm.c:	if (prog->verbose)
ppm.c: 	  fprintf (stderr, catgets (prog->catd, 1, 155,
ppm.c:		   prog->name);
ppm.c:    if ( iby == EOF && prog->verbose )
ppm.c:	fprintf (stderr, catgets (prog->catd, 1, 156,
ppm.c:		 prog->name);
ppm.c:    if ( ch != '0' && ch != '1' && prog->verbose )
ppm.c:	fprintf (stderr, catgets (prog->catd, 1, 157,
ppm.c:		 prog->name);
ppm.c:	if (prog->verbose) {
ppm.c:	    fprintf(stderr, catgets (prog->catd, 1, 158,
ppm.c:		    "%s: Unable to allocate ppm data.\n"), prog->name);
print.c:    if (!prog->def_printer) 
print.c:      prog->def_printer = (char *)getenv ("PRINTER");
print.c:    if (!prog->def_printer) 
print.c:      prog->def_printer = (char *)getenv ("LPDEST");
print.c:    if (!prog->def_printer) 
print.c:      prog->def_printer = get_default_printer();
print.c:	    if (!def_printer_exists && (prog->def_printer) &&
print.c:		(strcoll (prog->def_printer, printer) == 0)) {
print.c: * Check if prog->def_printer actually is set up on the system or
print.c:    if (def_printer_exists == False || prog->def_printer == NULL) {
print.c:      prog->def_printer = get_default_printer();
print.c:      if (prog->def_printer == NULL && first_printer)
print.c:        prog->def_printer = strdup (first_printer);
print.c:    if (prog->def_printer != (char *) NULL)
print.c:		   DIALOG_TITLE, catgets (prog->catd, 1, 408, "Image Viewer - Print"),
print.c:		   DIALOG_TEXT, catgets (prog->catd, 1, 159,
print.c:		   BUTTON_IDENT, 0, catgets (prog->catd, 1, 409, "Continue"),
print.c:	    XmTextSetString (print->top_text, catgets (prog->catd, 1, 160, "1.0"));
print.c:	    XmTextSetString (print->left_text, catgets (prog->catd, 1, 161, "1.0"));
print.c:    printer = prog->def_printer;
print.c:		  DIALOG_TITLE, catgets (prog->catd, 1, 410, "Image Viewer - Print"),
print.c:		  DIALOG_TEXT, catgets (prog->catd, 1, 162,
print.c:		  BUTTON_IDENT, 0, catgets (prog->catd, 1, 163, "Continue"),
print.c:		     DIALOG_TITLE, catgets (prog->catd, 1, 411, "Image Viewer - Print"),
print.c:		     DIALOG_TEXT, catgets (prog->catd, 1, 164,
print.c:		     BUTTON_IDENT, 0, catgets (prog->catd, 1, 165, "Continue"),
print.c:	     if (prog->printfile == (char *) NULL) 
print.c:	        make_tmpfile (&(prog->printfile), "print");
print.c:	        file_ptr = fast_read (prog->uncompfile);
print.c:	     status = fast_write (prog->printfile, file_ptr->addr, 
print.c:	     file_to_print = prog->printfile;
print.c: * the tmp file. Use prog->printfile.
print.c:	  if (prog->printfile == (char *) NULL) 
print.c:	     make_tmpfile (&(prog->printfile), "print");
print.c:          tmp_image = init_image (prog->printfile, prog->printfile, 0, 
print.c:	     if (prog->xil_opened == FALSE) {
print.c:	       if (prog->xil_opened == False) {
print.c:	  file_to_print = prog->printfile;
print.c:       if (prog->rashfile == (char *) NULL) 
print.c:	 make_tmpfile (&(prog->rashfile), "rash");
print.c:       out_file = fopen (prog->rashfile, "w");
print.c:	     unlink (prog->rashfile);
print.c:	 unlink (prog->printfile);
print.c:       file_to_print = prog->rashfile;
print.c:	     file_to_print = prog->uncompfile;
print.c:	     if (write_tmpfile (&(prog->uncompfile), current_image->data, 
print.c:             file_to_print = prog->uncompfile;
print.c:       file_to_print = prog->rashfile;
print.c:      sprintf (error, catgets (prog->catd, 1, 166, 
print.c:		   DIALOG_TITLE, catgets (prog->catd, 1, 412, "Image Viewer - Print"),
print.c:		   BUTTON_IDENT, 0, catgets (prog->catd, 1, 167, "Continue"),
print.c:      SetFooter (base->left_footer, catgets (prog->catd, 1, 437,
print.c:    if (prog->def_printer) {
print.c:      str = XmStringCreateSimple (prog->def_printer);
print_prev.c:    if (prog->xil_opened == FALSE) {
print_prev.c:      if (prog->xil_opened == False)
printprevui.c:     XtSetArg(al[ac], XmNtitle, catgets (prog->catd, 1, 168, 
printprevui.c:	 fprintf (stderr, catgets (prog->catd, 1, 383, 
printprevui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 169, 
printprevui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 170, 
printprevui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 171, 
printui.c:     XtSetArg(al[ac], XmNtitle, catgets (prog->catd, 1, 172, 
printui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 173,
printui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 174,
printui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 175,
printui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 176,
printui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 177,
printui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 178,
printui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 179,
printui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 180,
printui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 181,
printui.c:     list_items[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 182,
printui.c:     list_items[1] = XmStringCreateLocalized (catgets (prog->catd, 1, 183,
printui.c:     list_items[2] = XmStringCreateLocalized (catgets (prog->catd, 1, 184,
printui.c:     list_items[3] = XmStringCreateLocalized (catgets (prog->catd, 1, 185,
printui.c:     list_items[4] = XmStringCreateLocalized (catgets (prog->catd, 1, 186,
printui.c:     list_items[5] = XmStringCreateLocalized (catgets (prog->catd, 1, 187,
printui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 188,
printui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 189,
printui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 190,
printui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 191,
printui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 192,
printui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 193,
printui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 194,
printui.c:     XtSetArg(al[ac], XmNvalue, catgets (prog->catd, 1, 195, "1.0")); ac++;
printui.c:     XtSetArg(al[ac], XmNvalue, catgets (prog->catd, 1, 196, "1.0")); ac++;
printui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 197, 
printui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 198,
printui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 199, 
printui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 200,
printui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 201, "in"));
printui.c:     xmstrings[1] = XmStringCreateLocalized (catgets (prog->catd, 1, 202, "cm"));
printui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 203, 
printui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 230, 
printui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 205, 
props.c:	prog->check_for_color = True;
props.c:	prog->check_for_color = False;
props.c:	prog->ps_mono = True;
props.c:	prog->ps_mono = False;
props.c:		      DIALOG_TITLE, catgets (prog->catd, 1, 413, "Image Viewer - Options"),
props.c:		      DIALOG_TEXT, catgets (prog->catd, 1, 206,
props.c:		      BUTTON_IDENT, 0, catgets (prog->catd, 1, 207, "Continue"),
props.c:		      DIALOG_TITLE, catgets (prog->catd, 1, 414, "Image Viewer - Options"),
props.c:		      DIALOG_TEXT, catgets (prog->catd, 1, 208,
props.c:		      BUTTON_IDENT, 0, catgets (prog->catd, 1, 209, "Continue"),
props.c:	xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 210,
props.c:	xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 211,
props.c:	xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 212,
props.c:	xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 213,
props.c:	xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 214,
props.c:	xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 215,
props.c:	xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 216,
props.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 440,
props.c:       xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 211,
props.c:		    DIALOG_TITLE, catgets (prog->catd, 1, 415, "Image Viewer - Options"),
props.c:		    DIALOG_TEXT, catgets (prog->catd, 1, 449, "Cannot save option changes."),
props.c:		    BUTTON_IDENT, 0, catgets (prog->catd, 1, 218, "Continue"),
props.c:	       DIALOG_TITLE, catgets (prog->catd, 1, 416, "Image Viewer - Options"),
props.c:	       DIALOG_TEXT, catgets (prog->catd, 1, 450,
props.c:	       BUTTON_IDENT, 0, catgets (prog->catd, 1, 220, "Dismiss"),
props.c:	       BUTTON_IDENT, 1, catgets (prog->catd, 1, 221, "Cancel"),
propsui.c:     XtSetArg(al[ac], XmNtitle, catgets (prog->catd, 1, 222, 
propsui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 223,
propsui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 224,
propsui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 225,
propsui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 439,
propsui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 226,
propsui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 227, 
propsui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 228, 
propsui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 229, 
propsui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 230, 
propsui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 231, 
ps.c:    if (prog->verbose) 
ps.c:       fprintf (stderr, catgets (prog->catd, 1, 232, 
ps.c:				 "%s: got ps status: %d\n"), prog->name, code);
ps.c:       if (prog->verbose)
ps.c:	    SetFooter (base->left_footer, catgets (prog->catd, 1, 233,
ps.c:	  if (prog->verbose == TRUE)
ps.c:       if (prog->verbose)
ps.c:       SetFooter (base->left_footer, catgets (prog->catd, 1, 448,
ps.c:       prog->footer_priority = MONOCHROME_MESSAGE;
ps.c:    if (prog->verbose) {
ps.c:    char	*prefix = catgets (prog->catd, 1, 234, "%% [Error: ");
ps.c:    char	*suffix = catgets (prog->catd, 1, 235, " ] %%\n");
ps.c:    char	*infix = catgets (prog->catd, 1, 236, " Offending Command: ");
ps.c:    char	*nameinfix = catgets (prog->catd, 1, 237, "User name too long; Name: ");
ps.c:    char	*contextinfix = catgets (prog->catd, 1, 238, "Invalid context: ");
ps.c:    char	*taginfix = catgets (prog->catd, 1, 239, "Unexpected wrap result tag: ");
ps.c:    char	*typeinfix = catgets (prog->catd, 1, 240, "Unexpected wrap result type; tag: ");
ps.c:    if (prog->verbose) 
ps.c:       fprintf (stderr, catgets (prog->catd, 1, 241,
ps.c:		"%s: got ps error: %d\n"), prog->name, error_code);
ps.c:	    sprintf (buf2, catgets (prog->catd, 1, 242, 
ps.c:	    sprintf (buf2, catgets (prog->catd, 1, 243, 
ps.c:	    sprintf (buf2, catgets (prog->catd, 1, 244,
ps.c:	    sprintf (buf2, catgets (prog->catd, 1, 245,
ps.c:	    buf1 = catgets (prog->catd, 1, 246, "Unknown error from DPS\n");
ps.c:    if (prog->verbose)
ps.c:       if (prog->verbose)
ps.c:       SetFooter (base->left_footer, catgets (prog->catd, 1, 448,
ps.c:       prog->footer_priority = MONOCHROME_MESSAGE;
ps.c:	 SetFooter (base->left_footer, catgets (prog->catd, 1, 247,
ps.c: 	 if (prog->footer_priority <= COUNTING_MESSAGE) {
ps.c:	   prog->footer_priority = CLEAR_MESSAGE;
ps.c:    if (prog->verbose) 
ps.c:       fprintf (stderr, catgets (prog->catd, 1, 248,
ps.c:				 "%s: got ps status: %d\n"), prog->name, code);
ps.c:    if (prog->verbose)
ps.c:    if (prog->dps == TRUE) {
ps.c:		sprintf (tmp_check_color, "%d", prog->check_for_color);
ps.c:       if (prog->verbose == TRUE)
ps.c:    if (prog->dps == TRUE) {
ps.c:      if (prog->verbose)
ps.c:	fprintf (stderr, catgets (prog->catd, 1, 250,
ps.c:		    prog->name);
ps.c:		   DIALOG_TITLE, catgets (prog->catd, 1, 398, "Image Viewer - Open"),
ps.c:		   DIALOG_TEXT, catgets (prog->catd, 1, 251,
ps.c:		   BUTTON_IDENT, 0, catgets (prog->catd, 1, 252, "Continue"),
ps.c:    if (prog->ps_mono == True)
ps.c:    if (prog->ps_mono && ps_display->mono_gc == NULL) {
ps.c:      if (prog->ps_mono == True) {
ps.c:    if (prog->dps == TRUE) {
ps.c:          if (prog->ps_mono == True)
ps.c:	  if (prog->verbose)
ps.c:             fprintf (stderr, catgets (prog->catd, 1, 253,
ps.c:		      "%s couldn't connect to DPS server.\n"), prog->name); 
ps.c:    else if (prog->ps_mono == True)
ps.c:      float zoom = (float) prog->def_ps_zoom / 100.0;
ps.c:    if (prog->dps == TRUE) {
ps.c:      SetFooter (base->left_footer, catgets (prog->catd, 1, 259,
ps.c:      prog->footer_priority = CLEAR_MESSAGE;
ps.c:      if (prog->footer_priority < MONOCHROME_MESSAGE) {
ps.c:        SetFooter (base->left_footer, catgets (prog->catd, 1, 260,
ps.c:	prog->footer_priority = COUNTING_MESSAGE;
ps.c:          if (prog->footer_priority < MONOCHROME_MESSAGE) {
ps.c:	    SetFooter (base->left_footer, catgets (prog->catd, 1, 261,
ps.c:   	    prog->footer_priority = COUNTING_MESSAGE;
ps.c:	  SetFooter (base->left_footer, catgets (prog->catd, 1, 262,
ps.c:    if (prog->dps == TRUE) {
ps.c:    if (prog->ps_mono == True)
ps.c:    zoom = (float) prog->def_ps_zoom / 100.0;
ps.c:	            tmp_width, tmp_height, (int) ps_display->res_x, FALSE, prog->check_for_color);
ps.c:       (ps_timeout->it_value).tv_sec = prog->timeout;
ps.c:    if (prog->news_opened == FALSE) {
ps.c:       prog->news_opened = TRUE;
ps.c:       zoom = (float) prog->def_ps_zoom / 100.0;
ps.c:       if (prog->dps == TRUE) {
ps.c:    if (prog->ps_mono == True) {
ps.c:       if (prog->verbose)
ps.c:	      catgets (prog->catd, 1, 269, 
ps.c:	      prog->name);
ps.c:       if (prog->dps == TRUE)
ps.c:       if (prog->verbose)
ps.c:          fprintf (stderr, catgets (prog->catd, 1, 270,
ps.c:			   "%s: Unable to zoom image.\n"), prog->name);
ps.c:    if (prog->dps == TRUE) {
ps.c:       if (prog->dps == TRUE)
ps.c:    if (prog->dps == TRUE)
ps.c:       if (prog->dps == TRUE)
ps.c:       if (prog->dps == TRUE)
ps.c:       if (prog->dps == TRUE) {
ps.c:    if (prog->dps == TRUE) {
ps.c:       if (prog->dps == TRUE) {
ps.c:    if (prog->dps == TRUE) {
ps.c:       if (prog->dps == TRUE)
ps.c:    if (prog->dps == TRUE) {
ps.c:    if (vis_class == StaticGray || prog->ps_mono == True) {
ps.c:       if (prog->ps_mono == True) {
ps.c:        ((prog->ps_mono == True)  && (vis_class != TrueColor) &&
ps.c:       if (prog->ps_mono == True) {
ps_optionsui.c:     XtSetArg(al[ac], XmNtitle, catgets (prog->catd, 1, 271, 
ps_optionsui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 441,
ps_optionsui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 273, 
ps_optionsui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 274,
ps_optionsui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 442, "0"));
ps_optionsui.c:     xmstrings[1] = XmStringCreateLocalized (catgets (prog->catd, 1, 443, "90"));
ps_optionsui.c:     xmstrings[2] = XmStringCreateLocalized (catgets (prog->catd, 1, 444, "180"));
ps_optionsui.c:     xmstrings[3] = XmStringCreateLocalized (catgets (prog->catd, 1, 445, "270"));
ps_optionsui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 446,
ps_optionsui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 447,
ps_optionsui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 277,
ps_optionsui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 278,
ps_optionsui.c:     list_items[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 279,
ps_optionsui.c:     list_items[1] = XmStringCreateLocalized (catgets (prog->catd, 1, 280,
ps_optionsui.c:     list_items[2] = XmStringCreateLocalized (catgets (prog->catd, 1, 281,
ps_optionsui.c:     list_items[3] = XmStringCreateLocalized (catgets (prog->catd, 1, 282,
ps_optionsui.c:     list_items[4] = XmStringCreateLocalized (catgets (prog->catd, 1, 283,
ps_optionsui.c:     list_items[5] = XmStringCreateLocalized (catgets (prog->catd, 1, 284,
ps_optionsui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 285, 
ps_optionsui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 228, 
ps_optionsui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 2, 
ps_optionsui.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 287, 
ps_optionsui.c:      prog->def_ps_zoom = (int) (((float) view_height / (float) pix_height) * 100);
ps_optionsui.c:       current_state->zoom = (float) prog->def_ps_zoom / 100.0;
ps_optionsui.c:      prog->def_ps_zoom = 100;
save.c:     if (strcmp (title, catgets (prog->catd, 1, 288,
save.c:     else if (strcmp (title, catgets (prog->catd, 1, 289,
save.c:		   DIALOG_TITLE, catgets (prog->catd, 1, 417,
save.c:		   DIALOG_TEXT, catgets (prog->catd, 1, 290,
save.c:		   BUTTON_IDENT, 0, catgets (prog->catd, 1, 291, "Continue"),
save.c:	sprintf (error, catgets (prog->catd, 1, 292, "%s is a folder.\nPlease enter a file name."), fname);
save.c:		   DIALOG_TITLE, catgets (prog->catd, 1, 418,
save.c:		   BUTTON_IDENT, 0, catgets (prog->catd, 1, 293, "Continue"),
save.c:        sprintf (error, catgets (prog->catd, 1, 294,
save.c:		   DIALOG_TITLE, catgets (prog->catd, 1, 419, "Image Viewer - Save"),
save.c:		   BUTTON_IDENT, 0, catgets (prog->catd, 1, 295, "Continue"),
save.c:    if (strcmp (colors, catgets (prog->catd, 1, 296, "B&W")) == 0)
save.c:    else if (strcmp (colors, catgets (prog->catd, 1, 297, "256")) == 0)
save.c:    else if (strcmp (colors, catgets (prog->catd, 1, 298, "Millions")) == 0)
save.c:    if (strcmp (comp_str, catgets (prog->catd, 1, 299, "None")) == 0)
save.c:    else if (strcmp (comp_str, catgets (prog->catd, 1, 300, "Unix")) == 0)
save.c:    else if (strcmp (comp_str, catgets (prog->catd, 1, 301, "Encoded")) == 0)
save.c:    else if (strcmp (comp_str, catgets (prog->catd, 1, 302, "LZW")) == 0)
save.c:    else if (strcmp (comp_str, catgets (prog->catd, 1, 303, "JPEG")) == 0)
save.c:	       DIALOG_TITLE, catgets (prog->catd, 1, 420, "Image Viewer - Save"),
save.c:	       DIALOG_TEXT, catgets (prog->catd, 1, 304,
save.c:	       BUTTON_IDENT, 0, catgets (prog->catd, 1, 305, "Yes"),
save.c:	       BUTTON_IDENT, 1, catgets (prog->catd, 1, 306, "No"),
save.c:      sprintf (msg, catgets (prog->catd, 1, 307, "The file \"%s\" already exists.\nDo you want to overwrite the existing file \"%s\"?"), basename (fname), basename (fname));
save.c:		   DIALOG_TITLE, catgets (prog->catd, 1, 421, "Image Viewer - Save"),
save.c:		   BUTTON_IDENT, 0, catgets (prog->catd, 1, 308, "Cancel"),
save.c:		   BUTTON_IDENT, 1, catgets (prog->catd, 1, 309, "Overwrite Existing File"),
save.c:	  sprintf (msg, catgets (prog->catd, 1, 310, "The file \"%s\" already exists.\nSaving a file using UNIX compression will overwrite this file.\nDo you want to overwrite the existing file \"%s\"?"), basename (fname), basename (fname));
save.c:		     DIALOG_TITLE, catgets (prog->catd, 1, 422, "Image Viewer - Save"),
save.c:		     BUTTON_IDENT, 0, catgets (prog->catd, 1, 311, "Cancel"),
save.c:		     BUTTON_IDENT, 1, catgets (prog->catd, 1, 312, "Overwrite Exising File"),
save.c:	  sprintf (msg, catgets (prog->catd, 1, 313, "The file \"%s\" already exists.\nSaving a file using UNIX compression will overwrite this file.\nDo you want to overwrite the existing file \"%s\"?"), basename (cname), basename (cname));
save.c:		     DIALOG_TITLE, catgets (prog->catd, 1, 423, "Image Viewer - Save"),
save.c:		     BUTTON_IDENT, 0, catgets (prog->catd, 1, 314, "Cancel"),
save.c:		     BUTTON_IDENT, 1, catgets (prog->catd, 1, 315, "Overwrite Existing File"),
save.c:		      DIALOG_TITLE, catgets (prog->catd, 1, 424, "Image Viewer - Save"),
save.c:		      DIALOG_TEXT, catgets (prog->catd, 1, 316,
save.c:		      BUTTON_IDENT, 0, catgets (prog->catd, 1, 317, "Continue"),
save.c:	if (prog->xil_opened == FALSE) {
save.c:	  if (prog->xil_opened == False) {
save.c:		       DIALOG_TITLE, catgets (prog->catd, 1, 425, "Image Viewer - Save"),
save.c:		       DIALOG_TEXT, catgets (prog->catd, 1, 318,
save.c:		       BUTTON_IDENT, 0, catgets (prog->catd, 1, 319, "Continue"),
save.c:		   DIALOG_TITLE, catgets (prog->catd, 1, 426, "Image Viewer - Save"),
save.c:		   DIALOG_TEXT, catgets (prog->catd, 1, 320,
save.c:		   BUTTON_IDENT, 0, catgets (prog->catd, 1, 321, "Continue"),
save.c:		   DIALOG_TITLE, catgets (prog->catd, 1, 427, "Image Viewer - Save"),
save.c:		   DIALOG_TEXT, catgets (prog->catd, 1, 322,
save.c:		   BUTTON_IDENT, 0, catgets (prog->catd, 1, 323, "Continue"),
save.c:	  if (prog->verbose) {
save.c:	    fprintf( stderr, catgets (prog->catd, 1, 324, "cannot malloc memory\n"));
save.c:	sprintf (error, catgets (prog->catd, 1, 325,
save.c:		     DIALOG_TITLE, catgets (prog->catd, 1, 428,
save.c:		     BUTTON_IDENT, 0, catgets (prog->catd, 1, 326, "Continue"),
save.c:		     DIALOG_TITLE, catgets (prog->catd, 1, 429,
save.c:		     DIALOG_TEXT, catgets (prog->catd, 1, 430, "File compression failed"),
save.c:		     BUTTON_IDENT, 0, catgets (prog->catd, 1, 327, "Continue"),
save.c:      current_state->zoom = prog->def_ps_zoom / 100.0;
save.c:    if (prog->tt_started == TRUE)
save.c:     xmstring = XmStringCreateLocalized (catgets (prog->catd, 1, 328, "256"));
save.c:       xmstring = XmStringCreateLocalized (catgets (prog->catd, 1, 329, "256"));
save.c:       xmstring = XmStringCreateLocalized (catgets (prog->catd, 1, 330,
save.c:       xmstring = XmStringCreateLocalized (catgets (prog->catd, 1, 331, "256"));
save.c:       xmstring = XmStringCreateLocalized (catgets (prog->catd, 1, 332, "LZW"));
save.c:       xmstring = XmStringCreateLocalized (catgets (prog->catd, 1, 333, "None"));
save.c:       xmstring = XmStringCreateLocalized (catgets (prog->catd, 1, 334, "JPEG"));
save.c:       xmstring = XmStringCreateLocalized (catgets (prog->catd, 1, 335, "None"));
save.c:       xmstring = XmStringCreateLocalized (catgets (prog->catd, 1, 336, "None"));
select.c:      SetFooter (base->left_footer, catgets (prog->catd, 1, 337,
select.c:		 DIALOG_TITLE, catgets (prog->catd, 1, 431, 
select.c:		 DIALOG_TEXT, catgets (prog->catd, 1, 338,
select.c:		 BUTTON_IDENT, 0, catgets (prog->catd, 1, 339, "Continue"),
select.c:		 DIALOG_TITLE, catgets (prog->catd, 1, 432, "Image Viewer - Palette"),
select.c:		 DIALOG_TEXT, catgets (prog->catd, 1, 340,
select.c:		 BUTTON_IDENT, 0, catgets (prog->catd, 1, 341, "Continue"),
session.c:      command_len = prog->wm_cmdstrlen + strlen("-session") + strlen(name) + 2;
session.c:      command_len = prog->wm_cmdstrlen + 2;
session.c:    memcpy(command, prog->wm_cmdstr, prog->wm_cmdstrlen);
session.c:    command_len = prog->wm_cmdstrlen;
snap_dialog.c:                              catgets(prog->catd, 1, 463,
snap_dialog.c:                          catgets(prog->catd, 1, 454, "Taking Snapshot..."));
snap_dialog.c:      DisplayStatusReport(snapDialogInfo->StatusReport, catgets(prog->catd, 1, 455,
snap_dialog.c:                              catgets(prog->catd, 1, 461, "Snap cancelled."));
snap_dialog.c:                          catgets(prog->catd, 1, 456, "Bringing image into Image Viewer..."));
snap_dialog.c:                          catgets(prog->catd, 1, 454, "Taking Snapshot..."));
snap_dialog.c:      DisplayStatusReport(snapDialogInfo->StatusReport, catgets(prog->catd, 1, 457,
snap_dialog.c:                              catgets(prog->catd, 1, 461, "Snap cancelled."));
snap_dialog.c:      DisplayStatusReport(snapDialogInfo->StatusReport, catgets(prog->catd,1,458,
snap_dialog.c:                              catgets(prog->catd, 1, 461, "Snap cancelled."));
snap_dialog.c:      DisplayStatusReport(snapDialogInfo->StatusReport, catgets(prog->catd, 1, 456,
snap_dialog.c:                          catgets(prog->catd, 1, 462, "Capturing screen..."));
snap_dialog.c:                              catgets(prog->catd, 1, 459, "Snap succeeded."));
snap_dialog.c:                              catgets(prog->catd, 1, 460, "Snap failed."));
snap_dialog.c:                          catgets(prog->catd, 1, 459, "Snap succeeded."));
snap_dialog.c:                          catgets(prog->catd, 1, 460, "Snap failed."));
snap_dialog.c:           catgets(prog->catd, 1, 464, "8 sec. delay required for Hide option."));
snap_dialog.c:		  prog->name);
snap_dialog.c:			catgets(prog->catd, 1, 452,
snap_dialog.c:			prog->name);
snap_dialog.c:                fprintf(stderr, catgets(prog->catd, 1, 453,
snap_dialog.c:		  prog->name);
snap_dialog.c:       if (prog->verbose)
snap_dialog.c:	      catgets(prog->catd, 1, 269,
snap_dialog.c:	      prog->name);
snap_dialog.c:    if (prog->xil_opened == False)
snap_dialog.c:        if (prog->xil_opened == False)
snap_dialog.c:              BUTTON_IDENT, YES_SAVE, catgets (prog->catd, 1, 305, "Yes"),
snap_dialog.c:              BUTTON_IDENT, NO_SAVE, catgets (prog->catd, 1, 306, "No"),
snap_dialog.c:              BUTTON_IDENT, CANCEL_SAVE, catgets (prog->catd, 1, 230, "Cancel"),
state.c:      tmp_state->zoom = ((float) prog->def_ps_zoom) / 100.0;
state.c:      current_state->zoom = ((float) prog->def_ps_zoom) / 100.0;
state.c:     if (strcmp (title, catgets (prog->catd, 1, 342, 
state.c:			XmNtitle, catgets (prog->catd, 1, 343,
state.c:			XmNtitle, catgets (prog->catd, 1, 344,
state.c:      SetFooter (base->left_footer, catgets (prog->catd, 1, 345,
tiff.c:          if (prog->verbose)
tiff.c:             fprintf (stderr, catgets (prog->catd, 1, 346,
tiff.c:          if (prog->verbose)
tiff.c:             fprintf (stderr, catgets (prog->catd, 1, 347,
tiff.c:       if (prog->verbose)
tiff.c:           printf (stderr, catgets (prog->catd, 1, -1,
tiff.c:       if (prog->verbose)
tiff.c:           printf (stderr, catgets (prog->catd, 1, -1,
tiff.c:	    if (prog->verbose)
tiff.c:  	      fprintf (stderr, catgets (prog->catd, 1, 348,
tiff.c:       if (prog->verbose)
tiff.c:         fprintf (stderr, catgets (prog->catd, 1, 349,
tiff.c:	   if (prog->verbose)
tiff.c:             fprintf (stderr, catgets (prog->catd, 1, 350,
tiff.c:		      "%d: Error writing TIFF scanline\n"), prog->name);
tt.c:   if (prog->tt_started == True) {
tt.c:     prog->tt_timer_set = True;
tt.c:     prog->tt_timer_set = False;
tt.c:       fprintf (stderr, catgets (prog->catd, 1, 351,
tt.c:    if (prog->tt_sender != (char *) NULL)
tt.c:       free (prog->tt_sender);
tt.c:    prog->tt_sender = (char *) NULL;
tt.c:    prog->tt_started = FALSE;
tt.c:	   sprintf (tmpfilename, "%s%d", catgets (prog->catd, 1, 352, 
tt.c:	   write_status = write_tmpfile (&(prog->datafile), contents, 
tt.c:	   write_status = write_tmpfile (&(prog->datafile), contents, docname,
tt.c:	   fprintf (stderr, catgets (prog->catd, 1, 353, 
tt.c:	 open_status = open_newfile (docname, prog->datafile, 
tt.c:         if (prog->tt_timer_set == True && current_props->show_palette) {
tt.c:    prog->tt_started = FALSE;
tt.c:    if (prog->tt_sender != (char *) NULL) {
tt.c:       free (prog->tt_sender);
tt.c:       prog->tt_sender = (char *) NULL;
tt.c:   prog->tt_timer_set = TRUE;
tt.c:    if (prog->tt_started == FALSE)
tt.c:    if (prog->tt_sender == (char *) NULL) 
tt.c:       prog->tt_sender = strdup (tt_message_sender (ttmsg));
tt.c:    else if (strcmp (prog->tt_sender, tt_message_sender (ttmsg)) != 0)
tt.c:    if (prog->verbose == TRUE)
tt.c:			prog->name, type);
tt.c:	  write_status = write_tmpfile (&(prog->datafile), tt_contents, 
tt.c:	  write_status = write_tmpfile (&(prog->datafile), tt_contents, title,
tt.c:       status = open_newfile (NULL, title, prog->datafile, file_type, 
tt.c:       prog->tt_load = TRUE;
tt.c:    if (status != 0 && prog->verbose) {
tt.c:    dstt_status (prog->tt_sender, 
tt.c:    if (prog->tt_sender != (char *) NULL)
tt.c:       free (prog->tt_sender);
tt.c:    prog->tt_sender = (char *) NULL;
tt.c:    prog->tt_started = FALSE;
ui_imagetool.c:     xmstrings[0] = XmStringCreateLocalized(catgets (prog->catd, 1, 354, 
ui_imagetool.c:     xmstrings[0] = XmStringCreateLocalized(catgets (prog->catd, 1, 355, 
ui_imagetool.c:     xmstrings[0] = XmStringCreateLocalized(catgets (prog->catd, 1, 356, 
ui_imagetool.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 357, 
ui_imagetool.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 358, 
ui_imagetool.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 359, 
ui_imagetool.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 360, 
ui_imagetool.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 451, 
ui_imagetool.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 361, 
ui_imagetool.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 362, 
ui_imagetool.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 363, 
ui_imagetool.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 364, 
ui_imagetool.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 365, 
ui_imagetool.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 366, 
ui_imagetool.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 367, 
ui_imagetool.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 368, 
ui_imagetool.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 369, 
ui_imagetool.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 370, 
ui_imagetool.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 371, 
ui_imagetool.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 372, 
ui_imagetool.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 373, 
ui_imagetool.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 374, 
ui_imagetool.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 375, 
ui_imagetool.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 376, 
ui_imagetool.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 377, 
ui_imagetool.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 378, 
ui_imagetool.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 379, 
ui_imagetool.c:     xmstring = XmStringCreateLocalized (catgets (prog->catd, 1, 380, 
ui_imagetool.c:       sprintf (label, "%s %s", catgets (prog->catd, 1, 433, "Image Viewer"), prog->rel);
ui_imagetool.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 381,
ui_imagetool.c:     xmstrings[0] = XmStringCreateLocalized (catgets (prog->catd, 1, 382,
ui_imagetool.c:	 fprintf (stderr, catgets (prog->catd, 1, 383, 
ui_imagetool.c:		     DIALOG_TITLE, catgets (prog->catd, 1, 6, "Image Viewer"),
ui_imagetool.c:		     DIALOG_TEXT, catgets (prog->catd, 1, 384, "Unable to open XIL Library."),
ui_imagetool.c:		     BUTTON_IDENT, 0, catgets (prog->catd, 1, 108, "Continue"),
ui_imagetool.c:       prog->xil_opened = TRUE;
ui_imagetool.c:     if (prog->xil_opened)
ui_imagetool.c:     if (prog->xil_opened)
ui_imagetool.c:     prog->dps = display_postscript_present(xdisplay);
ui_imagetool.c:     if (prog->dps == TRUE) {
ui_imagetool.c:       fprintf (stderr, catgets (prog->catd, 1, 385, 
ui_imagetool.c:     if (prog->dps == TRUE) {
ui_imagetool.c:       if (depth != def_depth || prog->ps_mono == True)
xv.c:      if ((prog->frame_mapped == FALSE) && (current_display == ps_display) &&
xv.c:          (current_state != NULL) && (prog->dps == TRUE)) {
xv.c:       prog->tt_timer_set = FALSE;
xv.c:       prog->frame_mapped = TRUE;
xv.c:      if (prog->xil_opened && current_display == image_display) {  
xv.c:            if (prog->verbose)
xv.c:     if (prog->sb_right) 
xv.c:	 if (prog->sb_right)
xv.c:	if (prog->verbose)
xv.c:	  (prog->tt_timer_set == FALSE)) {
xv.c:      if ((prog->frame_mapped == FALSE) && (current_display == ps_display) &&
xv.c:          (current_state != NULL) && (prog->dps == TRUE)) {
xv.c:      prog->tt_timer_set = FALSE;
xv.c:      prog->frame_mapped = TRUE;
