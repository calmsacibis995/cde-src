...\" **  (c) Copyright 1993, 1994 Hewlett-Packard Company
...\" **  (c) Copyright 1993, 1994 International Business Machines Corp.
...\" **  (c) Copyright 1993, 1994 Sun Microsystems, Inc.
...\" **  (c) Copyright 1993, 1994 Unix System Labs, Inc.,
...\" **      a subsidiary of Novell, Inc.
.\"--- Substitute the appropriate text for items beginning and ending with `_'
.\"--- (for example, _TITLE_ and _name_).  \-option_ items begin with
.\"--- `\-' (en-dash) and end with `_'.  Do not delete the `\-' characters.
.\"--- Be sure to use upper or lower case indicated for each item.
.\"---
.\"--- You need only use the parts of this template appropriate for your
.\"--- particular man page.  Delete the parts that aren't pertinent.
.\"---
.\"--- If your man page is copyrighted, please preserve the copyright
.\"--- notice.
.\"---
.\"--- For CDE: The following sections are mandatory: Page Heading, NAME
.\"--- CONFIGURATION (section 7 only), SYNOPSIS, PROTOCOL (section 3R only),
.\"--- DESCRIPTION, IOCTLS (section 7 only), OPTIONS, RETURN VALUES,
.\"--- ENVIRONMENT (if applicable), FILES, SEE ALSO
.\"---
.\"----------------------------------------------------------------------------
.\"---
.\"--- The following line is an instruction which insures that any
.\"--- preprocessors applied to the man page will be invoked in the proper
.\"--- order.  `t' refers to tbl, `e' refers to eqn and `p' refers to pic.
.\"--- Only include those necessary for your particular man page.
.\"--- IF THERE AE NONE DELETE THIS LINE!
.\"---
'\" tep
.\"---
.\"----------------------------------------------------------------------------
.\"--- THIS IS NOT NECESSARY FOR CDE:
.\"--- The next line is the SCCS ID line, which must appear in any file
.\"--- under the control of SCCS.  It contains extraneous zero-width characters
.\"--- `\&' to prevent SCCS from interpreting it as the SCCS line for this
.\"--- template file.  Executing this template will produce a version of the
.\"--- template with these characters removed, thereby generating a valid
.\"--- SCCS line ID for your man page.
.\"---
.\"--- _source_ is where the page comes from, for example, "UCB 4.3 BSD"
.\"--- or "S5r3".  For Sun-originated pages, the "from" information may
.\"--- omitted.
.\"---
.\" %\&Z%%\&M% %\&I% %\&E% SMI; from _source_
.\"---
.\"----------------------------------------------------------------------------
.\"---
.\"--- PAGE HEADING
.\"--- This section provides information for the header and footer of the man
.\"--- page.  _title_ the name of the man page.  This should correspond to the
.\"--- first word in the NAME line.  _#S_ specifies the manual section in 
.\"--- which the page will appear, where # is the number of the section and 
.\"--- S (if needed) is the letter of the subsection (S should be captalized).
.\"--- The _Month_ should be abbreviated (Sep.\"--- Oct).
.\"--- Include the last changed date in both _TH_ and _BH_.
.\"--- 
.\"---
.TH DtDataTyping 3 "15 Dec. 1993"
.BH "15 Dec. -1993"
.\"---
.\"----------------------------------------------------------------------------
.\"---
.\"--- NAME
.\"--- This section is used by cross-referencing programs.  Hence, do not
.\"--- use any font changes or troff escape sequences in this section.
.\"--- The _summary-line_ is brief, all on one line.
.\"---
.SH NAME
DtDataTyping, DtDtsLoadDataTypes, DtDtsDataToDataType, DtDtsFileToDataType, DtDtsFileToAttributeList, DtDtsFileToAttributeValue , DtDtsBufferToDataType, DtDtsBufferToAttributeList, DtDtsBufferToAttributeValue, DtDtsDataTypeToAttributeList, DtDtsDataTypeToAttributeValue, DtDtsFreeDataType, DtDtsFreeAttributeList, DtDtsFreeAttributeValue, DtDtsRelease, DtDtsDataTypeNames, DtDtsFindAttribute, DtDtsFreeDataTypeNames, DtDtsSetDataType, DtDtsDataTypeIsAction \- Data Typing operations
.SH SYNOPSIS
.\"---
.\"--- Use the following lines for pages in manual Sections 2, 3, 5 and 7: 
.\"---
.LP
.nf
.ft 3
#include <Dt/Dts.h>
.sp .5v
.B


void		DtDtsLoadDataTypes(void);
void		DtDtsRelease(void);

char		*DtDtsDataToDataType(
				const char		*filepath,
				const void		*buffer,
				const int		size,
				const struct stat	*stat_buff,
				const char		*link_path,
				const struct stat	*link_stat_buff,
				const char		*opt_name);

char		*DtDtsFileToDataType(const char *filepath);
char		*DtDtsFileToAttributeValue(
				const char		*filepath,
				const char		*attr_name);
DtDtsAttribute	**DtDtsFileToAttributeList(const char *filepath);

char		*DtDtsBufferToDataType(
				const void		*buffer,
				const int		size,
				const char		*opt_name);
char		*DtDtsBufferToAttributeValue(
				const void		*buffer,
				const int		size,
				const char		*attr_name,
				const char		*opt_name);
DtDtsAttribute	**DtDtsBufferToAttributeList(
				const void		*buffer,
				const int		size,
				const char		*opt_name);

char		*DtDtsDataTypeToAttributeValue(
				const char		*datatype,
				const char		*attr_name,
				const char		*opt_name);
DtDtsAttribute	**DtDtsDataTypeToAttributeList(
				const char		*datatype,
				const char		*opt_name);

void		DtDtsFreeDataTypeNames(char **namelist);
void		DtDtsFreeAttributeList(DtDtsAttribute **attr_list);
void		DtDtsFreeAttributeValue(char *attr_value);
void		DtDtsFreeDataType(char *datatype);

char		**DtDtsDataTypeNames(void);

char		**DtDtsFindAttribute(
				const char		*attr_name,
				const char		*attr_value);

char		*DtDtsSetDataType(
				const char		*filepath,
				const char		*datatype,
				const int		override);

int		DtDtsDataTypeIsAction(const char *datatype);

Where:

filepath	the pathname of file.
buffer		a pointer to the buffer of the data to be typed.
size		the size of the buffer.
stat_buff	the buffer from stat/fstat call for use in typing.
link_path	the pathname of the original file that a link points to.
link_stat_buff	the buffer from lstat call for use in typing.
opt_name	a name that may be associated with a buffer.
datatype	a DataType
attr_name	a name of an attribute
attr_list	a list of attribute/value pairs defined by the DtDtsAttribute
		structure.
attr_value	a value of an attribute.
namelist	a list of datatype names
override	If false will not change the value if it is currently set.

DtDtsAttribute is a structure with the following entries:
	char	*name;
	char	*value;


.ft 1
.fi
.\"---
.\"----------------------------------------------------------------------------
.\"---
.\"--- AVAILABILITY
.\"--- This section describes any conditions or restrictions on the use 
.\"--- of the command (function, device or file format).  This is limited
.\"--- to software installation requirements and hardware restrictions.
.\"---
.SH AVAILABILITY
.LP
_description-of-restriction_
.\"---
.\"----------------------------------------------------------------------------
.\"---
.\"--- DESCRIPTION 
.\"--- This section tells concisely what the command (function, device or
.\"--- file format) does.  Do not discuss options or cite examples.
.\"---
.SH DESCRIPTION
.\"---
.\"--- The _1st_index_term_ and _2nd_index_term_ will appear in the manual
.\"--- index.  _format_of_1st_ and _format_of_2nd_ specify formatting for
.\"--- these index entries.
.\"---
.IX "_1st_index_term_" "_2nd_index_term_" "_format_of_1st_" "_format_of_2nd_"
.LP

DtDtsDataToDataType, DtDtsDataTypeToAttributeValue and
DtDtsDataTypeToAttributeList are the primary datatyping functions, the
DtDtsFileTo* and DtDtsBufferTo* are convenience functions to these
primary routines.

DtDtsLoadDataTypes Initialize and loads the Database fields for the DataTyping functions.

DtDtsRelease Releases the data structures and data associated with the datatype database, generally in preparation for a reload.


DtDtsFileToDataType Returns datatype name for a given file path.Note: the file and buffer functions are convenience functions for this routine and should probably be used for simplicity. Call DtDtsFreeDataType to release the memory for the value.


DtDtsFileToAttributeValue returns a data attribute value for a given file path. Call DtDtsFreeAttributeValue to release the memory for the returned value

DtDtsFileToAttributeList Returns a NULL terminated array of pointers of *DtDtAttribute for a given file path. Call DtDtsFreeAttributeList to release the memory for the returned value


DtDtsBufferToDataType Returns a data type name for a given byte stream. Call DtDtsFreeDataType to release the memory for the returned value. If opt_name is
not NULL it will be used as a psudeo file name in typing. 

DtDtsBufferToAttributeValue Returns a data attribute value for a given byte stream. Call DtDtsFreeAttributeValue to release the memory for the returned value. If opt_name is NULL certain attributes will be returned as NULL because
the "filename" components could not be determined.

DtDtsBufferToAttributeList Returns a NULL terminated array of pointers
of *DtDtAttribute for a given byte stream. Call DtDtsFreeAttributeList
to release the memory for the returned value. If opt_name is NULL
certain attributes will be returned as NULL because the "filename"
components could not be determined.

DtDtsDataToDataType Returns data type for a given set of data. Call DtDtsFreeDataType to release the memory for the returned value. 
Pointer values may be passed as a NULL. If a pointer value is NULL the
system will try and determine the appropriate value for it only if it is need
in doing the typing. 

DtDtsDataTypeToAttributeList Returns a NULL terminated array of pointers of *DtDtAttribute for a given datatype name. Call DtDtsFreeAttributeList to release the memory for the returned value. If opt_name is NULL
certain attributes will be returned as NULL because the "filename"
components could not be determined.

DtDtsDataTypeToAttributeValue Returns the data attribute value for a given datatype name. Call DtDtsFreeAttributeValue to release the memory for the returned value. If opt_name is NULL
certain attributes will be returned as NULL because the "filename"
components could not be determined.

DtDtsDataTypeNames Returns a list of all available datatypes that is currently loaded into the DataTypes database. Call DtDtsFreeDataTypeNames to release the memory for the returned value

DtDtsFreeDataType Frees the memory of a datatype name.

DtDtsFreeDataTypeNames Frees the memory of a list of datatype name.

DtDtsFreeAttributeList Frees the memory of an attribute list.

DtDtsFreeAttributeValue Frees the memory of an attribute value.

DtDtsFindAttribute Finds the list of datatypes that have the attribute "name" that equal "value". Call DtDtsFreeDataTypeNames to release the memory for the returned value

DtDtsSetDataType Sets a datatype on a directory and returns the current datatype on the object. If unable to set or retrieve the datatype a NULL is returned.

DtDtsDataTypeIsAction Check if the specified datatype is one loaded by the action tables. 

.\"---
.\"----------------------------------------------------------------------------
.\"---
.\"--- RETURN VALUES
.\"--- This section appears in pages from Sections 2 and 3 only.
.\"--- List the _values_ that the function returns and give _explanations_.
.\"---
.SH "RETURN VALUES"
.TP 15
Pointer
See Description.

.TP 15
NULL
If no value could be determined.
.\"---
.\"----------------------------------------------------------------------------
.\"---
.\"--- EXAMPLES
.\"--- This section gives examples of how to use the command (function
.\"--- or file format).  Always preface an example with an _introduction_.
.\"--- If there are multiple examples, use separate subsection headings
.\"--- for each _example-type_.  Otherwise, omit these headings.
.\"---
.SH EXAMPLES
.SS Simple-FileTyping
.LP
This example takes a list of files as arguments and determines the Description
of that datatype.
.LP
.RS
.ft 3
.nf

#include <Dt/Dts.h>

#define	ATTRIBUTE	"DESCRIPTION"

main(int argc, char **argv)
{
	char	*attribute;

	/* load datatypes database */
	DtDtsLoadDataTypes();

	argv++;
	while(*argv) {
		/* get attribute for file */
		attribute = DtDtsFileToAttributeValue(*argv, ATTRIBUTE);

		if(attribute) {
			printf("%s: %s\n", *argv, attribute);
		}
		argv++;
	}
	DtDtsRelease();
	exit(0);
}

.fi
.ft
.RE
.LP
.SS Simple-DataTyping
.LP
This example takes a list of files as arguments and determines the Description
and Actions of for that file.
.LP
.RS
.ft 3
.nf

#include <Dt/Dts.h>

#define	ATTRIBUTE1	"DESCRIPTION"
#define	ATTRIBUTE2	"ACTIONS"

main(int argc, char **argv)
{
	char	*attribute;
	char	*datatype;

	/* load datatypes database */
	DtDtsLoadDataTypes();

	argv++;
	while(*argv) {
		/* get datatype file file */
		datatype = DtDtsFileToDataType(*argv);

		/* get first attribute for datatype */
		attribute = DtDtsDataTypeToAttributeValue(datatype,
					ATTRIBUTE1, *argv);
		if(attribute) {
			printf("%s for file %s is %s\n",
				ATTRIBUTE1, *argv, attribute);
		}

		/* get second attribute for datatype */
		attribute = DtDtsDataTypeToAttributeValue(datatype,
					ATTRIBUTE2, NULL);
		if(attribute) {
			printf("%s for file %s is %s\n",
				ATTRIBUTE2, *argv, attribute);
		}
		argv++;
	}
	DtDtsRelease();
	exit(0);
}

.fi
.ft
.RE
.LP
.\"---
.\"----------------------------------------------------------------------------
.\"---
.\"--- SEE ALSO
.\"--- This section lists references to other man pages, in-house
.\"--- documents and other publications.
.\"---
.SH "SEE ALSO"
.BR DtActionLabel (3),
.BR DtActionDescription (3),
.BR DtActionExists (3),
.BR DtActionInvoke (3),
.BR dtdtfile (3),
.BR DtDndDropRegister (3),
.BR dtcreateaction (1),
.BR dttypes (1),
.\"---
.\"--- >>DO NOT USE TZ MACRO FOR CDE MAN PAGES<< Use _TZ-macro-abbreviations_ 
.\"--- to list in-house documents
.\"--- (for example, "SUNDIAG" for "Sundiag User's Guide").
.\"--- Refer to /usr/doctools/tmac/tz.map or the Man Page Spec. Appendix B
.\"--- for a list of available arguments.
.\"---
.\".LP
.\".TZ _TZ-macro-abbreviation_
.\".LP
.\"---
.\"--- Use this format for listing publications:
.\"---
.\"_Author_,
.\".I "_Outside-Doc-Title_,"
.\"_Year-by-Holder_, _Publisher_.
.\"---
.\"----------------------------------------------------------------------------

