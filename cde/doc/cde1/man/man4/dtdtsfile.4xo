.cdes
.TH dtdtsfile 4 "15 Jun 1994"
.\" CDE Common Source Format, Version 1.0.0
.\" (c) Copyright 1993, 1994, 1995 Hewlett-Packard Company
.\" (c) Copyright 1993, 1994, 1995 International Business Machines Corp.
.\" (c) Copyright 1993, 1994, 1995 Sun Microsystems, Inc.
.\" (c) Copyright 1993, 1994, 1995 Novell, Inc.
.SH NAME
dtdtsfile \- format and location of desktop data type and action files
.SH SYNOPSIS
.yS
set DtDbVersion=\f2version_number\fP
set \f2VariableName\fP=\f2variable_value\fP
.sp 0.5v
\f2RecordType record_name\fP
{
	# \f2Comment\fP
	\f2FieldName field_value\fP
	\f2FieldName field_value\fP
		\&.
		\&.
		\&.
}
.yE
.SH DESCRIPTION
.cdee
The Cde data types database provides definitions for the data types
and actions recognized by Cde clients.
.P
.xo .H 3 "Data Types and Actions Database Syntax"
.xo .xR3 dtdtfile
The general syntax of the data types files is as
.cde described above in the SYNOPSIS section of this man page.
.xos
follows:
.P
.yS
set DtDbVersion=\f2version_number\fP
set \f2VariableName\fP=\f2variable_value\fP
.sp 0.5v
\f2RecordType record_name\fP
{
	# Comment
	\f2FieldName field_value\fP
	\f2FieldName field_value\fP
		\&.
		\&.
		\&.
}
.yE
.P
.xoe
.ne 5
The set of general constructs
composing the database entries is as follows:
.cde .HU "Comments"
.xo .H 4 "Comments"
Any line whose first non-space character is # is treated as a
comment line, and is ignored during the reading of the database file.
.cde .HU "Database Version"
.xo .H 4 "Database Version"
The database loader supports a version number, which indicates
the version of the database syntax used by a particular database file.
If a database version number is not specified, then the database
loader assumes that the file uses the version 1.0 syntax, described here.
If a database file specifies a version number, then it
must be the first non-blank, non-comment line in the database file;
if the version is specified anywhere else in the file, then an error
message is generated, and the remainder of that database file is ignored.
The database version number is specified using the following syntax:
.Cs I
set DtDbVersion=\f2version_number\fP
.Ce
.cde .HU "String Variables"
.xo .H 4 "String Variables"
Database records can reference string variables that are set
within the database file.
The scope of a string variable is restricted
to only those record definitions within the database file defining the
string variable.
A string variable is defined using the following syntax:
.Cs I
set \f2VariableName\fP=\f2variable_value\fP
.Ce
.P
String variables are referenced using either of the standard shell
variable referencing syntaxes:
$\f2variable_name\fP or ${\f2variable_name\fP}.
A variable name can be made up of any of the alphanumeric characters
and the underscore.
.xo (See section 2.6.2 in the \*(ZC.)
.cde .HU "Environment Variables"
.xo .H 4 "Environment Variables"
Database records may refer to environment variables, using either
of the standard shell variable referencing syntaxes:
$\f2environment_variable\fP
or ${\f2environment_variable\fP}.
If the environment variable name conflicts
with a string variable name, the string variable takes precedence.
.cde .HU "Line Continuation"
.xo .H 4 "Line Continuation"
Any field within a record can be continued onto another line by
ending the line with a \e character.
The \e and any
.tK blank s
following the \e and preceding the newline are discarded;
leading
.tK blank s
on the following line are preserved in the continued field.
.br
.cde .HU "Record Name"
.xo .H 4 "Record Name"
The first line of a record is made up of the record type,
.I RecordType
(one of:
.Cn DATA_ATTRIBUTES ,
.Cn DATA_CRITERIA
or
.Cn ACTION ),
followed by the record name,
.IR record_name ,
which is henceforth used to identify this record.
The
.I record_name
string must be coded in
.cde ASCII
.xo the codeset described in the \*(Z8
and must be uniquely named across the data attributes,
data criteria and actions tables.
.br
.cde .HU "Record Delimiters"
.xo .H 4 "Record Delimiters"
After the record name has been located, the set of corresponding
fields is delimited by the { and } characters.
Each of these characters must appear on a line by itself.
.cde .HU "Fields"
.xo .H 4 "Fields"
The fields are all of the non-comment lines found between the
record delimiters.
They are composed of keyword/value pairs.
The
.I FieldName
string must be coded in
.cde ASCII.
.xo the codeset described in the \*(Z8.
The
.I field_value
may be coded in additional, implementation-dependent, code sets,
except that any literal string values shown in
.cde Data Criteria Format, below,
.xo .cX datacritfmt
string must be coded in
.cde ASCII.
.xo the codeset described in the \*(Z8.
.br
.cde .HU "Record Types"
.xo .H 4 "Record Types"
There are three recognized record types in database files used for data types
(and actions):
.xo .BL
.cde .VL 2
.LI \(bu
.Cn DATA_CRITERIA
.LI \(bu
.Cn DATA_ATTRIBUTES
.LI \(bu
.Cn ACTION
.LE
.P
These three kinds of database record can appear together in the same file or
they can be segregated into separate files.
See
.cde .BR dtaction (4)
.xo .cX dtactionfile
for the file format of
.Cn ACTION
records.
.cde .SH "DATA_CRITERIA RECORDS"
.xo .H 3 "Data Criteria Records"
.xo .xR3 DataCriteriaRecords
The first seven subsections of this section describe the
.I FieldName s
supported for data criteria records.
The remaining subsections describe formatting and
sorting information for data criteria records.
.br
.cde .HU "NAME_PATTERN Field"
.xo .H 4 "NAME_PATTERN Field"
A shell pattern-matching
expression describing the file names that could match this data.
.cde See Pattern Matching Notation.
.xo See section 2.13 of the \*(ZC.
The default is an empty string,
which means to ignore file patterns in matching.
.P
If the data to be matched is in a buffer, rather than a file, the
.Cn NAME_PATTERN
expression is evaluated against the
.I opt_name
value given to
.Fn DtDtsBufferToDataType 3
and related functions.
.br
.cde .HU "PATH_PATTERN Field"
.xo .H 4 "PATH_PATTERN Field"
A shell pattern-matching
expression describing the absolute pathnames that could match this data.
.cde See Pattern Matching Notation.
.xo See section 2.13 of the \*(ZC.
The default is an empty string,
which means to ignore path patterns in matching.
.P
The
.Cn PATH_PATTERN
expression is used only for matching data in files;
it does not affect matching of data in buffers.
.br
.cde .HU "CONTENT Field"
.xo .H 4 "CONTENT Field"
Strings that match on the contents of a file, buffer or directory:
.Cs I
\f2offset type value(s)\fP
.Ce
.P
The
.I offset
string is a positive decimal integer number of octets
from the beginning of the file or buffer,
where the first
.I value
is tested.
The
.I offset
value is ignored for the
.B filename
.IR type .
.P
The
.I type
string is one of the following:
.VL 11 5
.LI \f3string\fP
The
.I value
is a single string that is compared against the data starting at the
.I offset
location.
.LI \f3byte\fP
.sp -0.4v
.LI \f3short\fP
.sp -0.4v
.LI \f3long\fP
Each
.tK blank -separated
.I value
is an unsigned integer:
decimal,
octal (leading \f30\fP)
or hexadecimal (leading \f30x\fP or \f30X\fP).
Multiple values are matched against multiple
byte (octet), short (two octets) or long (four octets)
locations starting at
.I offset
octets from the beginning of the file or data.
.LI \f3filename\fP
The
.I value
is a string that is compared against the filenames
located anywhere in a directory.
The use of
.B filename
on non-directory data produces undefined results.
.LE
.P
The default
.Cn CONTENT
is an empty field,
which means to ignore contents in matching.
.P
The
.Cn CONTENT
field applies to data in both files and buffers.
.P
Examples of two data criteria records with
.Cn CONTENT
fields are:
.Cs I
DATA_CRITERIA PCL1
{
	DATA_ATTRIBUTES_NAME    PCL
	CONTENT         0 byte 033 0105
	MODE            f&!x
}
.sp 0.5v
DATA_CRITERIA POSTSCRIPT3
{
	DATA_ATTRIBUTES_NAME    POSTSCRIPT
	CONTENT         0 string %!
	MODE            f&!x
}
.Ce
.br
.cde .HU "MODE Field"
.xo .H 4 "MODE Field"
A string of zero to four characters
that match the mode field of a
.I stat
structure (see
.cde .Fn stat 2).
.xo .Hd sys/stat.h
.xo in the \*(ZK).
The first character indicates:
.VL 3
.LI \f3d\fP
match a directory
.LI \f3s\fP
match a socket
.LI \f3l\fP
match a symbolic link
.LI \f3f\fP
match a regular file
.LI \f3b\fP
match a block file
.LI \f3c\fP
match a character special file
.LE
.P
The first, or subsequent characters, can also be:
.VL 3
.LI \f3r\fP
match any file with any of its user, group, or other read permission bits set
.LI \f3w\fP
match any file with any of its user, group, or other write permission bits set
.LI \f3x\fP
match any file with any of its user, group, or other execute
or directory-search permission bits set
.LE
.P
For example, the
.Cn MODE
field of
.B frw
matches any regular file that is readable or writable;
.B x
matches any file with any of its executable or search bits set.
.P
The default is an empty field,
which means to ignore the mode in matching.
.P
If the data to be matched is in a buffer, rather than a file, the
buffer is processed as if it had a mode of
.BR fr .
.br
.cde .HU "LINK_NAME Field"
.xo .H 4 "LINK_NAME Field"
A shell pattern-matching
expression describing the filename component (basename)
of the filename the symbolic link points to that could match this data.
.cde See Pattern Matching Notation.
.xo See section 2.13 of the \*(ZC.
The default is an empty expression,
which means to ignore symbolic link names in matching.
.Cn LINK_NAME
points to the file itself, not to the name of the file.
.P
The
.Cn LINK_NAME
expression is used only for matching data in files;
it does not affect matching of data in buffers.
.br
.cde .HU "LINK_PATH Field"
.xo .H 4 "LINK_PATH Field"
A shell pattern-matching
expression describing the absolute pathname
of the file pointed to by the symbolic link that could match this data.
.cde See Pattern Matching Notation.
.xo See section 2.13 of the \*(ZC.
The default is an empty expression,
which means to ignore symbolic link name in matching.
.P
The
.Cn LINK_PATH
expression is used only for matching data in files;
it does not affect matching of data in buffers.
.br
.cde .HU "DATA_ATTRIBUTES_NAME Field"
.xo .H 4 "DATA_ATTRIBUTES_NAME Field"
The name of this type of data.
This value is a
.I record_name
in the data attributes table.
.cdes
.HU "Pattern Matching Notation"
The pattern-matching text field permits use of the shell
pattern-matching characters *, ?, and [\|].
The asterisk (*) matches any set of characters,
the question mark (?) matches a single character,
and the square brackets ([\|]) match any one of
a set of characters enclosed in the square brackets.
The full definition of shell pattern matching is in the X/Open
.BR "CAE Specification, Commands and Utilities, Issue 4" .
.cdee
.cde .HU "Logical Expressions"
.xo .H 4 "Logical Expressions"
The logical operators AND (&), OR (\||\|) and NOT (!)
can be used in
any of the data criteria fields, except for
.Cn DATA_ATTRIBUTES_NAME ,
as shown in
.cde Data Criteria Format, below.
.xo .cX datacritfmt .
The resultant expressions are evaluated from left to right.
.cde .HU "White Space"
.xo .H 4 "White Space"
White space is used to delimit tokens,
as shown by the
.I blanks
and
.I newline
terminals in
.cde Data Criteria Format, below.
.xo .cX datacritfmt .
Within the
.I pattern
terminal, however,
leading and trailing white space
not explicitly shown in the grammar
is significant to the expression.
For example,
.Cs I
NAME_PATTERN   abc | def
.Ce
is matched by either ``\c
.BR abc\0 ''
(with a trailing
.tK space )
or ``\0
.BR def ''
(with a leading
.tK space ).
.br
.cde .HU "Escape Character"
.xo .H 4 "Escape Character"
Shell pattern-matching
and logical expression characters can be escaped and used as
literal characters by preceding the character with a backslash (\e).
For example, \e* is interpreted as an asterisk,
\e? as a question mark and \e[\e] as square brackets.
Backslash itself can be escaped by preceding it with a backslash (\e\e).
.cde .HU "Data Criteria Format"
.xo .H 4 "Data Criteria Format"
.xo .xR4 datacritfmt
The following pseudo-BNF describes the data criteria variable definition:
.P
.S -1
.TS
center;
.xo lf5 1 cf5 1 lf5w(3.5i) .
.cde lf3 1 cf3 1 lf3w(3.5i) .
DataCriteriaDefn	::=	`DATA_CRITERIA' \f6blanks record_name\fP
{
		\f6data_criteria_defn\fP
}
.sp
data_criteria_defn	::=	(
		`PATH_PATTERN' \f6blanks pattern_datas newline\fP
	|	`NAME_PATTERN' \f6blanks pattern_datas newline\fP
	|	`LINK_PATH' \f6blanks pattern_datas newline\fP
	|	`LINK_NAME' \f6blanks pattern_datas newline\fP
	|	`CONTENT' \f6blanks content_fields newline\fP
	|	`MODE' \f6blanks mode_specs newline\fP
	|	`DATA_ATTRIBUTES_NAME' \f6blanks name newline\fP
		)
.sp 0.5v
pattern_datas	::=	\f6pattern_data\fP [(`&' | `|') \f6pattern_datas\fP]
pattern_data	::=	[`!'] \f6pattern\fP
pattern	::=	T{
.na
.ft 1
a shell pattern matching expression, as defined in
.cde .Cm sh 1
.xo section 2.13 of the \*(ZC
T}
mode_specs	::=	\f6mode_spec\fP [(`&' | `|') \f6mode_specs\fP]
mode_spec	::=	(
		\f6type_spec\fP [\f6permission_spec\fP]
	|	\f6type_spec\fP (`&' | `|') \f6permission_spec\fP
		)
type_spec	::=	[`!'] \f6type_char\fP {\f6type_char\fP}
type_char	::=	(`d' | `l' | `f' | `s' | `b' | `c' )
permission_spec	::=	[`!'] \f6permission_char\fP {\f6permission_char\fP}
permission_char	::=	(`r' | `w' | `x')
content_fields	::=	\f6content_field\fP [(`&' | `|') \f6content_fields\fP]
content_field	::=	(
		[`!'] \f6offset blanks\fP `string' \f6blanks string\fP
	|	[`!'] \f6offset blanks\fP `byte'  \f6blanks data_values\fP
	|	[`!'] \f6offset blanks\fP `short' \f6blanks data_values\fP
	|	[`!'] \f6offset blanks\fP `long'  \f6blanks data_values\fP
	|	[`!'] \f6offset blanks\fP `filename' \f6blanks string\fP
		)
offset	::=	\f1an unsigned decimal integer\fP
data_values	::=	\f6data_value\fP [\f6blanks data_values\fP]
data_value	::=	T{
.na
.ft 1
an unsigned integer:
decimal,
octal (leading \f30\fP)
or hexadecimal (leading \f30x\fP or \f30X\fP)
T}
name	::=	( "A-Z" | "a-z" ) [\f6name_char\fP]
name_char	::=	{ "A-Z" | "a-z" | "0-9" | "-" }
string	::=	T{
.na
.ft 1
a character string, not including
.tK newline
T}
newline	::=	`\en'
blanks	::=	T{
.na
.ft 1
one or more
.tK blank s
.cde (spaces and/or tabs)
T}
.TE
.S +1
.br
.cde .HU "Data Criteria Sorting"
.xo .H 4 "Data Criteria Sorting"
There may be multiple data criteria records
that could match a file or data.
This subsection describes the sorting process
used by the \*(Zx data typing services.
The more specific criteria are sorted
toward the top of the list and the more
general criteria toward the bottom.
The data criteria record selected is
the first match found on the resulting sorted list.
.P
The following sorting rules are applied in sequence
to each possible pair of data criteria records.
If a rule determines that one data criteria record
is more specific than another, the two records
are positioned in the list so that the more specific comes
before the less specific;
otherwise, the next rule in sequence is applied.
.VL 3
.LI 1.
Records are ordered by the fields specified within them:
.VL 3
.LI a.
Records with both content and pattern fields (most specific)
.LI b.
Records with only pattern fields
.LI c.
Records with only content fields
.LI d.
Records with neither content nor pattern fields (least specific)
.LE
.LI 2.
Records are ordered based on the presence of any shell pattern-matching
characters in their file name patterns (NAME_PATTERN or PATH_PATTERN):
.VL 3
.LI a.
File names with no shell pattern-matching characters (most specific)
.LI b.
File names with no shell pattern-matching characters in
the final suffix (such as
.BR *.c )
.LI c.
Others (least specific)
.LE
.LI 3.
Records with a path pattern are more specific than records
with a name pattern.
.LI 4.
Records with a name pattern of
.B *
are treated as if they have no name pattern.
.LI 5.
Records are ordered based on the types of shell pattern-matching
characters in their patterns:
.VL 3
.LI a.
Patterns with any
.B ?
(most specific)
.LI b.
Patterns with any
.B [\|]
.LI c.
Patterns with any
.B *
(least specific)
.LE
.LI 6.
Records with path patterns that share leading pathname components
are ordered as follows:
.VL 3
.LI a.
The leading pathname components without shell pattern-matching
characters are selected for comparison.
(For example,
.B /foo/bar/bam/baz.?
and
.B /foo/bar/*/baz
are evaluated as
.B /foo/bar/bam
and
.B /foo/bar
for this rule.)
.LI b.
The selected paths are
ordered so that the longest is more specific.
.LI c.
If the selected paths are equal,
the full path patterns are ordered based on the number
and types of shell pattern-matching
characters in their patterns, in the following sequence:
.VL 3
.LI i.
Path patterns with fewer
.B *
characters are more specific.
.LI ii.
Path patterns with fewer
.B [\|]
characters are more specific.
.LI iii.
Path patterns with fewer
.B ?
characters are more specific.
.LE
.LI d.
If the path patterns are still of equal specificity,
the one with the larger number of literal characters
(those not used as shell pattern-matching special characters)
in its pattern
after the first non-literal character is more specific.
.LE
.LI 7.
Records are ordered based on a character sorting of the path patterns,
with the lowest value in collation sequence being more specific.
.LI 8.
Records are ordered so that the one with more criteria
is more specific.
(For example, a record with a
.Cn PATH_PATTERN ,
.Cn CONTENT
and
.Cn MODE
is more specific than one with only a
.Cn PATH_PATTERN .)
.LE
.P
Two records still equal after executing the preceding rules
are ordered in an unspecified sequence.
.br
.cde .SH "DATA_ATTRIBUTES RECORDS"
.xo .H 3 "Data Attribute Records"
.xo .xR3 DataAttributeRecords
The following
.IR FieldName s
are supported for data attribute records.
Each of the
.IR FieldName s
is identical to the corresponding
.I name
member string of a
.I DtDtsAttribute
structure; see
.Hd Dt/Dts.h .
.br
.cde .HU "DESCRIPTION Field"
.xo .H 4 "DESCRIPTION Field"
A textual description of the data that is suitable for
presentation to a user requesting information about the data.
The description should contain no formatting information such as tab or
newline characters.
The application that presents the information to the user formats the
information.
If this field is
.Cn NULL
or is not included in the data attribute record,
the name of the data attribute should be used.
.br
.cde .HU "ICON Field"
.xo .H 4 "ICON Field"
.xo .xR4 ICONField
The name of the icon to use for this data.
If this field is
.Cn NULL
or is not included in the data attribute record,
a default value (\c
.B Dtactn
for an executable file or
.B Dtdata
for other data)
should be used.
.P
Icons are found by using the standard Cde icon search path,
so the value can be either an absolute pathname (for example,
.BR /foo/icons/myicon.bm ),
a relative pathname (for example,
.BR icons/myicon.bm )
or a partial filename (for example,
.BR myicon ).
Partial filenames are preferred because
they allow the Cde icon search path to find the icon with the optimum
size and depth for the current environment.
.xo See the \*(ZI.
.br
.cde .HU "INSTANCE_ICON Field"
.xo .H 4 "INSTANCE_ICON Field"
The name of the icon to use for this instance of data.
The contents of this field are as described in
.xo .cX ICONField .
.cde ICON Field, above.
If
.Cn INSTANCE_ICON
is set, the application should use it instead of
.Cn ICON .
If this field is
.Cn NULL
or is not included in the data attribute record,
the
.Cn ICON
field should be used.
.P
An example value of
.Cn INSTANCE_ICON
is
.BR %name%.icon ,
which would select an icon based on a specific filename,
rather than on a generic data type.
.xos
(See
.cX datatypemodifiers .)
.xoe
.br
.cde .HU "PROPERTIES Field"
.xo .H 4 "PROPERTIES Field"
Keywords to indicate properties for this data.
Valid values are
.B visible
and
.BR invisible .
These provide guidance to an application
such as a file manager about whether a file
should be visibly displayed to the user.
.P
If this field is
.Cn NULL
or is not included in the data attribute record,
the visible property should be assumed.
.br
.cde .HU "ACTIONS Field"
.xo .H 4 "ACTIONS Field"
A comma-separated list of actions that can be performed on this data.
This list refers to names in the action table
for actions that can be performed on this data.
If this field is
.Cn NULL
or is not included in the data attribute record,
no action is available.
.br
.cde .HU "NAME_TEMPLATE Field"
.xo .H 4 "NAME_TEMPLATE Field"
A string used to create a new file for data of this type.
The string is intended to be passed to
.Fn sprintf 3
with the file name as the single argument.
For example:
.BR %s.mif .
.xo (See
.xo .Fn sprintf
.xo in the \*(ZK.)
The default is empty.
(This field is contrasted with the NAME_PATTERN field
of the data criteria table in that the template is
used to create a specific file, such as
.BR %s.c ,
whereas the pattern is used to find files, such as
.BR *.c ).
.cde .HU "IS_EXECUTABLE Field"
.xo .H 4 "IS_EXECUTABLE Field"
A string-Boolean value that tells users of this data type
that it can be executed as an application.
If
.Cn IS_EXECUTABLE
is a true value (as determined by the
.Fn DtDtsIsTrue
function),
the data is executable;
if this field is
.Cn NULL ,
is not included in the data attribute record
or is not true,
then the data is considered not executable.
.br
.cde .HU "MOVE_TO_ACTION Field"
.xo .H 4 "MOVE_TO_ACTION Field"
The name of an action to be invoked when an object is moved
to the current object using a drag and drop operation.
.P
The
.Cn MOVE_TO_ACTION ,
.Cn COPY_TO_ACTION
and
.Cn LINK_TO_ACTION
fields cause an action to be invoked with the drop target
as the first of the
.B DtActionArg
arguments to the
.Fn DtActionInvoke
function, and the drag sources as the remaining
.B DtActionArg
arguments.
However, if the drop target is an action itself,
it is omitted from the
.B DtActionArg
list.
For example, using the syntax of the
.Cm dtaction
utility, if objects A and B are dropped onto non-action object C:
.Cs I
dtaction \f2action-name\fP C A B
.Ce
.P
.ne 3v
If C is an action:
.Cs I
dtaction \f2action-name\fP A B
.Ce
.cde .HU "COPY_TO_ACTION Field"
.xo .H 4 "COPY_TO_ACTION Field"
The name of an action to be invoked when an object is
copied to the current object using a drag and drop operation.
.br
.cde .HU "LINK_TO_ACTION Field"
.xo .H 4 "LINK_TO_ACTION Field"
The name of an action to be invoked when an object is
linked to the current object using a drag and drop operation.
.br
.cde .HU "IS_TEXT Field"
.xo .H 4 "IS_TEXT Field"
A string-Boolean value that tells users of this data type
that it is suitable for manipulation (viewing or editing)
in a text editor or text widget.
The
.Cn IS_TEXT
field should be set to a true value (as determined by the
.Fn DtDtsIsTrue
function) if the data is textual in nature and if it should
be presented to the user in textual form.
Criteria for
making this determination include
whether the data:
.xo .BL
.cde .VL 3
.LI \(bu
consists of human language, or
.LI \(bu
is generated and maintained manually, or
.LI \(bu
is usefully viewable and editable in a text editor, or
.LI \(bu
contains no (or only minimal) structuring and formatting information.
.LE
.P
If the
.Cn IS_TEXT
field is a true value,
this indicates that the data
is eligible to be displayed directly by an application.
That is, the
application can load the data directly into a text editing
widget (for example, XmText) instead of invoking an action on the data.
An example of this occurs in the Cde mail services:
if the first
part of a multipart message has
.Cn IS_TEXT
true, then it is
displayed in the text area of the message view window.
Otherwise, the text area will contain only message headers
and the first part of the message will be displayed as an
icon in the attachment pane.
It is immaterial
whether the data
.I can
be loaded into an XmText
widget\*(EMeven binary data can be\*(EMbut rather
whether the data
.I should
be loaded into an XmText widget.
.P
Note that the
.Cn IS_TEXT
field differs from the
.B text
attribute of the
.Cn MIME_TYPE
field, which is the MIME content-type,
as described in
.xo the \*(Zm.
.cde RFC 1341.
The MIME content-type determines whether the
data consists of textual characters or byte values.
If the data consists of textual characters and is labelled as
.BR text/* ,
the
.Cn IS_TEXT
field determines whether it is appropriate for the data to be
presented to users in textual form.
.P
Examples of common data types include recommendations
of the appropriate value of
.Cn IS_TEXT :
.BL
.LI
Human language encoded in ASCII:
.Cs I
MIME_TYPE	text/plain
IS_TEXT	true
.Ce
Note, however, that not everything that is ASCII should be
presented directly to the user.
.LI
Human language encoded in EUC, JIS, Unicode, or an ISO Latin charset:
.Cs I
MIME_TYPE	text/plain; charset=XXX
IS_TEXT	true
.Ce
.LI
CalendarAppointmentAttrs:
.Cs I
MIME_TYPE	text/plain
IS_TEXT	false
.Ce
Calendar appointments should be treated
as opaque objects (editable only by the appointment editor) and
not shown to the user as text.
.LI
HTML (HyperText Markup Language):
.Cs I
MIME_TYPE	text/html
IS_TEXT	true
.Ce
.LI
PostScript:
.Cs I
MIME_TYPE	application/postscript
IS_TEXT	false
.Ce
.ne 4
.LI
C program source (C_SRC):
.Cs I
MIME_TYPE	text/plain
IS_TEXT	true
.Ce
.LI
Bitmaps and pixmaps (XBM and XPM):
.Cs I
MIME_TYPE	text/plain
IS_TEXT	false
.Ce
.LI
Project or module files for the Cde application building services:
.Cs I
MIME_TYPE	text/plain
IS_TEXT	false
.Ce
.LI
Shell scripts:
.Cs I
MIME_TYPE	text/plain
IS_TEXT	false
.Ce
.LI
Encoded text produced by
.cde .Cm uuencode 1:
.xo .Cm uuencode
.xo (see the \*(ZC):
.Cs I
MIME_TYPE	text/plain
IS_TEXT	false
.Ce
.LI
Manual pages:
.Cs I
MIME_TYPE	text/plain
IS_TEXT	false
.Ce
.LE
.br
.cde .HU "MEDIA Field"
.xo .H 4 "MEDIA Field"
The names in the
.Cn MEDIA
name space describe the form of the data itself.
.Cn MEDIA
names are used as ICCCM selection targets;
they are named in the
.Cn MEDIA
field of data type records;
and they are used in the
.I type
parameter of ToolTalk Media Exchange messages.
.P
The
.Cn MEDIA
name space is a subset of the name space
of selection target atoms as defined by the
.cde ICCCM.
.xo ICCCM; see \*(Zi.
All selection targets that specify a data format are valid
.Cn MEDIA
names, and all valid
.Cn MEDIA
names can be used directly as selection targets.
Some selection targets specify an
attribute of the selection (for example, LIST_LENGTH)
or a side effect to occur (for example, DELETE),
rather than a data format.
These attribute selection targets are not part of the
.Cn MEDIA
name space.
.br
.cde .HU "MIME_TYPE Field"
.xo .H 4 "MIME_TYPE Field"
.Cn MEDIA
is the Cde internal, unique name for data types.
However,
other external naming authorities have also established
name spaces.
.Cn MIME
(Multipurpose Internet Message Extensions),
as described in the referenced MIME RFCs,
is one of those external registries,
and is the standard type name space for the Cde mail system.
.br
.cde .HU "X400_TYPE Field"
.xo .H 4 "X400_TYPE Field"
X.400 types are similar in structure to the
.Cn MEDIA
type, but are formatted using different rules and have
different naming authorities.
.br
.cde .HU "DATA_HOST Attribute"
.xo .H 4 "DATA_HOST Attribute"
The
.Cn DATA_HOST
attribute is not a field that can be added to the
data attributes table when it is in a file,
but it may be returned to an application
reading attributes from the table.
The data typing service adds this attribute
automatically to indicate the host system
from which the data type was loaded.
If this field is
.Cn NULL
or is not included in the data attribute record,
the data type was loaded from the local system.
.br
.cde .HU "Modifiers"
.xo .H 4 "Modifiers"
.xo .xR4 datatypemodifiers
The following modifiers can be used in the
values of the data attributes to modify the runtime values:
.VL 10
.LI \f3%file%\fP
The full pathname of the file.
.LI \f3%dir%\fP
The directory component of the pathname.
For example, for
.BR /usr/src/file.c ,
.Cn %dir%
is
.BR /usr/src .
.LI \f3%name%\fP
The filename of the file.
For example, for
.BR /usr/src/file.c ,
.Cn %name%
is
.BR file.c .
.LI \f3%suffix%\fP
The suffix of the file.
For example, for
.BR /usr/src/file.c ,
.Cn %suffix%
is
.BR c .
.LI \f3%base%\fP
The basename of the file.
For example, for
.BR /usr/src/file.c ,
.Cn %base%
is
.BR file .
.LE
.P
Strings enclosed in backquotes (`) are
processed with the
.Fn popen
function
.xo (see \*(ZK)
and the output replaces the backquotes and string.
.br
.cde .HU "Data Attributes Format"
.xo .H 4 "Data Attributes Format"
The following pseudo-BNF describes the data attributes variable definition:
.P
.S -1
.TS
center;
lf5 1 cf5 1 lf5w(3.5i) .
DataAttributesDefn	::=	`DATA_ATTRIBUTES' \f6blanks record_name\fP
{
		\f6data_attributes_defn\fP
}
.sp
data_attributes_defn	::=	(
		`DESCRIPTION' \f6blanks string newline\fP
	|	`ICON' \f6blanks string newline\fP
	|	`INSTANCE_ICON' \f6blanks string newline\fP
	|	`PROPERTIES' \f6blanks string\fP {`,' \f6string\fP} \f6newline\fP
	|	`ACTIONS' \f6blanks name\fP {`,' \f6name\fP} \f6newline\fP
	|	`NAME_TEMPLATE' \f6blanks string newline\fP
	|	`IS_EXECUTABLE' \f6blanks string newline\fP
	|	`MOVE_TO_ACTION' \f6blanks string newline\fP
	|	`COPY_TO_ACTION' \f6blanks string newline\fP
	|	`LINK_TO_ACTION' \f6blanks string newline\fP
	|	`IS_TEXT' \f6blanks string newline\fP
	|	`MEDIA' \f6blanks string newline\fP
	|	`MIME_TYPE' \f6blanks string newline\fP
	|	`X400_TYPE' \f6blanks string newline\fP
	|	\f6unique_string blanks string newline\fP
	|	`#' \f6string newline\fP
		)
.sp 0.5v
string	::=	T{
.na
.ft 1
a character string, not including
.tK newline
T}
newline	::=	`\en'
unique_string	::=	T{
.na
.ft 1
a uniquely named string for implementation extensions
T}
blanks	::=	T{
.na
.ft 1
one or more
.tK blank s
.cde (spaces and/or tabs)
T}
.TE
.S +1
.cde .HU EXAMPLES
.xo .H 4 Examples
The following are examples of data attribute and data criteria
entries in the data typing database:
.Cs I
DATA_ATTRIBUTES C_SRC
{
        ACTIONS         Open,Make,Print
        ICON            DtdotC
        IS_TEXT         true
        NAME_TEMPLATE   %s.c
        DESCRIPTION     A C_SRC file is a source file in the C \e
                        programming language.
}
.Ce
.P
.Cs I
DATA_CRITERIA C_SRC1
{
        DATA_ATTRIBUTES_NAME C_SRC
        MODE            f
        NAME_PATTERN    *.c
}
.Ce
.P
.Cs I
DATA_ATTRIBUTES POSTSCRIPT
{
        ACTIONS         Open,Print
        ICON            Dtps
        NAME_TEMPLATE   %s.ps
        MEDIA           POSTSCRIPT
        MIME_TYPE       application/postscript
}
.Ce
.P
.Cs I
DATA_CRITERIA POSTSCRIPT1
{
        DATA_ATTRIBUTES_NAME POSTSCRIPT
        MODE            fr
        NAME_PATTERN    *.ps
}
.Ce
.cdes
.SH ERRORS
Errors encountered when loading database files are written to the
CDE errorlog file.
Records containing errors are rejected.
.SH "SEE ALSO"
.Fn dttypes 1,
.Fn DtDtsIsTrue 3,
.BR dtdtfile(4),
.BR dtactionfile(4).
.cdee
