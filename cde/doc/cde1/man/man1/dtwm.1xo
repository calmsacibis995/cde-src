.TH dtwm 1 "26 Nov 1996"
.\" CDE Common Source Format, Version 1.0.0
...\" **  (c) Copyright 1987, 1988, 1989, 1993, 1994 Hewlett-Packard Company
...\" **  (c) Copyright 1993, 1994 International Business Machines Corp.
...\" **  (c) Copyright 1993, 1994 Sun Microsystems, Inc.
...\" **  (c) Copyright 1993, 1994 Novell, Inc.
...\" **  (c) Copyright 1989,1990,1992,1993 by Open Software Foundation, Inc.
...\" **      All Rights Reserved.
...\" **
...\" **  (c) Copyright 1987, 1988 by Digital Equipment Corporation,
...\" **      Maynard, MA.  All Rights Reserved.
...\" **
.SH NAME
dtwm \- The CDE Window Manager
.HU SYNOPSIS
.yS
[ \f3options\f1 ]
.yE
.SH DESCRIPTION
The
.Cm dtwm
window manager is an X Window System window manager based upon the
OSF/Motif window
manager, \f3mwm\f1 (version 1.2.4).
It provides \f3mwm\f1 compatible 
window management functionality.
This includes functions that 
facilitate control (by the user and the programmer) of elements of window
state such as placement, size, icon/normal display, and input-focus ownership.
.P
The
.Cm dtwm
window manager is an integral part of the
CDE.
It communicates with and facilitates access
to other components in the environment, such as the Session Manager
(\c
.Cm dtsession 1)
and the Style Manager (\c
.Cm dtstyle 1).
Many
other components are started through interactions with the Front Panel.
.P
In addition,
.Cm dtwm
provides workspace management.
Workspaces
provide a way of grouping together logically related windows.
Each 
workspace is shown independent of the other workspaces so that only
those windows related to the immediate task are visible.
Workspaces give
you a tool to organize windows by task and make efficient use of screen
real estate.
.HU Options
.VL 15
.LI "\f2\-display\f1\ \f3display\f1"
This option specifies the display to use; see
.Cm X 1.
.LI "\f2\-xrm\f1\ \f3resourcestring\f1"
This option specifies a resource string to use.
.LI "\f2\-multiscreen\f1"
This option causes
.Cm dtwm
to manage all screens on the display.
Since
.Cm dtwm
does this by default, this option is of limited use.
See the \f2multiScreen\f1 resource for information on managing a
single screen.
.LI "\f2\-name\f1\ \f3name\f1"
This option causes
.Cm dtwm
to retrieve its resources using the
specified name, as in \f3name*resource\f1.
.LI "\f2\-screens\f1\ \f3name\ [name\ [...]]\f1"
This option specifies the resource names to use for the screens managed
by
.Cm dtwm .
If
.Cm dtwm
is managing a single screen, only the first name in the
list is used.
If
.Cm dtwm
is managing multiple screens, the names are assigned to the
screens in order, starting with screen 0.
Screen 0 gets the first name, screen 1 the second name, and so on.
.LE
.HU Startup
Normally, the session manager
.Cm dtsession
starts up
.Cm dtwm . 
You can alter the command line for the window manager via the
\f2wmStartupCommand\f1 resource for the session manager 
(see
.Cm dtsession 1).
Similarly, you can
affect the behavior of
.Cm dtwm
by saving resources for
.Cm dtwm
as
part of your session.
.HU Appearance
The following sections describe the basic default behaviors of windows,
icons, the icon box, input focus, and window stacking.
The appearance and
behavior of the window manager can be altered by changing the configuration
of specific resources.
Resources are defined under the heading "X DEFAULTS."
.HU Screens
By default,
.Cm dtwm
manages only the single screen specified by the
\f2\-display\f1 option or the \f2DISPLAY\f1 environment variable (by default,
screen 0).
If the \f2\-multiscreen\f1 option is specified or if the
\f2multiScreen\f1 resource is True,
.Cm dtwm
tries to manage all the
screens on the display.
.P 
When
.Cm dtwm
is managing multiple screens, the \f2\-screens\f1 option
can be used to give each screen a unique resource name.
The names are separated by blanks, for example, \f2\-screens\f1 scr0 scr1.
If there are more screens than names, resources for the remaining
screens will be retrieved using the first name.
By default, the screen number is used for the screen name.
.HU Windows
Default
.Cm dtwm
window frames have distinct components with associated 
functions:
.VL 15
.LI "\f2Title\ Area\f1"
In addition to displaying the client's title, the title area is used to
move the
window.
To move the window, place the pointer over the title area, press
button 1 and drag the window to a new location.  
By default, a wire frame is moved
during the drag to indicate the new location.
When the button is released,
the window is moved to the new location.
.LI "\f2Title\ Bar\f1"
The title bar includes the title area, the minimize button, the maximize
button, and the window menu button.
In shaped windows, such as round windows, the title bar floats above
the window.
.LI "\f2Minimize\ Button\f1"
To turn the window into an icon, click button 1 on the minimize
button (the frame box with a \f3small\f1 square in it).
.LI "\f2Maximize\ Button\f1"
To make the window fill the screen (or enlarge to the largest size allowed
by the configuration files), click button 1 on the maximize button
(the frame box with a \f3large\f1 square in it).
.LI "\f2Window\ Menu\ Button\f1"
The window menu button is the frame box with a horizontal bar in it.
To pull down the window menu, press button 1.
While pressing, drag the pointer on the menu to your selection, then
release the button when your selection is highlighted.
Pressing button 3 in the title bar or resize border handles also
posts the window menu.
Alternately, you can click button 1 to pull down the menu and keep
it posted; then position the pointer and select.
You can also post the window menu by pressing
<Shift>
<Esc>
or
<Alt>
<Space>.
Double-clicking button 1 with the pointer on the window menu button
closes the window.
.LE
.P
The following table lists the contents of the window menu.
.HU "Default Window Menu"
.br
.ne 6v
.TS
tab(@);
lf1 lf1 lf1
lf1 lf1 lw(3.25i) .

_
Selection@Accelerator@Description
_
Restore@@T{
.na
Restores the window to its size
before minimizing or maximizing.
T}
Move@@T{
.na
Allows the window to be moved
with keys or mouse.
T}
Size@@T{
.na
Allows the window to be resized.
T}
Minimize@@T{
.na
Turns the window into an icon.
T}
Maximize@@T{
.na
Makes the window fill the screen.
T}
Lower@@T{
.na
Moves window to bottom of window stack.
T}
Occupy Workspace...@@T{
.na
Display the Occupy Workspace dialog
to change the workspaces in which the
window appears.
T}
Occupy All Workspaces@@T{
.na
Put the window in all workspaces.
T}
Unoccupy Workspace@@T{
.na
Remove the window from the current
workspace if the window is in more
than one workspace.
T}
Close@Alt+F4@T{
.na
Causes client to terminate.
T}
.TE
.p
.VL 15
.LI "\f2Resize\ Border\ Handles\f1"
To change the size of a window, move the pointer over a resize border
handle (the cursor changes), press button 1, and drag the window to a
new size.
When the button is released, the window is resized.
While
dragging is being done, a rubber-band outline is displayed to indicate the
new window size.
.LI "\f2Matte\f1"
An optional matte decoration can be added between the client area and the
window frame (see the \f2matteWidth\f1 resource).
A \f2matte\f1 is not actually part 
of the window frame.
There is no functionality associated with a matte.
.LE
.HU Icons
Icons are small graphic representations of windows.
A window can be
minimized (iconified) using the minimize button on the window frame.
Icons provide a way to reduce clutter on the screen.
.P 
Pressing mouse button 1 when the pointer is over an icon
causes the icon's window menu to pop up.
Releasing the button (press +
release without moving mouse = click) causes the menu to stay posted.
The menu contains the following selections:
.P 
.HU "Icon Window Menu"
.br
.ne 6v
.TS
tab(@);
lf1 lf1 lf1
lf1 lf1 lw(3.25i) .

_
Selection@Accelerator@Description
_
Restore@@T{
.na
Opens the associated window.
T}
Move@@T{
.na
Allows the icon to be moved with keys.
T}
Size@@T{
.na
Inactive (not an option for icons).
T}
Minimize@@T{
.na
Inactive (not an option for icons).
T}
Maximize@@T{
.na
Opens the associated window and makes it fill the screen.
T}
Lower@@T{
.na
Moves icon to bottom of icon stack.
T}
Close@Alt+F4@T{
.na
Removes client from \f3dtwm\f1 management.
T}
.TE
.P 
Note that pressing button 3 over an icon also causes the
icon's window menu to pop up.
To make a menu selection, drag the pointer over
the menu and release button 3 when the desired item is highlighted.
.P 
Double-clicking button 1 on an icon invokes the \f2f.restore_and_raise\f1
function and restores the icon's associated window to its previous state.
For example, if a maximized window is iconified,
double-clicking button 1 restores it to its maximized state.  
Double-clicking button 1 on the icon box's icon opens the icon box and
allows access to the contained icons.
(In general,
double-clicking a mouse button is a quick way to perform a function.)
Pressing
<Shift>
<Esc>
or
<Menu>
(the pop-up menu key)
causes the icon window menu of the currently selected icon to pop up.
.HU "Icon Box"
When icons begin to clutter the screen, they can be packed into an icon
box.
(To use an icon box,
.Cm dtwm
must be started with the icon box
configuration already set.)
The icon box is a
.Cm dtwm
window that holds client
icons.
It includes one or more scroll bars when there are more window icons
than the icon box can show at the same time.
.P 
Icons in the icon box can be manipulated with the mouse.
The following table summarizes the behavior of this interface.
Button
actions apply whenever the pointer
is on any part of the icon.
Note that double-clicking an icon in the icon box invokes the
\f2f.restore_and_raise\f1 function.
.P
.br
.ne 6v
.TS
tab(@);
lf1 lf1 lf1
lf1 lf1 lw(3.25i) .

_
Button@Action@Description
_
Button 1@click@T{
.na
Selects the icon.
T}
Button 1@double-click@T{
.na
Normalizes (opens) the associated window.
Raises an already open window to the top of the stack.
T}
Button 1@drag@T{
.na
Moves the icon.
T}
Button 3@press@T{
.na
Causes the menu for that icon to pop up.
T}
Button 3@drag@T{
.na
Highlights items as the pointer moves across the menu.
T}
.TE
.P 
Pressing mouse button 3 when the pointer is over an icon causes
the menu for that icon to pop up.
.P
.HU "Icon Menu for the Icon Box"
.br
.ne 6v
.TS
tab(@);
lf1 lf1 lf1
lf1 lf1 lw(3.25i) .

_
Selection@Accelerator@Description
_
Restore@@T{
.na
Opens the associated window (if not already open).
T}
Move@@T{
.na
Allows the icon to be moved with keys.
T}
Size\@@T{
.na
Inactive.
T}
Minimize@@T{
.na
Inactive.
T}
Maximize@@T{
.na
Opens the associated window (if
not already open) and maximizes its size.
T}
Lower@@T{
.na
Inactive.
T}
Close@Alt+F4@T{
.na
Removes client from
\f3Cm dtwm\f1
management.
T}
.TE  
.P 
To pull down the window menu for the icon box itself,
press button 1 with the pointer
over the menu button for the
icon box.
The window menu of the icon box
differs from the window menu of a client
window: The "Close"
selection is replaced with the "PackIcons Shift+Alt+F7" selection.
When selected,
PackIcons packs the icons in the box to achieve
neat rows with no empty slots.
.P 
You can also post the window menu by pressing
<Shift>,
<Esc>
or
<Alt>
<Space>.
Pressing
<Menu>
(the pop-up menu key)
causes the
icon window menu of the currently selected icon to pop up.
.HU "Input Focus"
The
.Cm dtwm
window manager supports (by default) a keyboard input focus policy of explicit selection.
This means when a window is selected to get keyboard input, it continues to
get keyboard input until the window is withdrawn from window management,
another window is explicitly selected to get keyboard input, or the window
is iconified.
Several resources control the input focus.
The client window with the keyboard input focus has the
active window appearance with a
visually distinct window frame.
.P 
The following tables summarize the keyboard input focus selection
behavior:
.P
.br
.ne 6v
.TS
tab(@);
lf1 lf1 lf1 lf1
lf1 lf1 lf1 lw(2.25i) .

_
Button@Action@Object@Function Description
_
Button 1@press@Window / window frame@T{
.na
Keyboard focus selection.
T}
Button 1@press@Icon@T{
.na
Keyboard focus selection.
T}
.TE
.br
.ne 6v
.TS
tab(@);
lf1 lf1
lf1 lw(3.25i) .

_
Key Action@Function Description
_
[Alt][Tab]@T{
.na
Move input focus to next window in window stack
(available only in explicit focus mode).
T}
[Alt][Shift][Tab]@T{
.na
Move input focus to previous window in window stack
(available only in explicit focus mode).
T}
.TE
.HU "Window Stacking"
There are two types of window stacks:  global window stacks
and an application's local family window stack.
.P
The global stacking order of windows may be changed as a result of
setting the keyboard input focus, iconifying a window, or performing
a window manager window stacking function.
When keyboard focus policy
is explicit the default value of the \f2focusAutoRaise\f1 resource is
True.
This causes a window to be raised to the top of the stack when
it receives input focus, for example, by pressing button 1 on the title
bar.
The key actions defined in the previous table will thus raise
the window receiving focus to the top of the stack.  
.P
In pointer mode, the default value of \f2focusAutoRaise\f1 is False,
that is, the window stacking order is not changed when a window
receives keyboard input focus.
The following key actions can be used
to cycle through the global window stack.
.br
.ne 6v
.TS
tab(@);
lf1 lf1
lf1 lw(3.25i) .

_
Key Action@Function Description
_
[Alt][ESC]@T{
.na
Place top window on bottom of stack.
T}
[Alt][Shift][ESC]@T{
.na
Place bottom window on top of stack.
T}
.TE 
.P
By default, a window's icon is placed on the bottom of the
stack when the window is iconified; however, the default can be changed
by the \f2lowerOnIconify\f1 resource.
.P
Transient windows (secondary windows such a dialog boxes) stay
above their parent windows by default; however, an application's local
family stacking order may be changed to allow a transient window to be
placed below its parent top-level window.
The following arguments show
the modification of the stacking order for the \f2f.lower\f1 function.
.P
.VL 15
.LI "\f2f.lower\f1"
Lowers the transient window within the family (staying above the parent)
and lowers the family in the global window stack.
.LI "\f2f.lower\f1\ [\f2within\f1]"
Lowers the transient window within the family (staying above the parent) but 
does not lower the family in the global window stack.
.LI "\f2f.lower\f1\ [\f2freeFamily\f1]"
Lowers the window free from its family stack (below the parent), but
does not lower the family in the global window stack.
.LE
.P
The arguments \f2within\f1 and \f2freeFamily\f1 can also be used with 
\f2f.raise\f1 and \f2f.raise_lower\f1.
.HU "X Resources"
The
.Cm dtwm
command is configured from its resource database.
This database is built from the following sources.
They are listed in order of
precedence, low to high:
.P 
\f3/usr/dt/app-defaults/$LANG/Dtwm
.br
$HOME/Dtwm
.br
RESOURCE_MANAGER root window property or $HOME/.Xdefaults
.br
XENVIRONMENT variable or $HOME/.Xdefaults-\f3host\f1
.br
.Cm dtwm
command line options
.P 
The file names
.B /usr/dt/app-defaults/$LANG/Dtwm
and
.B $HOME/Dtwm
represent
customary locations for these files.
The actual location of the system-wide class resource file may depend
on the
.I XFILESEARCHPATH
environment variable and the current language
environment.
The actual location of the user-specific class resource file may depend
on the
.I XUSERFILESEARCHPATH
and
.I XAPPLRESDIR
environment variables and the
current language environment.
.P 
Entries in the resource database may refer to other resource files
for specific types of resources.
These include files that contain bitmaps, fonts, and
.Cm dtwm
specific resources such as menus and behavior specifications
(for example, button and key bindings).
.P 
\f2Dtwm\f1 is the resource class name of
.Cm dtwm
and
.Cm dtwm
is the default resource
name used by
.Cm dtwm
to look up resources.
the \f2\-screens\f1 command line option
specifies resource names, such as "dtwm_b+w" and "dtwm_color".)
In the following discussion of resource specification,
"Dtwm" and "dtwm" (and
the aliased
.Cm dtwm
resource names) can be used interchangeably,
but "dtwm" takes precedence over "Dtwm".
.P
The
.Cm dtwm
command uses the following types of resources:
.VL 15
.LI "\f3Component Appearance Resources:\f1"
These resources specify appearance attributes of
window manager user interface components.
They can be applied to the appearance of window manager menus,
feedback windows (for example, the window reconfiguration feedback window),
client window frames, and icons.
.LI "\f3General Appearance and Behavior Resources:\f1"
These resources specify
.Cm dtwm
appearance and
behavior (for example, window management policies).
They are not set separately for different
.Cm dtwm
user interface 
components.
They apply to all screens and workspaces.
.LI "\f3Screen Specific Appearance and Behavior Resources:\f1"
These resources specify the appearance and
behavior of
.Cm dtwm
elements that are settable on a per-screen
basis.
.LI "\f3Client Specific Resources:\f1"
These
.Cm dtwm
resources can be set for a particular client window or
class of client windows.
They specify client-specific icon and client window frame
appearance and behavior.
.LI "\f3Workspace Specific Resources:\f1"
These resources specify the appearance of
.Cm dtwm
elements that 
are settable on a per-workspace basis.
.LE
.P
Resource identifiers can be either a resource name (for example, foreground)
or a resource
class (for example, Foreground).
If the value of a resource is a filename and if the filename is
prefixed by "~/", then it is relative to the path contained in the
.I HOME
environment variable
(generally the user's home directory).
.HU "Component Appearance Resources"
The syntax for specifying component appearance resources that apply
to window manager icons, menus, and client window frames is
.br 
\f2Dtwm*\f3resource_id\f1
.P 
For example, \f2Dtwm*foreground\f1 is used to specify the foreground color
for
.Cm dtwm
menus, icons, client window frames, and feedback dialogs.
.P 
The syntax for specifying component appearance resources that apply
to a particular
.Cm dtwm
component is
.br
\f2Dtwm*\f1[\f2menu\f1|\f2icon\f1|\f2client\f1|\f2feedback\f1]\f2*\f3resource_id\f1
.P 
If \f3menu\f1 is specified, the resource is applied only to
.Cm dtwm
menus; if \f3icon\f1 is specified, the resource is applied to icons;
and if \f3client\f1 is specified, the resource is applied to
client window frames.
For example, \f2Dtwm*icon*foreground\f1 is used to specify the foreground color
for
.Cm dtwm
icons, \f2Dtwm*menu*foreground\f1 specifies the foreground color
for
.Cm dtwm
menus, and \f2Dtwm*client*foreground\f1 is used to specify the
foreground color for
.Cm dtwm
client window frames.
.P 
The appearance of the title area of a client window frame
(including window management buttons)
can be separately configured.
The syntax for configuring the title area of a client window frame is
.br 
\f2Dtwm*client*title*\f3resource_id\f1 
.P 
For example, \f2Dtwm*client*title*foreground\f1 specifies the foreground color
for the title area.
Defaults for title area resources are based on the values of the
corresponding client window frame resources.
.P 
The appearance of menus can be configured based on the name of the menu.
The syntax for specifying menu appearance by name is
.br 
\f2Dtwm*menu*\f3menu_name\f2*\f3resource_id\f1 
.P 
For example, \f2Dtwm*menu*my_menu*foreground\f1 specifies the foreground color
for the menu named \f2my_menu\f1.
The user can also specify resources for window manager menu components,
that is, the gadgets that comprise the menu.
These may include for example,
a menu title, title separator, one or more buttons, and separators.
If a
menu contains more than one instance of a class, such as multiple
PushButtonGadgets, the name of the first instance is "PushButtonGadget1",
the second is "PushButtonGadget2", and so on.
The following list identifies
the naming convention used for window manager menu components:
.VL
.LI \(bu
Menu Title LabelGadget \- "TitleName"
.LI \(bu
Menu Title SeparatorGadget \- "TitleSeparator"
.LI \(bu
CascadeButtonGadget \- "CascadeButtonGadget<n>"
.LI \(bu
PushButtonGadget \- "PushButtonGadget<n>"
.LI \(bu
SeparatorGadget \- "SeparatorGadget<n>"
.LE
.P
Refer to the man page for each class for a list of resources
that can be specified.
.P 
The following component appearance resources that apply to
all window manager parts can be specified:
.HU "Component Appearance Resources \- All Window Manager Parts"
.br
.ne 6v
.TS
tab(@);
lf1 lf1 lf1 lf1
lf1 lf1 lf1 lw(1.25i) .

_
Name@Class@Value Type@Default
_
background@Background@color@T{
.na
varies\(dg
T}
backgroundPixmap@BackgroundPixmap@string\(dg\(dg@T{
.na
varies\(dg
T}
bottomShadowColor@Foreground@color@T{
.na
varies\(dg
T}
bottomShadowPixmap@Foreground@string\(dg\(dg@T{
.na
varies\(dg
T}
fontList@FontList@string\(dg\(dg\(dg@T{
.na
"fixed"
T}
foreground@Foreground@color@T{
.na
varies\(dg
T}
saveUnder@SaveUnder@T/F@T{
.na
F
T}
topShadowColor@Background@color@T{
.na
varies\(dg
T}
topShadowPixmap@TopShadowPixmap@string\(dg\(dg@T{
.na
varies\(dg
T}
.TE
.sp 1
\(dgThe default is chosen based on the visual type of the screen.
.br
\(dg\(dgImage name.  See \f2XmInstallImage(3)\f1.
.br
\(dg\(dg\(dgX11 X Logical Font Description
.sp 1
.VL 15
.LI "\f2background\f1\ (class\ \f2Background\f1)"
This resource specifies the background color.
Any legal X color may be
specified.
The default value is chosen based on the visual type of the screen.
.LI "\f2backgroundPixmap\f1\ (class\ \f2BackgroundPixmap\f1)"
This resource specifies the background Pixmap of the
.Cm dtwm
decoration
when the window is inactive (does not have the keyboard focus).
The default value is chosen based on the visual type of the screen.
.LI "\f2bottomShadowColor\f1\ (class\ \f2Foreground\f1)"
This resource specifies the bottom shadow color.
This color is used for the
lower and right bevels of the window manager decoration.
Any legal X color may be specified.
The default value is chosen based on
the visual type of the screen.
.LI "\f2bottomShadowPixmap\f1\ (class\ \f2BottomShadowPixmap\f1)"
This resource specifies the bottom shadow Pixmap.
This Pixmap is used for the lower and right bevels of the window
manager decoration.
The default is chosen based on the visual type of the screen.
.LI "\f2fontList\f1\ (class\ \f2FontList\f1)"
This resource specifies the font used in the window manager decoration.
The character encoding of the
font should match the character encoding of the strings that are used.
The default is "fixed."
.LI "\f2foreground\f1\ (class\ \f2Foreground\f1)"
This resource specifies the foreground color.
The default is chosen based on the visual type of the screen.
.LI "\f2saveUnder\f1\ (class\ \f2SaveUnder\f1)"
This is used to indicate whether "save unders"
are used for
.Cm dtwm
components.
For this to
have any effect, save unders must
be implemented by the X server.
If save unders are implemented, the X
server saves the contents of windows obscured by windows that have the
save under attribute set.
If the
.I saveUnder
resource is
True,
.Cm dtwm
will set the save under attribute on the window manager frame
of any client that has it set.
If
.I saveUnder
is False, save unders will
not be used on any window manager frames.
The default value is False.
.LI "\f2topShadowColor\f1\ (class\ \f2Background\f1)"
This resource specifies the top shadow color.
This color is used for the
upper and left bevels of the window manager decoration.
The default is chosen based on the visual type of the screen.
.LI "\f2topShadowPixmap\ (\f1\ class\ \f2TopShadowPixmap)\f1"
This resource specifies the top shadow Pixmap.
This Pixmap is used for the
upper and left bevels of the window manager decoration.
The default is chosen based on the visual type of the screen.
.LE
.P
The following component appearance resources that apply to frame and
icons can be specified:
.HU "Frame and Icon Components"
.br
.ne 6v
.TS
tab(@);
lf1 lf1 lf1 lf1
lf1 lf1 lf1 lw(1.25i) .

_
Name@Class@Value Type@Default
_
activeBackground@Background@color@T{
.na
varies\(dg
T}
activeBackgroundPixmap@BackgroundPixmap@string\(dg\(dg@T{
.na
varies\(dg
T}
activeBottomShadowColor@Foreground@color@T{
.na
varies\(dg
T}
activeBottomShadowPixmap@BottomShadowPixmap@string\(dg\(dg@T{
.na
varies\(dg
T}
activeForeground@Foreground@color@T{
.na
varies\(dg
T}
activeTopShadowColor@Background@color@T{
.na
varies\(dg
T}
activeTopShadowPixmap@TopShadowPixmap@string\(dg\(dg@T{
.na
varies\(dg
T}
.TE
.sp 1
\(dgThe default is chosen based on the visual type of the screen.
.br
\(dg\(dgSee \f2XmInstallImage(3)\f1.
.P 
.VL 15
.LI "\f2activeBackground\f1\ (class\ \f2Background\f1)"
This resource specifies the background color of the
.Cm dtwm
decoration
when the window is active (has the keyboard focus).
The default is chosen
based on the visual type of the screen.
.LI "\f2activeBackgroundPixmap\f1\ (class\ \f2ActiveBackgroundPixmap\f1)"
This resource specifies the background Pixmap of the
.Cm dtwm
decoration
when the window is active (has the keyboard focus).
The default is chosen
based on the visual type of the screen.
.LI "\f2activeBottomShadowColor\f1\ (class\ \f2Foreground\f1)"
This resource specifies the bottom shadow color of the
.Cm dtwm
decoration
when the window is active (has the keyboard focus).
The default is chosen
based on the visual type of the screen.
.LI "\f2activeBottomShadowPixmap\f1\ (class\ \f2BottomShadowPixmap\f1)"
This resource specifies the bottom shadow Pixmap of the
.Cm dtwm
decoration
when the window is active (has the keyboard focus).
The default is chosen
based on the visual type of the screen.
.LI "\f2activeForeground\f1\ (class\ \f2Foreground\f1)"
This resource specifies the foreground color of the
.Cm dtwm
decoration
when the window is active (has the keyboard focus).
The default is chosen
based on the visual type of the screen.
.LI "\f2activeTopShadowColor\f1\ (class\ \f2Background\f1)"
This resource specifies the top shadow color of the
.Cm dtwm
decoration
when the window is active (has the keyboard focus).
The default is chosen
based on the visual type of the screen.
.LI "\f2activeTopShadowPixmap\f1\ (class\ \f2TopShadowPixmap\f1)"
This resource specifies the top shadow Pixmap of the
.Cm dtwm
decoration
when the window is active (has the keyboard focus).
The default is chosen
based on the visual type of the screen.
.LE
.HU "General Appearance and Behavior Resources"
The syntax for specifying general appearance and behavior
resources is
.br 
\f2Dtwm*\f3resource_id\f1
.P 
For example, \f2Dtwm*keyboardFocusPolicy\f1 specifies the window
manager policy for setting the keyboard focus to a particular client
window.
.P
The following general appearance and behavior resources can be
specified:
.HU "General Appearance and Behavior Resources"
.br
.ne 6v
.TS
tab(@);
lf1 lf1 lf1 lf1
lf1 lf1 lf1 lf1 .

_
Name@Class@Value Type@Default
_
autoKeyFocus@AutoKeyFocus@T/F@T
autoRaiseDelay@AutoRaiseDelay@millisec@500
bitmap-@Bitmap-@directory@/usr/include-
Directory@Directory@@/X11/bitmaps
clientAutoPlace@ClientAutoPlace@T/F@T
colormapFocus-@ColormapFocus-@string@keyboard
Policy@Policy@@
configFile@ConfigFile@file@$HOME/dtwmrc
deiconifyKeyFocus@DeiconifyKeyFocus@T/F@T
doubleClick-@DoubleClick-@millisec.@multi-click
Time@Time@@time\(dg
enableWarp@enableWarp@T/F@T
enforceKeyFocus@EnforceKeyFocus@T/F@T
frameStyle@FrameStyle@string@recessed
iconAutoPlace@IconAutoPlace@T/F@T
iconClick@IconClick@T/F@T
interactivePlacement@InteractivePlacement@T/F@T
keyboardFocus-@KeyboardFocus-@string@explicit
Policy@Policy@@
lowerOnIconify@LowerOnIconify@T/F@T
marqueeSelect-@MarqueeSelect-@pixels@0
Granularity@Granularity@@
moveThreshold@MoveThreshold@pixels@4
multiScreen@MultiScreen@T/F@T
passButtons@PassButtons@T/F@F
passSelectButton@PassSelectButton@T/F@T
positionIsFrame@PositionIsFrame@T/F@T
positionOnScreen@PositionOnScreen@T/F@T
quitTimeout@QuitTimeout@millisec.@1000
raiseKeyFocus@RaiseKeyFocus@T/F@F
refreshByClearing@RefreshByClearing@T/F@T
rootButtonClick@RootButtonClick@T/F@F
screens@Screens@string@varies
showFeedback@ShowFeedback@string@all
startupKeyFocus@StartupKeyFocus@T/F@T
useFrontPanels@useFrontPanel@T/F@T
wMenuButtonClick@WMenuButtonClick@T/F@T
wMenuButtonClick2@WMenuButtonClick2@T/F@T
.TE
.sp 1
\(dgThe resource doubleClickTime is included for backward compatibility.
Use of the Xt resource multiClickTime is preferred.
.P
.VL 15  
.LI "\f2autoKeyFocus\f1\ (class\ \f2AutoKeyFocus\f1)"
This resource is available only when the keyboard input
focus policy is explicit.
If
.I autoKeyFocus
is given a value of
True, then when a window with the keyboard input focus is withdrawn from
window management or is iconified, the focus is set to the previous window
that had the focus.
If the value given is False, there is no
automatic setting of the keyboard input focus.  
It is recommended that both \f2autoKeyFocus\f1 and \f2startupKeyFocus\f1
be True to work with tear off menus.
The default value is True.
.LI "\f2autoRaiseDelay\f1\ (class\ \f2AutoRaiseDelay\f1)"
This resource is available only when the
.I focusAutoRaise
resource is True
and the keyboard focus policy is pointer.
The
.I autoRaiseDelay
resource specifies the amount of time (in milliseconds)
that
.Cm dtwm
will wait before raising a window after it gets the keyboard focus.
The default value of this resource is 500 (ms).
.LI "\f2bitmapDirectory\f1\ (class\ \f2BitmapDirectory\f1)"
This resource identifies a directory to be searched for bitmaps
referenced by
.Cm dtwm
resources.
This directory is searched if a bitmap is specified without an absolute
pathname.
The default value for this resource is
BR /usr/include/X11/bitmaps .
The directory
.B /usr/include/X11/bitmaps
represents the
customary locations for this directory.
The actual location of this directory may vary on some systems.
If the bitmap is not found in the specified directory,
.I XBMLANGPATH
is searched.
.LI "\f2clientAutoPlace\f1\ (class\ \f2ClientAutoPlace\f1)"
This resource determines the
position of a window when the window has not been given a
program- or
user-specified
position.
With a value of True, windows are positioned with the top
left corners of the frames offset horizontally and vertically.
A value of
False causes the currently configured
position of the window to be
used.
In either case,
.Cm dtwm
will attempt to place the windows
totally on-screen.
The default value is True.
.LI "\f2colormapFocusPolicy\f1\ (class\ \f2ColormapFocusPolicy\f1)"
This resource indicates the colormap focus policy that is to be used.
If the resource value is explicit, a colormap selection action
is done on a client window to set the colormap focus to that window.
If the value is pointer, the client window containing
the pointer has the colormap focus.
If the value is keyboard, the client window that has the
keyboard input focus has the colormap focus.
The default value for this resource is keyboard.
.LI "\f2configFile\f1\ (class\ \f2ConfigFile\f1)"
The resource value is the pathname for a
.Cm dtwm
resource description file.
.sp 1
If the pathname begins with "~/",
.Cm dtwm
considers it to be relative 
to the user's home directory (as specified by the
.I HOME
environment variable).
If the
.I LANG
environment variable is set,
.Cm dtwm
looks for
\f2$HOME/$LANG\f1/\f3configFile\f1.
If that file does not exist or if
.I LANG
is not set,
.Cm dtwm
looks for
\f2$HOME\f1/\f3configFile\f1.
.sp 1
If the \f2configFile\f1 pathname does not begin with "~/" or "/",
.Cm dtwm
considers it to be relative to the current working directory.
.sp 1
If the \f2configFile\f1 resource is not specified or if that file does
not exist,
.Cm dtwm
uses several default paths to find a configuration file.
The order of the search is shown below:
.sp 1
\f3$HOME/.dt/$LANG/dtwmrc
.br
$HOME/.dt/dtwmrc
.br
/etc/dt/config/$LANG/sys.dtwmrc\(dg
.br
/etc/dt/config/sys.dtwmrc\(dg
.br
/usr/dt/config/$LANG/sys.dtwmrc\(dg
.br
/usr/dt/config/sys.dtwmrc\(dg\f1
.br
.sp 1
Paths marked with '\(dg' are implementation dependent.
.LI "\f2deiconifyKeyFocus\f1\ (class\ \f2DeiconifyKeyFocus\f1)"
This resource applies only
when the keyboard input focus policy is explicit.
If a value of
True is used, a window receives the keyboard input focus when it is
normalized (deiconified).
True is the default value.
.LI "\f2doubleClickTime\f1\ (class\ \f2DoubleClickTime\f1)"
This resource is used to set the maximum time (in ms) between the clicks
(button presses) that make up a double-click.
The use of this resource is deprecated.
Use the Xt resource
\f2multiClickTime\f1 instead.
The value of \f2doubleClickTime\f1
dynamically defaults to the value of \f2multiClickTime\f1.
.LI "\f2enableWarp\f1\ (class\ \f2EnableWarp\f1)"
The default value of this resource, True, causes
.Cm dtwm
to warp
the pointer to the center of
the selected window during keyboard-controlled resize and
move operations.
Setting the value to False causes
.Cm dtwm
to leave
the pointer at its original place on the screen, unless the
user explicitly moves it with the cursor keys or pointing device.
.LI "\f2enforceKeyFocus\f1\ (class\ \f2EnforceKeyFocus\f1)"
If this resource is given a value of True,
the keyboard input focus is always explicitly set to selected windows
even if there is an indication that they are "globally active" input
windows.
(An example of a globally active window is a scroll bar that
can be operated without setting the focus to that client.)
If the resource
is False, the keyboard input focus is not
explicitly set to globally active windows.
The default value is True.
.LI "\f2frameStyle\f1\ (class\ \f2frameStyle\f1)"
If this resource is given a value of "slab",
the the window manager frame is drawn such that the client area appears
to be at the same height as the top of the window frame.
If the resource 
is set to "recessed", the window frame is drawn such that the 
client area appears lower than the top of the window frame.
The default value is "recessed".
.LI "\f2iconAutoPlace\f1\ (class\ \f2IconAutoPlace\f1)"
This resource indicates whether the window manager arranges icons in a
particular area of the screen or places each icon where the window was
when it was iconified.
The value True indicates that icons are arranged in a particular area of
the screen, determined by the
.I iconPlacement
resource.
The value False indicates that an icon is placed at the location of the
window when it is iconified.
The default is True.
.LI "\f2iconClick\f1\ (class\ \f2IconClick\f1)"
When this resource is given the value of
True, the system menu is posted and left posted when an icon is
clicked.  
The default value is True.
.LI "\f2interactivePlacement\f1\ (class\ \f2InteractivePlacement\f1)"
This resource controls the initial placement of new windows on the screen.
If the value is True, the pointer shape changes before a new window is
placed on the screen to indicate to the user that
a position should be selected for the upper-left hand corner of the
window.
If the value is False, windows are placed according to the
initial window configuration attributes.
The default value of this resource is False.
.LI "\f2keyboardFocusPolicy\f1\ (class\ \f2KeyboardFocusPolicy\f1)"
If set to pointer, the keyboard focus policy is to have the keyboard focus set
to the client window that contains the pointer
(the pointer could also be in the client window decoration that
.Cm dtwm
adds).
If set to explicit, the policy is to have the keyboard focus
set to a client window when the user presses button 1 with the pointer
on the client window or any part of the associated
.Cm dtwm
decoration.
The default value for this resource is explicit.
.LI "\f2lowerOnIconify\f1\ (class\ \f2LowerOnIconify\f1)"
If this resource is given the default
value of True, a window's icon appears on the bottom of the window
stack when the window is minimized (iconified).
A value of False
places the icon in the stacking order at the same place as its associated
window.
The default value of this resource is True.
.LI "\f2marqueeSelectGranularity\f1\ (class\ \f2MarqueeSelectGranularity\f1)"
This resource determines how often changes in the marquee selection 
are reported to the file manager (\c
.Cm dtfile 1).
The marquee
selection is used to select file manager items that have been placed
onto the desktop.
The value of this resource is the number of pixels the
pointer must move either horizontally or vertically before another
report is made to the file manager.
A value of 0 (zero) means report every
motion of the pointer.
The default value of this resource is 0.
.LI "\f2moveThreshold\f1\ (class\ \f2MoveThreshold\f1)"
This resource is used to control the sensitivity of dragging operations
that move windows and icons.
The value of this resource is the number of pixels that the locator is
moved with a button down before the move operation is initiated.
This is used to prevent window/icon
movement when you click or
double-click and there is unintentional pointer movement with
the button down.
The default value of this resource is 4 (pixels).
.LI "\f2multiScreen\f1\ (class\ \f2MultiScreen\f1)"
This resource, if True, causes
.Cm dtwm
to manage all the screens on
the display.
If False,
.Cm dtwm
manages only a single screen.
The default value is True.
.LI "\f2passButtons\f1\ (class\ \f2PassButtons\f1)"
This resource indicates whether or not button press events are passed to
clients after they are used to do a window manager function in the client
context.
If the resource value is False, the button press is not passed
to the client.
If the value is True, the button press is passed to the
client window.
The window manager function is done in either case.
The default value for this resource is False.
.LI "\f2passSelectButton\f1\ (class\ \f2PassSelectButton\f1)"
This resource indicates whether or not to pass the select button press events
to clients after they are used to do a window manager function in the
client context.
If the resource value is False, then the button press will
not be passed to the client.
If the value is True, the button press is
passed to the client window.
The window manager function is done in either
case.
The default value for this resource is True.
.LI "\f2positionIsFrame\f1\ (class\ \f2PositionIsFrame\f1)"
This resource indicates how client window position information
(from the
.I WM_NORMAL_HINTS
property and from configuration requests)
is to be interpreted.
If the resource value is True, the information is interpreted as
the position of the
.Cm dtwm
client window frame.
If the value is False,
it is interpreted as being the position of the client area of the window.
The default value of this resource is True.
.LI "\f2positionOnScreen\f1\ (class\ \f2PositionOnScreen\f1)"
This resource is used to indicate that windows should initially be
placed (if possible) so that they are not clipped by the edge of the
screen (if the resource value is True).
If a window is larger than the size of the screen,
at least the upper-left corner of the window is on-screen.
If the resource value is False, windows are placed in the
requested position even if totally off-screen.
The default value of this resource is True.
.LI "\f2quitTimeout\f1\ (class\ \f2QuitTimeout\f1)"
This resource specifies the amount of time (in milliseconds) that
.Cm dtwm
will wait for a client to update the
.I WM_COMMAND
property after
.Cm dtwm
has
sent the
.I WM_SAVE_YOURSELF
message.
The default value of this resource is 1000 (ms).
(Refer to the
.I f.kill
function description for additional information.)
.LI "\f2raiseKeyFocus\f1\ (class\ \f2RaiseKeyFocus\f1)"
This resource is available
only when the keyboard input focus policy is explicit.
When set to True,
this resource specifies that a window raised by
means of the
.I f.normalize_and_raise
function also receives
the input focus.
The default value of this resource is False.
.LI "\f2refreshByClearing\f1\ (class\ \f2RefreshByClearing\f1)"
This resource determines the mechanism used to refresh a window (or
the screen) when the
.I f.refresh_win
(\f2f.refresh\f1) function is
executed.
When set to True, an XClearArea is performed over 
the window for \f2f.refresh_win\f1.
When set to False, a covering window
is created and destroyed over the top of the window to be refreshed.
If the function is
.I f.refresh
and this resource is set to True, then
an XClearArea is performed over every window on the screen.
If the 
resource is set to False, then one large window covering the entire 
screen is created and destroyed.
The default value of this resource is True.
.LI "\f2rootButtonClick\f1\ (class\ \f2RootButtonClick\f1)"
The
.I rootButtonClick
resource controls whether the a click on the root
window will post the root menu in a "sticky" mode.
If this 
resource is set to True, a button click 
on the root window will post the menu bound to the button down event for
that button in a "sticky" fashion.
If this resource is set to False, then 
the same button click would only cause the menu to flash as it would 
be unposted once the button up event is seen.
The criterion used to 
determine if it is a button click is if the pointer doesn't move between
the button down and button up events.
The default value for this resource is True.
.LI "\f2screens\f1\ (class\ \f2Screens\f1)"
This resource specifies the resource names to use for the screens
managed by
.Cm dtwm .
If
.Cm dtwm
is managing a single screen, only the first name in the
list is used.
If
.Cm dtwm
is managing multiple screens, the names are assigned to the
screens in order, starting with screen 0.
Screen 0 gets the first name, screen 1 the second name, and so on.
The default screen names are 0, 1, and so on.
.LI "\f2showFeedback\f1\ (class\ \f2ShowFeedback\f1)"
This resource controls whether or not feedback windows or confirmation dialogs 
are displayed.
A feedback window shows a client window's initial
placement and shows position and size during move and resize 
operations.
Confirmation dialogs can be displayed for certain operations.
.sp 1
The
value for this resource is a list of names of the feedback options to be
enabled or disabled; the names must be separated by a space.
If an option is preceded by a minus sign, that option is
excluded from the list.
The \f3sign\f1 of the first item in the list
determines the initial set of options.
If the sign of the first
option is minus,
.Cm dtwm
assumes all options are present and starts
subtracting from that set.
If the sign of the first decoration is plus (or not
specified),
.Cm dtwm
starts with no options and builds up a list from
the resource.
.LE
.sp 1
The names of the feedback options are shown below:
.br
.ne 6v
.TS
tab(@);
lf1 lf1
lf1 lw(3.25i) .

_
Name@Description
_
all@T{
.na
Show all feedback (Default value).
T}
behavior@T{
.na
Confirm behavior switch.
T}
kill@T{
.na
Confirm on receipt of KILL signal.
T}
move@T{
.na
Show position during move.
T}
none@T{
.na
Show no feedback.
T}
placement@T{
.na
Show position and size during initial placement.
T}
quit@T{
.na
Confirm quitting \f3dtwm\f1.
T}
resize@T{
.na
Show size during resize.
T}
restart@T{
.na
Confirm \f3dtwm restart\f1.
T}
.TE
.P
The following command line illustrates the syntax for showFeedback:
.Cs I
	\f2Dtwm*showFeedback: placement resize behavior restart\f1
.Ce
.P
This resource specification provides feedback for initial client
placement and
resize, and enables the dialog boxes to confirm the restart and set
behavior functions.
It disables feedback for the move function.
The default value for this resource is all.
.VL 15
.LI "\f2useFrontPanel\f1\ (class\ \f2UseFrontPanel\f1)"
This resource enables the display of the front panel if True.
If set to False, the Front Panel will not be displayed.
The default value is True.
.LI "\f2startupKeyFocus\f1\ (class\ \f2StartupKeyFocus\f1)"
This resource is available only
when the keyboard input focus policy is explicit.
When given
the default
value of True, a window gets the keyboard input focus when the window
is mapped (that is, initially managed by the window manager).
It is recommended that both \f2autoKeyFocus\f1 and \f2startupKeyFocus\f1
be True to work with tear off menus.
The default value is True.
.LI "\f2wMenuButtonClick\f1\ (class\ \f2WMenuButtonClick\f1)"
This resource
indicates whether a click of the mouse when the pointer is over
the window menu button posts and leaves posted the window
menu.
If the value given this resource is True, the menu
remains posted.
True is the default value for this
resource.
.LI "\f2wMenuButtonClick2\f1\ (class\ \f2WMenuButtonClick2\f1)"
When this resource is
given the default value of True, a double-click action on the window menu
button does an \f2f.kill function\f1.
.LE
.HU "Screen Specific Appearance and Behavior Resources"
The syntax for specifying screen specific resources is
.br 
\f2Dtwm*\f3screen_name\f2*\f3resource_id\f1
.br
For example, \f2Dtwm*1*keyBindings\f1 specifies the key bindings to use
for screen "1".
.HU "Screen Specific Resources"
.br
.ne 6v
.TS
tab(@);
lf1 lf1 lf1 lf1
lf1 lf1 lf1 w(1i) .

_
Name@Class@Value Type@Default
_
buttonBindings@ButtonBindings@string@T{
.na
DefaultButtonBindings
T}
cleanText@CleanText@T/F@T{
.na
T
T}
edgeMoveThreshold@EdgeMoveThreshold@pixels@T{
.na
0
T}
fadeNormalIcon@FadeNormalIcon@T/F@T{
.na
F
T}
feedbackGeometry@FeedbackGeometry@string@T{
.na
center on screen
T}
frameBorderWidth@FrameBorderWidth@pixels@T{
.na
varies
T}
iconBoxGeometry@IconBoxGeometry@string@T{
.na
6x1+0-0
T}
iconBoxName@IconBoxName@string@T{
.na
iconbox
T}
iconBoxSBDisplayPolicy@IconBoxSBDisplayPolicy@string@T{
.na
all
T}
iconBoxTitle@IconBoxTitle@XmString@T{
.na
Icons
T}
iconDecoration@IconDecoration@string@T{
.na
varies
T}
iconImageMaximum@IconImageMaximum@wxh@T{
.na
48x48
T}
iconImageMinimum@IconImageMinimum@wxh@T{
.na
16x16
T}
iconPlacement@IconPlacement@string@T{
.na
left bottom
T}
iconPlacementMargin@IconPlacementMargin@pixels@T{
.na
varies
T}
keyBindings@KeyBindings@string@T{
.na
DefaultKeyBindings
T}
limitResize@LimitResize@T/F@T{
.na
T
T}
maximumMaximumSize@MaximumMaximumSize@wxh (pixels)@T{
.na
2X screen w&h
T}
moveOpaque@MoveOpaque@T/F@T{
.na
F
T}
resizeBorderWidth@ResizeBorderWidth@pixels@T{
.na
varies
T}
resizeCursors@ResizeCursors@T/F@T{
.na
T
T}
transientDecoration@TransientDecoration@string@T{
.na
menu title
T}
transientFunctions@TransientFunctions@string@T{
.na
\-minimize\-maximize
T}
useIconBox@UseIconBox@T/F@T{
.na
F
T}
workspaceCount@WorkspaceCount@number@T{
.na
1
T}
.TE 
.P 
.VL 15
.LI "\f2buttonBindings\f1\ (class\ \f2ButtonBindings\f1)"
This resource identifies the set of button bindings
for window management functions.
The named set of button bindings is specified in the
.Cm dtwm
resource description file.
These button bindings are \f3merged\f1 with the built-in default
bindings.
The default value for this resource is "DefaultButtonBindings".
.LI "\f2cleanText\f1\ (class\ \f2CleanText\f1)"
This resource controls the display of window manager text in the client
title and feedback windows.
If the default value of True is used, the text is drawn with a clear (no
stipple) background.
This makes text easier to read on monochrome systems
where a backgroundPixmap is specified.
Only the stippling in the area
immediately around the text is cleared.
If False, the text is drawn
directly on top of the existing background.
.LI "\f2edgeMoveThreshold\f1\ (class\ \f2EdgeMoveThreshold\f1)"
This resource specifies the pixel width of a threshold area
surrounding the screen.
When moving or placing a window or icon,
motion into this threshold area starting from within the screen
is suppressed
until the cumulative attempted motion would bring the affected edge
beyond the threshold.
Setting this resource to a large value ensures that windows and icons
are confined completely to the screen.
The default value is 0 pixels.
.LI "\f2fadeNormalIcon\f1\ (class\ \f2FadeNormalIcon\f1)"
If this resource is given a
value of True, an icon is grayed out whenever it has been normalized
(its window has been opened).
The default value is False.
.LI "\f2feedbackGeometry\f1\ (class\ \f2FeedbackGeometry\f1)"
This resource sets the position of the move and resize feedback window.
If this resource is not specified, the default is to place the feedback
window at the center of the screen.
The value of the resource is a standard window geometry string with the
following syntax:
.sp 1
[\f2=\f1]{\f2+-\f1}\f3xoffset\f1{\f2+-\f1}\f3yoffset\f1]
.sp 1
.LI "\f2frameBorderWidth\f1\ (class\ \f2FrameBorderWidth\f1)"
This resource specifies
the width (in pixels) of a client window frame border without resize
handles.
The border width includes the 3-D shadows.  
The default value is based on the size and resolution of the screen.
.LI "\f2iconBoxGeometry\f1\ (class\ \f2IconBoxGeometry\f1)"
This resource indicates the
initial position and size of the icon box.
The value of the resource is a
standard window geometry string with the following syntax:
.sp 1
[\f2=\f1][\f3width\f1\f2x\f1\f3height\f1][{\f2+-\f1}\f3xoffset\f1{\f2+-\f1}\f3yoffset\f1]
.sp 1
If the offsets are not provided, the iconPlacement policy is used to
determine the initial placement.
The units for width and
height are columns and rows.
.sp 1
The actual screen size of the icon box window depends on the
iconImageMaximum (size) and \f2iconDecoration\f1
resources.
The
default value for size is (6 * iconWidth + padding) wide by (1 * iconHeight
+ padding) high.
The default value of the location is +0 -0.
.LI "\f2iconBoxName\f1\ (class\ \f2IconBoxName\f1)"
This resource specifies the name
that is used to look up icon box resources.
The default name is
iconbox.
.LI "\f2iconBoxSBDisplayPolicy\f1\ (class\ \f2IconBoxSBDisplayPolicy\f1)"
This resource specifies the scroll bar display policy of
the window manager in the icon box.
The resource
has three possible values:  all, vertical, and horizontal.
The default value, "all", causes both vertical
and horizontal scroll bars always to appear.
The value "vertical" causes a single vertical scroll bar to appear
in the icon box and sets the orientation of the icon box to
horizontal (regardless of the iconBoxGeometry specification).
The value "horizontal" causes
a single horizontal scroll bar to appear
in the icon box and sets the orientation of the icon box to
vertical (regardless of the iconBoxGeometry specification).
.LI "\f2iconBoxTitle\f1\ (class\ \f2IconBoxTitle\f1)"
This resource specifies the name
that is used in the title area of the icon box frame.
The default value is
Icons.
.LI "\f2iconDecoration\f1\ (class\ \f2IconDecoration\f1)"
This resource specifies the general icon decoration.
The resource value is label (only the label part is displayed)
or image (only the image part is displayed) or label image
(both the label and image parts are displayed).
A value of activelabel can also be specified to get a label
(not truncated to the width of the icon)
when the icon is selected.
The default icon decoration for icon box icons is that each icon has a
label part and an image part (label image).
The default icon decoration for stand alone icons is that each icon has an
active label part, a label part, and
an image part (activelabel label image).
.LI "\f2iconImageMaximum\f1\ (class\ \f2IconImageMaximum\f1)"
This resource specifies the maximum size of the icon image.
The resource value is \f3width\f1\f2x\f1\f3height\f1 (for example, 64x64).
The maximum supported size is 128x128.
The default value of this resource is 50x50.
.LI "\f2iconImageMinimum\f1\ (class\ \f2IconImageMinimum\f1)"
This resource specifies the minimum size of the icon image.
The resource value is \f3width\f1\f2x\f1\f3height\f1 (for example, 32x50).
The minimum supported size is 16x16.
The default value of this resource is 16x16.
.LI "\f2iconPlacement\f1\ (class\ \f2IconPlacement\f1)"
This resource specifies the icon placement scheme to be used.
The resource value has the following syntax:
.P
\f3primary_layout  secondary_layout  [tight]\f1
.P
.LE
The layout values are one of the following:
.br
.ne 6v
.TS
tab(@);
lf1 lf1
lf1 lw(3.25i) .

_
Value@Description
_
top@T{
.na
Lay the icons out top to bottom.
T}
bottom@T{
.na
Lay the icons out bottom to top.
T}
left@T{
.na
Lay the icons out left to right.
T}
right@T{
.na
Lay the icons out right to left.
T}
.TE
.sp 1
A horizontal (vertical) layout value should not be used for both the
\f3primary_layout\f1 and the \f3secondary_layout\f1
(for example, don't use top for the \f3primary_layout\f1 and bottom for the
\f3secondary_layout\f1).
.P
The \f3primary_layout\f1 indicates whether, when an icon placement is done,
the icon is placed in a row or a column and the direction of placement.
The \f3secondary_layout\f1 indicates where to place new rows or columns.
For example, top right indicates that icons should be placed top to bottom
on the screen and that columns should be added from right to left on the
screen.
.P
The default placement is left bottom
(icons are placed left to right on the screen, with the first row on the
bottom of the screen, and new rows added from the bottom of the screen
to the top of the screen).
A \f3tight\f1 value places icons with zero spacing in between icons.
This
value is useful for aesthetic reasons, as well as X-terminals with small
screens.
.sp 1
.VL 15
.LI "\f2iconPlacementMargin\f1\ (class\ \f2IconPlacementMargin\f1)"
This resource sets the distance between the edge of the screen and the
icons that are placed along the edge of the screen.
The value should be greater than or equal to 0.
A default value (see below) is used if the value specified is invalid.
The default value for this resource is equal to the space between
icons as they are placed on the screen (this space is based on maximizing
the number of icons in each row and column).
.LI "\f2keyBindings\f1\ (class\ \f2KeyBindings\f1)"
This resource identifies the set of key bindings
for window management functions.
If specified,
these key bindings \f3replace\f1 the built-in
default bindings.
The named set of key bindings is specified in
.Cm dtwm
resource description file.
The default value for this resource is "DefaultKeyBindings".
.LI "\f2limitResize\f1\ (class\ \f2LimitResize\f1)"
If this resource is True, the user is not allowed to resize a window
to greater than the maximum size.
The default value for this resource is True.
.LI "\f2maximumMaximumSize\f1\ (class\ \f2MaximumMaximumSize\f1)"
This resource is used to limit the maximum size of a client window
as set by the user or client.
The resource value is \f3width\f1\f2x\f1\f3height\f1 (for example, 1024x1024)
where the width and height are in pixels.
The default value of this resource is twice the screen width and height.
.LI "\f2moveOpaque\f1\ (class\ \f2MoveOpaque\f1)"
This resource controls whether the actual window is moved or a
rectangular outline of the window is moved.
A default value of False
displays a rectangular outline on moves.
.LI "\f2resizeBorderWidth\f1\ (class\ \f2ResizeBorderWidth\f1)"
This resource specifies the width (in pixels) of a client window frame
border with resize handles.
The specified border width includes the 3-D
shadows.
The default value is based on the size and resolution of the screen.
.LI "\f2resizeCursors\f1\ (class\ \f2ResizeCursors\f1)"
This is used to indicate whether the resize cursors are always displayed
when the pointer is in the window size border.
If True, the cursors are shown, otherwise the window manager cursor is
shown.
The default value is True.
.LI "\f2transientDecoration\f1\ (class\ \f2TransientDecoration\f1)"
This controls the amount of decoration that
.Cm dtwm
puts on transient
windows.
The decoration specification is exactly the same as for the
\f2clientDecoration\f1 (client specific) resource.
Transient windows are identified by the
.I WM_TRANSIENT_FOR
property, which
is added by the client to indicate a relatively temporary window.
The default value for this resource is menu title (that is, transient
windows have frame borders and a titlebar with a window menu button).
.P
An application can also specify which decorations
.Cm dtwm
should apply
to its windows.
If it does so,
.Cm dtwm
applies only those decorations indicated by
both the application and the \f2transientDecoration\f1 resource.
Otherwise,
.Cm dtwm
applies the decorations indicated by the
\f2transientDecoration\f1 resource.
For more information see the description of \f2XmNmwmDecorations\f1 on
the \f2VendorShell(3)\f1 reference page.
.LI "\f2transientFunctions\f1\ (class\ \f2TransientFunctions\f1)"
This resource is used to indicate which window management functions are
applicable (or not applicable) to transient windows.
The function specification is exactly the same as for the
\f2clientFunctions\f1 (client specific) resource.
The default value for this resource is -minimize -maximize.
.P
An application can also specify which functions
.Cm dtwm
should apply
to its windows.
If it does so,
.Cm dtwm
applies only those functions indicated by both
the application and the \f2transientFunctions\f1 resource.
Otherwise,
.Cm dtwm
applies the functions indicated by the
\f2transientFunctions\f1 resource.
For more information see the description of \f2XmNmwmFunctions\f1 on
the \f2VendorShell(3)\f1 reference page.
.LI "\f2useIconBox\f1\ (class\ \f2UseIconBox\f1)"
If this resource is given a value of
True, icons are placed in an icon box.
When an icon box is not used,
the icons are placed on the root window (default value).
.LI "\f2workspaceCount\f1\ (class\ \f2WorkspaceCount\f1)"
This is the initial number of workpaces that
.Cm dtwm 
reates
when starting up. In the CDE, this
resource should only appear in an applications defaults files. 
This resource is saved as part of a user's session when
.Cm dtwm
shuts down.
The user may add or delete workspaces dynamically from 
the front panel during the session and this resource records the
number of workspaces for the session.
.P
The default value of this resource is 1.
.LE
.HU "Client Specific Resources"
The syntax for specifying client specific resources is
.P
\f2Dtwm*\f3client_name_or_class\f2*\f3resource_id\f1
.P
For example, \f2Dtwm*mterm*windowMenu\f1 is used to specify the window menu to
be used with mterm clients.
The syntax for specifying client specific resources for
all classes of clients is
.P
\f2Dtwm*\f3resource_id\f1
.P
Specific client specifications take precedence over the specifications
for all clients.
For example, \f2Dtwm*windowMenu\f1 is used to specify the window menu to
be used for all classes of clients that don't have a window
menu specified.
.P
The syntax for specifying resource values for windows that have an
unknown name and class (that is, windows that do not have a
.I WM_CLASS
property associated with them) is
.P
\f2Dtwm*defaults*\f3resource_id\f1
.P
For example, \f2Dtwm*defaults*iconImage\f1 is used to specify the icon image
to be used for windows that have an unknown name and class.
.P
The following client specific resources can be specified:
.HU "Client Specific Resources"
.br
.ne 6v
.TS
tab(@);
lf1 lf1 lf1 lf1
lf1 lf1 lf1 lf1 .

_
Name@Class@Value Type@Default
_
clientDecoration@ClientDecoration@string@all.
clientFunctions@ClientFunctions@string@all.
focusAutoRaise@FocusAutoRaise@T/F@varies
iconImage@IconImage@pathname@(image)
iconImage-@Background@color@icon background
Background@@@
iconImageBottom-@Foreground@color@icon
ShadowColor@@@bottom shadow
iconImageBottom-@BottomShadow-@color@icon bottom
ShadowPixmap@Pixmap@@shadow pixmap
iconImageForeground@Foreground@color@varies
iconImageTopShadowColor@Background@color@icon top
@@@shadow color
iconImageTop-@TopShadowPixmap@color@icon top
ShadowPixmap@@@shadow pixmap
matteBackground@Background@color@background
matteBottom-@Foreground@color@bottom
ShadowColor@@@shadow color
matteBottom-@BottomShadow-@color@bottom
ShadowPixmap@Pixmap@@shadow pixmap
matteForeground@Foreground@color@foreground
matteTopShadowColor@Background@color@top
@@@shadow color
matteTopShadowPixmap@TopShadowPixmap@color@top
@@@shadow pixmap
matteWidth@MatteWidth@pixels@0
maximumClientSize@MaximumClientSize@wxh 
@@vertical horizontal@fill the screen
useClientIcon@UseClientIcon@T/F@T
usePPosition@UsePPosition@string@nonzero
windowMenu@WindowMenu@string@DefaultWindowMenu
.TE
.P
.VL 15
.LI "\f2clientDecoration\f1\ (class\ \f2ClientDecoration\f1)"
This resource controls the amount of window frame decoration.
The resource is specified as a list of decorations to specify their
inclusion in the frame.
If a decoration is preceded by a minus sign, that decoration is excluded
from the frame.
The \f3sign\f1 of the first item in the list determines the initial
amount of decoration.
If the sign of the first decoration is minus,
.Cm dtwm
assumes all
decorations are present and starts subtracting from that set.
If the sign of the first decoration is plus (or not specified), then
.Cm dtwm
starts with no decoration and builds up a list from the
resource.
.P
An application can also specify which decorations
.Cm dtwm
should apply
to its windows.
If it does so,
.Cm dtwm
applies only those decorations indicated by
both the application and the \f2clientDecoration\f1 resource.
Otherwise,
.Cm dtwm
applies the decorations indicated by the
\f2clientDecoration\f1 resource.
For more information see the description of \f2XmNmwmDecorations\f1 on
the
.Fn VendorShell 3
reference page.
.LE
.P
.br
.ne 6v
.TS
tab(@);
lf1 lf1
lf1 lw(3.25i) .

_
Name@Description
_
all@T{
.na
Include all decorations (default value).
T}
border@T{
.na
Window border.
T}
maximize@T{
.na
Maximize button (includes title bar).
T}
minimize@T{
.na
Minimize button (includes title bar).
T}
none@T{
.na
No decorations.
T}
resizeh@T{
.na
Border resize handles (includes border).
T}
menu@T{
.na
Window menu button (includes title bar).
T}
title@T{
.na
Title bar (includes border).
T}
.TE
.P
Examples:
.sp 1
    \f2Dtwm*XClock.clientDecoration: -resizeh -maximize\f1
.sp 1
This removes the resize handles and maximize button from
XClock windows.
.sp 1
    \f2Dtwm*XClock.clientDecoration: menu minimize border\f1
.sp 1
This does the same thing as above.
Note that either \f2menu\f1 or
\f2minimize\f1 implies \f2title\f1.
.P
.VL 15
.LI "\f2clientFunctions\f1\ (class\ \f2ClientFunctions\f1)"
This resource is used to indicate which
.Cm dtwm
functions are
applicable (or not applicable) to the client window.
The value for the resource is a list of functions.
If the first function in the list has a minus sign in front of it, then
.Cm dtwm
starts with all functions and subtracts from that set.
If the first function in the list has a plus sign in front of it, then
.Cm dtwm
starts with no functions and builds up a list.
Each function in the list must be preceded by the appropriate plus or
minus sign and separated from the next function by a space.
.P
An application can also specify which functions
.Cm dtwm
should apply
to its windows.
If it does so,
.Cm dtwm
applies only those functions indicated by both
the application and the \f2clientFunctions\f1 resource.
Otherwise,
.Cm dtwm
applies the functions indicated by the
\f2clientFunctions\f1 resource.
For more information see the description of \f2XmNmwmFunctions\f1 on the
.Fn VendorShell 3
reference page.
.LE
.P
The following table lists the functions available for this resource:
.br
.ne 6v
.TS
tab(@);
lf1 lf1
lf1 lw(3.25i) .

_
Name@Description
_
all@T{
.na
Include all functions (default value).
T}
none@T{
.na
No functions.
T}
resize@T{
.na
f.resize\(dg.
T}
move@T{
.na
f.move\(dg.
T}
minimize@T{
.na
f.minimize\(dg.
T}
maximize@T{
.na
f.maximize\(dg.
T}
close@T{
.na
f.kill\(dg.
T}
.TE
.sp 1
\(dgSee
.BR dtwmrc (4).
.P
.VL 15
.LI "\f2focusAutoRaise\f1\ (class\ \f2FocusAutoRaise\f1)"
When the value of this resource is True, clients are raised when
they get the keyboard input focus.
If
the value is False, the stacking of windows on the display is
not changed when a window gets the keyboard input focus.
The default value is True when the keyboardFocusPolicy is explicit and
False when the keyboardFocusPolicy is pointer.
.LI "\f2iconImage\f1\ (class\ \f2IconImage\f1)"
This resource can be used to specify an icon image for a client (for example,
"Dtwm*myclock*iconImage").
The resource value is a pathname for a pixmap
or bitmap file.
The value of the (client specific)
.I useClientIcon
resource is used
to determine whether or not user supplied icon images are used instead of
client supplied icon images.
The default value is to display a built-in window manager icon image.
.LI "\f2iconImageBackground\f1\ (class\ \f2Background\f1)"
This resource specifies the background color of the icon image that
is displayed in the image part of an icon.
The default value of this resource is the icon background color
(that is, specified by "Dtwm*background or Dtwm*icon*background).
.LI "\f2iconImageBottomShadowColor\f1\ (class\ \f2Foreground\f1)"
This resource specifies the bottom shadow color of the icon image that
is displayed in the image part of an icon.
The default value of this resource is the icon bottom shadow color
(that is, specified by Dtwm*icon*bottomShadowColor).
.LI "\f2iconImageBottomShadowPixmap\f1\ (class\ \f2BottomShadowPixmap\f1)"
This resource specifies the bottom shadow Pixmap of the icon image that
is displayed in the image part of an icon.
The default value of this resource is the icon bottom shadow Pixmap
(that is, specified by Dtwm*icon*bottomShadowPixmap).
.LI "\f2iconImageForeground\f1\ (class\ \f2Foreground\f1)"
This resource specifies the foreground color of the icon image that
is displayed in the image part of an icon.
The default value of this resource varies depending on the icon
background.
.LI "\f2iconImageTopShadowColor\f1\ (class\ \f2Background\f1)"
This resource specifies the top shadow color of the icon image that
is displayed in the image part of an icon.
The default value of this resource is the icon top shadow color
(that is, specified by Dtwm*icon*topShadowColor).
.LI "\f2iconImageTopShadowPixmap\f1\ (class\ \f2TopShadowPixmap\f1)"
This resource specifies the top shadow Pixmap of the icon image that
is displayed in the image part of an icon.
The default value of this resource is the icon top shadow pixmap
(that is, specified by Dtwm*icon*topShadowPixmap).
.LI "\f2matteBackground\f1\ \ (class\ \f2Background\f1)"
This resource specifies the background color of the matte, when
\f2matteWidth\f1 is positive.
The default value of this resource is the client background color
(that is, specified by "Dtwm*background or Dtwm*client*background).
.LI "\f2matteBottomShadowColor\f1\ (class\ \f2Foreground\f1)"
This resource specifies the bottom shadow color of the matte, when
\f2matteWidth\f1 is positive.
The default value of this resource is the client bottom shadow color
(that is, specified by Dtwm*bottomShadowColor or Dtwm*client*bottomShadowColor).
.LI "\f2matteBottomShadowPixmap\f1\ (class\ \f2BottomShadowPixmap\f1)"
This resource specifies the bottom shadow Pixmap of the matte, when
\f2matteWidth\f1 is positive.
The default value of this resource is the client bottom shadow pixmap
(that is, specified by
Dtwm*bottomShadowPixmap or Dtwm*client*bottomShadowPixmap).
.LI "\f2matteForeground\f1\ (class\ \f2Foreground\f1)"
This resource specifies the foreground color of the matte, when
\f2matteWidth\f1 is positive.
The default value of this resource is the client foreground color
(that is, specified by Dtwm*foreground or Dtwm*client*foreground).
.LI "\f2matteTopShadowColor\f1\ (class\ \f2Background\f1)"
This resource specifies the top shadow color of the matte, when
\f2matteWidth\f1 is positive.
The default value of this resource is the client top shadow color
(that is, specified by Dtwm*topShadowColor or Dtwm*client*topShadowColor).
.LI "\f2matteTopShadowPixmap\f1\ (class\ \f2TopShadowPixmap\f1)"
This resource specifies the top shadow pixmap of the matte, when
\f2matteWidth\f1 is positive.
The default value of this resource is the client top shadow
pixmap
(that is, specified by "Dtwm*topShadowPixmap or Dtwm*client*topShadowPixmap).
.LI "\f2matteWidth\f1\ (class\ \f2MatteWidth\f1)"
This resource specifies the width of the optional matte.
The default value is 0, which effectively disables the matte.
.LI "\f2maximumClientSize\f1\ (class\ \f2MaximumClientSize\f1)"
This resource is either a size specification or a direction that indicates
how a client window is to be maximized.
The resource value
can be specified as a size specification \f3width\f1\f2x\f1\f3height\f1.
The
width and height are interpreted in the units that the client uses (for
example, for terminal emulators this is generally characters).
Alternately,
"vertical" or "horizontal" can be specified to indicate the direction in
which the client maximizes.
.P
If this resource is not specified, the maximum size from the
.I WM_NORMAL_HINTS
property is used if set.
Otherwise the default value is the size where the client window with
window management borders fills the screen.
When the maximum client size
is not determined by the
.I maximumClientSize
resource, the
.I maximumMaximumSize
resource value is used as a constraint on the maximum size.
.LI "\f2useClientIcon\f1\ (class\ \f2UseClientIcon\f1)"
If the value given for this
resource is True, a client-supplied icon image takes precedence
over a user-supplied icon image.
The default value is True, giving the
client-supplied icon image higher precedence than the user-supplied
icon image.
.LI "\f2usePPosition\f1\ (class\ \f2UsePPosition\f1)"
This resource specifies whether Dtwm honors program specified position
\f2PPosition\f1 specified in the
.I WM_NORMAL_HINTS
property in the absence of
an user specified position.
Setting this resource to on, causes
.Cm dtwm
to always honor program specified position.
Setting this resource to off,
causes
.Cm dtwm
to always ignore program specified position.
Setting this
resource to the default value of nonzero cause
.Cm dtwm
to honor program
specified position other than (0,0).
.LI "\f2windowMenu\f1\ (class\ \f2WindowMenu\f1)"
This resource indicates the name of the menu pane that is 
posted when the window menu is popped up (usually by pressing button 1 
on the window menu button on the client window frame).
Menu panes are specified in the
.Cm dtwm
resource description file.
Window menus can be customized on a client class basis by creating 
custom menus in your
.BR dtwmrc
file (see
.BR dtwmrc (4)
and 
specifying resources to activate the custom menus.
The resources have
the form \f2Dtwm*\f1\f3client_name_or_class\f1\f2*windowMenu\f1.
The default value of this resource is DefaultWindowMenu.
.LE
.HU "Workspace Specific Resources"
The only workspace specific resource is the title of the workspace, as
seen in the label on the workspace button in the front panel.
This
should only be set in a application defaults file as the resource will
be programmatically altered when the user changes the workspace title
via the front panel.
.P
The syntax for workspace resources is:
.P
\f2Dtwm[*\f1\f3screen_name\f1\f2]*\f1\f3workspace_name\f1\f2*\f3resource_id\f1
.P
For example, \f2Dtwm*0*ws1*title\f1 is used to specify the 
title to be used in workspace "ws1" on screen "0".
.HU "Workspace Specific Resources"
.br
.ne 6v
.TS
tab(@);
lf1 lf1 lf1 lf1
lf1 lf1 lf1 lw(3.25i) .

_
Name@Class@Value Type@Default
_
title@Title@string@T{
.na
workspace name.
T}
.TE
.sp 1
.VL 15
.LI "\f2title\f1 (class \f2Title\f1)"
This resource specifies the user-visible title of the workspace.
Note
that this is different from the "name" of the workspace that is
generated programmatically and used to fetch X resources.
The title
is separate from the name so that it can contain localized
(that is,
non-ASCII) characters.
The default value for the title is the same as
the workspace name.
.LE
.HU "Backdrop Resources"
The backdrop resources may be set on a per-workspace basis.
These
resources set the backdrop image and colors (for a bitmap backdrop) to 
be used for a workspace.
.P
The syntax for backdrop resources is:
.P
\f2Dtwm[*\f1\f3screen_name\f1\f2][*\f1\f3workspace_name\f1\f2]*\f1\f3backdrop\f1\f2*\f1\f3resource_id\f1
.P
For example, \f2Dtwm*0*ws1*backdrop*image\f1 is used to specify the 
backdrop for workspace "ws1" on screen "0".
.P
Backdrop files are found in the same places as other bitmap and pixmap 
files used by
.Cm dtwm
(see the ENVIRONMENT heading in this man page).
Personal backdrop files can
be placed in
.BR $HOME/.dt/backdrops .
.P
The following resources may be used to configure backdrops.
Normally,
users do not set these resources directly.
Most of the resources default
dynamically depending on the display type.
The initial value of the
backdrop \f2image\f1 resource is obtained from an application defaults file.
The backdrop \f2image\f1 resource is programmatically altered through
interaction with the style manager (\f3dtstyle\f1) and saved as part of
a user's session. 
.P
CAUTION: Setting these resources directly will interfere with the
dynamic configuration done through the style manager.
.HU "Backdrop Resources"
.br
.ne 6v
.TS
tab(@);
lf1 lf1 lf1 lf1
lf1 lf1 lf1 lw(1i) .

_
Name@Class@Value Type@Default
_
colorSetId@ColorSetId@integer@T{
.na
varies\(dg.
T}
image@Image@string@T{
.na
"none".
T}
imageBackground@ImageBackground@pixel@T{
.na
varies\(dg.
T}
imageForeground@ImageForeground@pixel@T{
.na
varies\(dg
T}
.TE
.sp 1
\(dgThe default value depends on the display type.
.P
.VL 15
.LI "\f2colorSetId\f1\ (class\ \f2ColorSetId\f1)"
This resource specifies a color set to use for the backdrop.
This is
normally an integer from 1 to 8.
The default value of this resource is
display dependent.
.LI "\f2image\f1\ (class\ \f2Image\f1)"
This resource specifies an image to use as the backdrop.
If none is
specified, then no backdrop image will be displayed and the root window
of the screen will show through. Either a bitmap (extension \f3.bm\f1) or 
a pixmap (extension \f3.pm\f1)
file may be specified.
If the image is specified without an extension,
then a match will be attempted on a \f3.bm\f1 or \f3.pm\f1 file in an
order that
is dependent on the search path used by
.Fn XmGetPixmap 3.
.sp 1
The default value for this resource is none.
.LI "\f2imageBackground\f1\ (class\ \f2ImageBackground\f1)"
This resource specifies a color to use as the background color of the
backdrop.
If not specified, the color will default to a pixel value from
the colorSetId for this workspace.
If this resource is specified, the
pixel value will not be dynamically customizable by the style manager
\f3dtstyle\f1.
The default value for this resource is the the bottom
shadow color of the color set for this workspace or the background color
for bitonal displays.
.LI "\f2imageForeground\f1\ (class\ \f2ImageForeground\f1)"
This resource specifies a color to use as the foreground color of the
backdrop.
If not specified, the color will default to a pixel value from
the
.I colorSetId
for this workspace.
If this resource is specified, the
pixel value will not be dynamically customizable by the style manager
\f3dtstyle\f1.
The default value for this resource is the background
color of the color set for this workspace or the foreground color for
bitonal displays.
.LE
.HU "Resource Description File"
.P 
The
.Cm dtwm
resource description file is a supplementary resource file
that contains resource descriptions that are referred to by entries in
the resource manager property (see
.Cm xrdb 1
and the defaults files 
(\f3.Xdefaults\f1, \f3app-defaults/Dtwm\f1).
It contains descriptions of resources that are to be used by
.Cm dtwm ,
and that cannot be easily encoded in the defaults files
(a bitmap file is an analogous type of resource description file).
A particular
.Cm dtwm
resource description file can be selected using 
the \f2configFile\f1 resource.
.P 
The following types of resources can be described in the
.Cm dtwm
resource description file:
.VL 15
.LI "\f2Buttons\f1"
Window manager functions can be bound (associated) with button events.
.LI "\f2Keys\f1"
Window manager functions can be bound (associated) with key press events.
.LI "\f2Menus\f1"
Menu panes can be used for the window menu and other menus posted
with key bindings and button bindings.
.P
The
.Cm dtwm
resource description file is described in
.Cm dtwmrc 4.
.LE
.HU Environment
The
.Cm dtwm
window manager uses the environment variable
.I HOME
specifying the user's
home directory.
.P
The
.Cm dtwm
window manager uses the environment variable
.I LANG
specifying the
user's choice of language for the
.Cm dtwm
message catalog and
the
.Cm dtwm
resource description file.
.P
The
.Cm dtwm
window uses the environment variable
.IR XFILESEARCHPATH ,
.IR XUSERFILESEARCHPATH ,
.IR XAPPLRESDIR ,
.IR XENVIRONMENT ,
.IR LANG ,
and
.IR HOME
in
determining search paths for resource defaults files.
The
.Cm dtwm
window manager may also us
.I XBMLANGPATH
to search for bitmap files.
.P
The
.Cm dtwm
window manager uses
.I DTAPPSEARCHPATH
to search for application
configuration
information.
.I DTDATABASESEARCHPATH
is used to search for action database
definitions and front panel (\f3*.fp\f1) files.
Help files are located with
the use of
.IR DTHELPSEARCHPATH .
.I DTICONSEARCHPATH
and
.IR DTICONBMSEARCHPATH 
are used to locate bitmap and pixmap files.
.P
The
.Cm dtwm
window manager reads the \f3$HOME/.motifbind\f1 file if it
exists to install a virtual
key bindings property on the root window.
For more information on the content of the \f3\&.motifbind\f1 file, see
.FN VirtualBindings 3.
.P
The
.Cm dtwm
window manager uses the environment variable
.I MWMSHELL
(or
.IR SHELL , if
.I MWMSHELL
is not set), specifying the shell to use when executing commands via the
\f3f.exec\f1 function.
.HU Files
\f3/usr/dt/backdrops/\f1
.br
\f3/usr/dt/config/$LANG/sys.dtwmrc\f1
.br
\f3/usr/dt/config/sys.dtwmrc\f1
.br
\f3/etc/dt/backdrops/\f1
.br
\f3/etc/dt/config/$LANG/sys.dtwmrc\f1
.br
\f3/etc/dt/config/sys.dtwmrc\f1
.br
\f3/usr/dt/app-defaults/$LANG/Dtwm\f1
.br
\f3$HOME/Dtwm\f1
.br
\32$HOME/.Xdefaults\f1
.br
\f2$HOME/.dt/$LANG/dtwmrc\f1
.br
\f3$HOME/.dt/backdrops/\f1
.br
\f3$HOME/.dt/dtwmrc\f1
.br
\f3$HOME/.motifbind\f1
.HU "RELATED INFORMATION"
.Cm dtsession 1,
.br
.Cm dtstyle 1,
.br
.br dtwmrc (4),
.br
.BR dtfpfile (4),
.br
.Fn VendorShell 3,
.br
.Fn VirtualBinding 3,
.br
Cm X 1, 
.br
.Fn XmInstallImage 3,
.br
.Cm xrdb 1.








