...\" **  (c) Copyright 1993, 1994 Hewlett-Packard Company
...\" **  (c) Copyright 1993, 1994 International Business Machines Corp.
...\" **  (c) Copyright 1993, 1994 Sun Microsystems, Inc.
...\" **  (c) Copyright 1993, 1994 Unix System Labs, Inc.,
...\" **      a subsidiary of Novell, Inc.
...\" **
...\" **  (c) Copyright 1989, 1990, 1992 by Open Software Foundation, Inc.
...\" **      All Rights Reserved.
...\" **
...\" **  (c) Copyright 1987, 1988, 1989, by Hewlett-Packard Company
...\" **
...\" **  (c) Copyright 1987, 1988 by Digital Equipment Corporation,
...\" **      Maynard, MA.  All Rights Reserved.
...\" **
...\" **
.TH mwm 1X
.ds )H Hewlett-Packard Company
.ds ]W Motif Release 1.2: May 1992
.SH NAME
\fImwm\fP \- The Motif Window Manager
.SH SYNOPSIS
.nf
.sS
\fImwm\fP
[ \fBoptions\fP ]
.sE
.SH DESCRIPTION
.fi
\fImwm\fP
is an X Window System client that provides window
management functionality and some session management functionality.
It provides functions that facilitate control (by the user and the
programmer) of elements of window
state such as placement, size, icon/normal display, and input-focus ownership.
It also provides session management functions such as stopping a client.
.SS Options
.IP "\fI\-display\fP\ \fBdisplay\fP"
This option specifies the display to use; see \fBX(1)\fP.
.IP "\fI\-xrm\fP\ \fBresourcestring\fP"
This option specifies a resource string to use.
.IP "\fI\-multiscreen\fP"
This option causes \fImwm\fP to manage all screens on the display.
The default is to manage only a single screen.
.IP "\fI\-name\fP\ \fBname\fP"
This option causes \fImwm\fP to retrieve its resources using the
specified name, as in \fBname*resource\fP.
.IP "\fI\-screens\fP\ \fBname\ [name\ [...]]\fP"
This option specifies the resource names to use for the screens managed
by \fImwm\fP.
If \fImwm\fP is managing a single screen, only the first name in the
list is used.
If \fImwm\fP is managing multiple screens, the names are assigned to the
screens in order, starting with screen 0.
Screen 0 gets the first name, screen 1 the second name, and so on.
.SS Appearance
The following sections describe the basic default behaviors of windows,
icons, the icon box, input focus, and window stacking.  The appearance and
behavior of the window manager can be altered by changing the configuration
of specific resources.  Resources are defined under the heading "X DEFAULTS."
.SS Screens
By default, \fImwm\fP manages only the single screen specified by the
\fI\-display\fP option or the DISPLAY environment variable (by default,
screen 0).
If the \fI\-multiscreen\fP option is specified or if the
\fImultiScreen\fP resource is True, \fImwm\fP tries to manage all the
screens on the display.
.PP 
When \fImwm\fP is managing multiple screens, the \fI\-screens\fP option
can be used to give each screen a unique resource name.
The names are separated by blanks, for example, \fI\-screens\fP mwm0 mwm1.
If there are more screens than names, resources for the remaining
screens will be retrieved using the first name.
By default, the screen number is used for the screen name.
.nL
.ne 15
.SS Windows
Default \fImwm\fP window frames have distinct components with associated functions:
.IP "\fITitle\ Area\fP"
In addition to displaying the client's title, the title area is used to
move the
window.  To move the window, place the pointer over the title area, press
button 1 and drag the window to a new location.  
By default, a wire frame is moved
during the drag to indicate the new location.
When the button is released,
the window is moved to the new location.
.IP "\fITitle\ Bar\fP"
The title bar includes the title area, the minimize button, the maximize
button, and the window menu button.
In shaped windows, such as round windows, the title bar floats above
the window.
.IP "\fIMinimize\ Button\fP"
To turn the window into an icon, click button 1 on the minimize
button (the frame box with a \fBsmall\fP square in it).
.IP "\fIMaximize\ Button\fP"
To make the window fill the screen (or enlarge to the largest size allowed
by the configuration files), click button 1 on the maximize button
(the frame box with a \fBlarge\fP square in it).
.IP "\fIWindow\ Menu\ Button\fP"
The window menu button is the frame box with a horizontal bar in it.
To pull down the window menu, press button 1.
While pressing, drag the pointer on the menu to your selection, then
release the button when your selection is highlighted.
Pressing button 3 in the title bar or resize border handles also
posts the window menu.
Alternately, you can click button 1 to pull down the menu and keep
it posted; then position the pointer and select.
You can also post the window menu by pressing
<Shift>
<Esc>
or
<Alt>
<Space>.
Double-clicking button 1 with the pointer on the window menu button
closes the window.
The following table lists the contents of the window menu.
.PP 
.ne 3i
.sp 1
.in 0
.KS
.TS 
center;
cbss
lb lb lb
l l l.
Default Window Menu
Selection	Accelerator	Description
_
Restore	Alt+F5	T{
Restores the window to its size
.nL
before minimizing or maximizing
T}
Move	Alt+F7	T{
Allows the window to be moved
.nL
with keys or mouse
T}
Size	Alt+F8	Allows the window to be resized
Minimize	Alt+F9	Turns the window into an icon
Maximize	Alt+F10	Makes the window fill the screen
Lower	Alt+F3	T{
Moves window to bottom of window
stack
T}
Close	Alt+F4	Causes client to terminate
.TE
.KE
.in
.sp 1
.IP "\fIResize\ Border\ Handles\fP"
To change the size of a window, move the pointer over a resize border
handle (the cursor changes), press button 1, and drag the window to a
new size.  When the button is released, the window is resized.  While
dragging is being done, a rubber-band outline is displayed to indicate the
new window size.
.IP "\fIMatte\fP"
An optional matte decoration can be added between the client area and the
window frame.  A matte is not actually part of the window frame.
There is no functionality associated with a matte.
.SS Icons
Icons are small graphic representations of windows.  A window can be
minimized (iconified) using the minimize button on the window frame.
Icons provide a way to reduce clutter on the screen.
.PP 
.ne 6
Pressing mouse button 1 when the pointer is over an icon
causes the icon's window menu to pop up.  Releasing the button (press +
release without moving mouse = click) causes the menu to stay posted.
The menu contains the following selections:
.P 
.ne 2.5i
.sp 1
.in 0
.KS
.TS 
center;
cbss
lb lb lb
l l l .
Icon Window Menu
Selection	Accelerator	Description
_
Restore	Alt+F5	Opens the associated window
Move	Alt+F7	Allows the icon to be moved with keys
Size	Alt+F8	Inactive (not an option for icons)
Minimize	Alt+F9	Inactive (not an option for icons)
Maximize	Alt+F10	T{
Opens the associated window and makes it fill the screen
T}
Lower	Alt+F3	Moves icon to bottom of icon stack
Close	Alt+F4	Removes client from \fImwm\fP management
.TE
.KE
.in
.sp 1
.PP 
Note that pressing button 3 over an icon also causes the
icon's window menu to pop up.
To make a menu selection, drag the pointer over
the menu and release button 3 when the desired item is highlighted.
.PP 
Double-clicking button 1 on an icon invokes the \fIf.restore_and_raise\fP
function and restores the icon's associated window to its previous state.
For example, if a maximized window is iconified, then
double-clicking button 1 restores it to its maximized state.  
Double-clicking button 1 on the icon box's icon opens the icon box and
allows access to the contained icons.  (In general,
double-clicking a mouse button is a quick way to perform a function.)
Pressing
<Shift>
<Esc>
or
<Menu>
(the pop-up menu key)
causes the icon window menu of the currently selected icon to pop up.
.SS "Icon Box"
When icons begin to clutter the screen, they can be packed into an icon
box.  (To use an icon box, \fImwm\fP must be started with the icon box
configuration already set.)
The icon box is a \fImwm\fP window that holds client
icons.
It includes one or more scroll bars when there are more window icons
than the icon box can show at the same time.
.PP 
.ne 2i
Icons in the icon box can be manipulated with the mouse.
The following table summarizes the behavior of this interface.  Button
actions apply whenever the pointer
.ne 4
is on any part of the icon.
Note that double-clicking an icon in the icon box invokes the
\fIf.restore_and_raise\fP function.
.P 
.ne 2.5i
.sp 1
.in 0
.KS
.TS 
tab(	),center;
lb  lb
l  l.
Button Action	Description
_
Button 1 click	Selects the icon

Button 1 double-click	T{
Normalizes (opens) the associated window
.br
Raises an already open window to the top of the stack
T}

Button 1 drag	Moves the icon

Button 3 press	Causes the menu for that icon to pop up

Button 3 drag	T{
Highlights items as the pointer moves across the menu
T}
.TE
.KE
.in
.sp 1
.PP 
Pressing mouse button 3 when the pointer is over an icon causes the menu
for that icon to pop up.
.P 
.ne 3i
.wH
.in 0 
.sp 1
.in 0
.KS
.TS 
center;
cbss
lb  lb  lb
l  l  l .
Icon Menu for the Icon Box
Selection	Accelerator	Description
_
Restore	Alt+F5	Opens the associated window (if not already open)
Move	Alt+F7	Allows the icon to be moved with keys
Size\	Alt+F8	Inactive
Minimize	Alt+F9	Inactive
Maximize	Alt+F10	T{
Opens the associated window (if
not already open) and maximizes its size
T}
Lower	Alt+F3	Inactive
Close	Alt+F4	Removes client from \fImwm\fP management
.TE
.KE
.in
.sp 1
.wH
.in  
.PP 
To pull down the window menu for the icon box itself,
press button 1 with the pointer
over the menu button for the
icon box.
The window menu of the icon box
differs from the window menu of a client
window: The "Close"
selection is replaced with the "PackIcons Shift+Alt+F7" selection.
When selected,
PackIcons packs the icons in the box to achieve
neat rows with no empty slots.
.PP 
.ne 3
You can also post the window menu by pressing
<Shift>
<Esc>
or
<Alt>
<Space>.
Pressing
<Menu>
(the pop-up menu key)
causes the
icon window menu of the currently selected icon to pop up.
.SS "Input Focus"
\fImwm\fP supports (by default) a keyboard input focus policy of explicit selection.
This means when a window is selected to get keyboard input, it continues to
get keyboard input until the window is withdrawn from window management,
another window is explicitly selected to get keyboard input, or the window
is iconified.  Several resources control the input focus.
The client window with the keyboard input focus has the
active window appearance with a
visually distinct window frame.
.PP 
The following tables summarize the keyboard input focus selection
behavior:
.P 
.ne 2i
.sp 1
.in 0
.KS
.TS 
center;
lb lb lb
l l l.
Button Action	Object	Function Description
_
Button 1 press	Window / window frame	Keyboard focus selection
Button 1 press	Icon	Keyboard focus selection
.TE
.KE
.in
.sp 1
.P 
.sp 1
.in 0
.KS
.TS 
center;
lb  lb
l  l.
Key Action	Function Description
_
[Alt][Tab]	T{
Move input focus to next window in window stack
(available only in explicit focus mode)
T}
_
[Alt][Shift][Tab]	T{
Move input focus to previous window in window stack
(available only in explicit focus mode)
T}
.TE
.KE
.in
.sp 1
.SS "Window Stacking"
There are two types of window stacks:  global window stacks
and an application's local family window stack.
.P
The global stacking order of windows may be changed as a result of
setting the keyboard input focus, iconifying a window, or performing
a window manager window stacking function.  When keyboard focus policy
is explicit the default value of the \fIfocusAutoRaise\fP resource is
True.  This causes a window to be raised to the top of the stack when
it receives input focus, for example, by pressing button 1 on the title
bar.  The key actions defined in the previous table will thus raise
the window receiving focus to the top of the stack.  
.P
In pointer mode, the default value of \fIfocusAutoRaise\fP is False,
that is, the window stacking order is not changed when a window
receives keyboard input focus.  The following key actions can be used
to cycle through the global window stack.
.sp 1
.in 0
.KS
.TS 
center;
lb lb
l l.
Key Action	Function  Description
_
[Alt][ESC]	Place top window on bottom of stack 
[Alt][Shift][ESC]	Place bottom window on top of stack 
.TE 
.KE
.in
.sp 1
.P
By default, a window's icon is placed on the bottom of the
stack when the window is iconified; however, the default can be changed
by the \fIlowerOnIconify\fP resource.
.P
Transient windows (secondary windows such a dialog boxes) stay
above their parent windows by default.  However, an application's local
family stacking order may be changed to allow a transient window to be
placed below its parent top-level window.  The following parameters show
the modification of the stacking order for the \fIf.lower\fP function.
.P 
.IP "\fIf.lower\fP"
Lowers the transient window within the family (staying above the parent)
and lowers the family in the global window stack.
.IP "\fIf.lower\fP\ [\fIwithin\fP]"
Lowers the transient window within the family (staying above the parent) but 
does not lower the family in the global window stack.
.IP "\fIf.lower\fP\ [\fIfreeFamily\fP]"
Lowers the window free from its family stack (below the parent), but
does not lower the family in the global window stack.
.P
The parameters \fIwithin\fP and \fIfreeFamily\fP can also be used with 
\fIf.raise\fP and \fIf.raise_lower\fP.
.SS "X Defaults"
\fImwm\fP is configured from its resource database.
This database is built from the following sources. They are listed in order of
precedence, low to high:
.P 
.na
.wH
.in +3n 
/usr/lib/X11/app-defaults/Mwm
.nL
$HOME/Mwm
.nL
RESOURCE_MANAGER root window property or $HOME/.Xdefaults
.nL
XENVIRONMENT variable or $HOME/.Xdefaults-\fBhost\fP
.nL
\fImwm\fP command line options
.ad
.wH
.in -3n 
.P 
The file names /usr/lib/X11/app-defaults/Mwm and $HOME/Mwm represent
customary locations for these files.
The actual location of the system-wide class resource file may depend
on the XFILESEARCHPATH environment variable and the current language
environment.
The actual location of the user-specific class resource file may depend
on the XUSERFILESEARCHPATH and XAPPLRESDIR environment variables and the
current language environment.
.PP 
Entries in the resource database may refer to other resource files
for specific types of resources.
These include files that contain bitmaps, fonts, and \fImwm\fP
specific resources such as menus and behavior specifications
(for example, button and key bindings).
.PP 
\fIMwm\fP is the resource class name of \fImwm\fP
and \fImwm\fP is the default resource
name used by \fImwm\fP to look up resources.
the \fI\-screens\fP command line option
specifies resource names, such as "mwm_b+w" and "mwm_color".)
In the following discussion of resource specification,
"Mwm" and "mwm" (and
the aliased \fImwm\fP resource names) can be used interchangeably,
but "mwm" takes precedence over "Mwm".
.PP 
\fImwm\fP uses the following types of resources:
.PP 
\fBComponent Appearance Resources:\fP
.PP 
These resources specify appearance attributes of
window manager user interface components.
They can be applied to the appearance of window manager menus,
feedback windows (for example, the window reconfiguration feedback window),
client window frames, and icons.
.PP 
\fBGeneral Appearance and Behavior Resources:\fP
.PP 
These resources specify \fImwm\fP appearance and
behavior (for example, window management policies).
They are not set separately for different \fImwm\fP user interface components.
.PP 
.ne 4i
\fBClient Specific Resources:\fP
.PP 
These \fImwm\fP resources can be set for a particular client window or
class of client windows.
They specify client-specific icon and client window frame
appearance and behavior.
.PP 
.ne 6
Resource identifiers can be either a resource name (for example, foreground)
or a resource
class (for example, Foreground).
If the value of a resource is a filename and if the filename is
prefixed by "	/", then it is relative to the path contained in the HOME
environment variable
(generally the user's home directory).
.SS "Component Appearance Resources"
The syntax for specifying component appearance resources that apply
to window manager icons, menus, and client window frames is
.P 
.na
.wH
.in +5n 
\fIMwm*\fBresource_id\fP
.wH
.in -5n 
.ad
.P 
For example, \fIMwm*foreground\fP is used to specify the foreground color
for \fImwm\fP menus, icons, client window frames, and feedback dialogs.
.PP 
The syntax for specifying component appearance resources that apply
to a particular \fImwm\fP component is
.P 
.na
.wH
.in +5n 
\fIMwm*\fP[\fImenu\fP\fIicon\fP\fIclient\fP\fIfeedback\fP]\fI*\fBresource_id\fP
.wH
.in -5n 
.ad
.PP 
If \fBmenu\fP is specified, the resource is applied only to \fImwm\fP
menus; if \fBicon\fP is specified, the resource is applied to icons;
and if \fBclient\fP is specified, the resource is applied to
client window frames.
For example, \fIMwm*icon*foreground\fP is used to specify the foreground color
for \fImwm\fP icons, \fIMwm*menu*foreground\fP specifies the foreground color
for \fImwm\fP menus, and \fIMwm*client*foreground\fP is used to specify the
foreground color for \fImwm\fP client window frames.
.PP 
The appearance of the title area of a client window frame
(including window management buttons)
can be separately configured.
The syntax for configuring the title area of a client window frame is
.PP 
.wH
.in +4 
\fIMwm*client*title*\fBresource_id\fP
.wH
.in -4 
.PP 
For example, \fIMwm*client*title*foreground\fP specifies the foreground color
for the title area.
Defaults for title area resources are based on the values of the
corresponding client window frame resources.
.PP 
.ne 6
The appearance of menus can be configured based on the name of the menu.
The syntax for specifying menu appearance by name is
.PP 
.wH
.in +4 
\fIMwm*menu*\fBmenu_name\fI*\fBresource_id\fP
.wH
.in -4 
.PP 
For example, \fIMwm*menu*my_menu*foreground\fP specifies the foreground color
for the menu named \fImy_menu\fP.
The user can also specify resources for window manager menu components,
that is, the gadgets which comprise the menu.  These may include for example,
a menu title, title separator, one or more buttons, and separators.  If a
menu contains more than one instance of a class, such as multiple
PushButtonGadgets, the name of the first instance is "PushButtonGadget1",
the second is "PushButtonGadget2", and so on.  The following list identifies
the naming convention used for window manager menu components:
.TP
\(bu
Menu Title LabelGadget \- "TitleName"
.TP
\(bu
Menu Title SeparatorGadget \- "TitleSeparator"
.TP
\(bu
CascadeButtonGadget \- "CascadeButtonGadget<n>"
.TP
\(bu
PushButtonGadget \- "PushButtonGadget<n>"
.TP
\(bu
SeparatorGadget \- "SeparatorGadget<n>"
.P
Refer to the man page for each class for a list of resources
which can be specified.
.PP 
The following component appearance resources that apply to
all window manager parts can be specified:
.P 
.ne 3.5i
.wH
.in -1 
.sp 1
.in 0
.KS
.TS 
center;
cb sss
lb  lb  lb  lb
l  l  l  l.
Component Appearance Resources \- All Window Manager Parts
Name	Class	Value Type	Default
_
background	Background	color	varies\(dg
backgroundPixmap	BackgroundPixmap	string\(dg\(dg	varies\(dg
bottomShadowColor	Foreground	color	varies\(dg
bottomShadowPixmap	BottomShadowPixmap	string\(dg\(dg	varies\(dg
fontList	FontList	string\(dg\(dg\(dg	"fixed"
foreground	Foreground	color	varies\(dg
saveUnder	SaveUnder	T/F	F
topShadowColor	Background	color	varies\(dg
topShadowPixmap	TopShadowPixmap	string\(dg\(dg	varies\(dg
.TE
.KE
.in
.sp 1
.P 
\(dgThe default is chosen based on the visual type of the screen.
.nL
\(dg\(dgImage name.  See \fIXmInstallImage(3X)\fP.
.nL
\(dg\(dg\(dgX11 X Logical Font Description
.wH
.in  
.IP "\fIbackground\fP\ (class\ \fIBackground\fP)"
This resource specifies the background color. Any legal X color may be
specified.  The default value is chosen based on the visual type of the screen.
.P 
.ne 2i
.IP "\fIbackgroundPixmap\fP\ (class\ \fIBackgroundPixmap\fP)"
This resource specifies the background Pixmap of the \fImwm\fP decoration
when the window is inactive (does not have the keyboard focus).
The default value is chosen based on the visual type of the screen.
.IP "\fIbottomShadowColor\fP\ (class\ \fIForeground\fP)"
This resource specifies the bottom shadow color. This color is used for the
lower and right bevels of the window manager decoration.
Any legal X color may be specified.  The default value is chosen based on
the visual type of the screen.
.IP "\fIbottomShadowPixmap\fP\ (class\ \fIBottomShadowPixmap\fP)"
This resource specifies the bottom shadow Pixmap.
This Pixmap is used for the lower and right bevels of the window
manager decoration.
The default is chosen based on the visual type of the screen.
.IP "\fIfontList\fP\ (class\ \fIFontList\fP)"
This resource specifies the font used in the window manager decoration.
The character encoding of the
font should match the character encoding of the strings that are used.
The default is "fixed."
.IP "\fIforeground\fP\ (class\ \fIForeground\fP)"
This resource specifies the foreground color.
The default is chosen based on the visual type of the screen.
.IP "\fIsaveUnder\fP\ (class\ \fISaveUnder\fP)"
This is used to indicate whether "save unders"
are used for \fImwm\fP components.  For this to
have any effect, save unders must
be implemented by the X server.  If save unders are implemented, the X
server saves the contents of windows obscured by windows that have the
save under attribute set.  If the saveUnder resource is
True, \fImwm\fP will set the save under attribute on the window manager frame
of any client that has it set.  If saveUnder is False, save unders will
not be used on any window manager frames.  The default value is False.
.IP "\fItopShadowColor\fP\ (class\ \fIBackground\fP)"
This resource specifies the top shadow color.
This color is used for the
upper and left bevels of the window manager decoration.
The default is chosen based on the visual type of the screen.
.IP "\fItopShadowPixmap\ (\fP\ class\ \fITopShadowPixmap)\fP"
This resource specifies the top shadow Pixmap.
This Pixmap is used for the
upper and left bevels of the window manager decoration.
The default is chosen based on the visual type of the screen.
.PP 
The following component appearance resources that apply to frame and
icons can be specified:
.wH
.ps
.P 
.ne 3i
.wH
.in -4 
.sp 1
.in 0
.KS
.TS 
center;
cb sss
lb  lb  lb  lb
l  l  l  l .
Frame and Icon Components
Name	Class	Value Type	Default
_
activeBackground	Background	color	varies\(dg
activeBackgroundPixmap	BackgroundPixmap	string\(dg\(dg	varies\(dg
activeBottomShadowColor	Foreground	color	varies\(dg
activeBottomShadowPixmap	BottomShadowPixmap	string\(dg\(dg	varies\(dg
activeForeground	Foreground	color	varies\(dg
activeTopShadowColor	Background	color	varies\(dg
activeTopShadowPixmap	TopShadowPixmap	string\(dg\(dg	varies\(dg
.TE
.KE
.in
.sp 1
.P 
\(dgThe default is chosen based on the visual type of the screen.
.nL
\(dg\(dgSee \fIXmInstallImage(3X)\fP.
.P 
.wH
.in  
.IP "\fIactiveBackground\fP\ (class\ \fIBackground\fP)"
This resource specifies the background color of the \fImwm\fP decoration
when the window is active (has the keyboard focus).  The default is chosen
based on the visual type of the screen.
.IP "\fIactiveBackgroundPixmap\fP\ (class\ \fIActiveBackgroundPixmap\fP)"
This resource specifies the background Pixmap of the \fImwm\fP decoration
when the window is active (has the keyboard focus).  The default is chosen
based on the visual type of the screen.
.IP "\fIactiveBottomShadowColor\fP\ (class\ \fIForeground\fP)"
This resource specifies the bottom shadow color of the \fImwm\fP decoration
when the window is active (has the keyboard focus).  The default is chosen
based on the visual type of the screen.
.IP "\fIactiveBottomShadowPixmap\fP\ (class\ \fIBottomShadowPixmap\fP)"
This resource specifies the bottom shadow Pixmap of the \fImwm\fP decoration
when the window is active (has the keyboard focus).  The default is chosen
based on the visual type of the screen.
.IP "\fIactiveForeground\fP\ (class\ \fIForeground\fP)"
This resource specifies the foreground color of the \fImwm\fP decoration
when the window is active (has the keyboard focus).  The default is chosen
based on the visual type of the screen.
.IP "\fIactiveTopShadowColor\fP\ (class\ \fIBackground\fP)"
This resource specifies the top shadow color of the \fImwm\fP decoration
when the window is active (has the keyboard focus).  The default is chosen
based on the visual type of the screen.
.IP "\fIactiveTopShadowPixmap\fP\ (class\ \fITopShadowPixmap\fP)"
This resource specifies the top shadow Pixmap of the \fImwm\fP decoration
when the window is active (has the keyboard focus).  The default is chosen
based on the visual type of the screen.
.SS "General Appearance and Behavior Resources"
The syntax for specifying general appearance and behavior
resources is
.P 
.na
.wH
.in +5n 
\fIMwm*\fBresource_id\fP
.wH
.in -5n 
.ad
.PP 
For example, \fIMwm*keyboardFocusPolicy\fP specifies the window
manager policy for setting the keyboard focus to a particular client
window.
.PP
The following general appearance and behavior resources can be
specified:
.PP 
.wH
.in 0 
.sp 1
.in 0
.KS
.TS 
center;
cb sss
lb lb  lb  lb
l  l  l  l .
General Appearance and Behavior Resources
Name	Class	Value Type	Default
_
autoKeyFocus	AutoKeyFocus	T/F	T
autoRaiseDelay	AutoRaiseDelay	millisec	500
bitmapDirectory	BitmapDirectory	directory	T{
/usr/include/\e
.nL
X11/bitmaps
T}
buttonBindings	ButtonBindings	string	T{
"DefaultBut\e
.nL
tonBindings"
T}
cleanText	CleanText	T/F	T
clientAutoPlace	ClientAutoPlace	T/F	T
colormapFocusPolicy	ColormapFocusPolicy	string	keyboard
configFile	ConfigFile	file	.mwmrc
deiconifyKeyFocus	DeiconifyKeyFocus	T/F	T
doubleClickTime	DoubleClickTime	millisec.	T{
multi-click
.nL
time
T}
enableWarp	enableWarp	T/F	T
enforceKeyFocus	EnforceKeyFocus	T/F	T
fadeNormalIcon	FadeNormalIcon	T/F	F
feedbackGeometry	FeedbackGeometry	string	T{
center on
.nL
screen
T}
frameBorderWidth	FrameBorderWidth	pixels	varies
iconAutoPlace	IconAutoPlace	T/F	T
iconBoxGeometry	IconBoxGeometry	string	6x1+0-0
iconBoxName	IconBoxName	string	iconbox
iconBoxSBDisplayPolicy	IconBoxSBDisplayPolicy	string	all
iconBoxTitle	IconBoxTitle	XmString	Icons
iconClick	IconClick	T/F	T
iconDecoration	IconDecoration	string	varies
iconImageMaximum	IconImageMaximum	wxh	50x50
iconImageMinimum	IconImageMinimum	wxh	16x16
iconPlacement	IconPlacement	string	left bottom
iconPlacementMargin	IconPlacementMargin	pixels	varies
interactivePlacement	InteractivePlacement	T/F	F
keyBindings	KeyBindings	string	T{
"DefaultKey\e
.nL
Bindings"
T}
keyboardFocusPolicy	KeyboardFocusPolicy	string	explicit
limitResize	LimitResize	T/F	T
lowerOnIconify	LowerOnIconify	T/F	T
maximumMaximumSize	MaximumMaximumSize	wxh (pixels)	T{
2X screen
.nL
w&h
T}
moveThreshold	MoveThreshold	pixels	4
moveOpaque	MoveOpaque	T/F	F
multiScreen	MultiScreen	T/F	F
passButtons	PassButtons	T/F	F
passSelectButton	PassSelectButton	T/F	T
positionIsFrame	PositionIsFrame	T/F	T
positionOnScreen	PositionOnScreen	T/F	T
quitTimeout	QuitTimeout	millisec.	1000
raiseKeyFocus	RaiseKeyFocus	T/F	F
resizeBorderWidth	ResizeBorderWidth	pixels	varies
resizeCursors	ResizeCursors	T/F	T
screens	Screens	string	varies
showFeedback	ShowFeedback	string	all
startupKeyFocus	StartupKeyFocus	T/F	T
transientDecoration	TransientDecoration	string	T{
menu
.nL
title
T}
transientFunctions	TransientFunctions	string	T{
\-minimize
.nL
\-maximize
T}
useIconBox	UseIconBox	T/F	F
wMenuButtonClick	WMenuButtonClick	T/F	T
wMenuButtonClick2	WMenuButtonClick2	T/F	T
.TE
.KE
.in
.sp 1
.wH
.in  
.IP "\fIautoKeyFocus\fP\ (class\ \fIAutoKeyFocus\fP)"
This resource is available only when the keyboard input
focus policy is explicit.  If autoKeyFocus is given a value of
True, then when a window with the keyboard input focus is withdrawn from
window management or is iconified, the focus is set to the previous window
.ne 4
that had the focus.  If the value given is False, there is no
automatic setting of the keyboard input focus.  
It is recommended that both \fIautoKeyFocus\fP and \fIstartupKeyFocus\fP
be True to work with tear off menus.  The default value is True.
.IP "\fIautoRaiseDelay\fP\ (class\ \fIAutoRaiseDelay\fP)"
This resource is available only when the focusAutoRaise resource is True
and the keyboard focus policy is pointer.
The autoRaiseDelay resource specifies the amount of time (in milliseconds)
that \fImwm\fP
will wait before raising a window after it gets the keyboard focus.
The default value of this resource is 500 (ms).
.IP "\fIbitmapDirectory\fP\ (class\ \fIBitmapDirectory\fP)"
This resource identifies a directory to be searched for bitmaps
referenced by \fImwm\fP resources.
This directory is searched if a bitmap is specified without an absolute
pathname.
The default value for this resource is /usr/include/X11/bitmaps.
The directory /usr/include/X11/bitmaps represents the
customary locations for this directory.
The actual location of this directory may vary on some systems.
If the bitmap is not found in the specified directory, XBMLANGPATH is searched.
.IP "\fIbuttonBindings\fP\ (class\ \fIButtonBindings\fP)"
This resource identifies the set of button bindings
for window management functions.
The named set of button bindings is specified in the
\fImwm\fP resource description file.
These button bindings are \fBmerged\fP with the built-in default
bindings.
The default value for this resource is "DefaultButtonBindings".
.IP "\fIcleanText\fP\ (class\ \fICleanText\fP)"
This resource controls the display of window manager text in the client
title and feedback windows.
If the default value of True is used, the text is drawn with a clear (no
stipple) background.  This makes text easier to read on monochrome systems
where a backgroundPixmap is specified. Only the stippling in the area
immediately around the text is cleared.  If False, the text is drawn
directly on top of the existing background.
.IP "\fIclientAutoPlace\fP\ (class\ \fIClientAutoPlace\fP)"
This resource determines the
position of a window when the window has not been given a
program- or
user-specified
position.  With a value of True, windows are positioned with the top
left corners of the frames offset horizontally and vertically.  A value of
False causes the currently configured
.ne 4
position of the window to be
used.  In either case, \fImwm\fP will attempt to place the windows totally on-screen.
The default value is True.
.IP "\fIcolormapFocusPolicy\fP\ (class\ \fIColormapFocusPolicy\fP)"
This resource indicates the colormap focus policy that is to be used.
If the resource value is explicit, a colormap selection action
is done on a client window to set the colormap focus to that window.
If the value is pointer, the client window containing
the pointer has the colormap focus.
If the value is keyboard, the client window that has the
keyboard input focus has the colormap focus.
The default value for this resource is keyboard.
.IP "\fIconfigFile\fP\ (class\ \fIConfigFile\fP)"
The resource value is the pathname for an \fImwm\fP
resource description file.
.PP
If the pathname begins with "	/", \fImwm\fP considers it to be relative to the
user's home directory (as specified by the HOME environment variable).
If the LANG environment variable is set, \fImwm\fP looks for
$HOME/$LANG/\fBconfigFile\fP.
If that file does not exist or if LANG is not set, \fImwm\fP looks for
$HOME/\fBconfigFile\fP.
.PP
If the \fIconfigFile\fP pathname does not begin with 	/, \fImwm\fP considers
it to be relative to the current working directory.
.PP
If the \fIconfigFile\fP resource is not specified or if that file does
not exist, \fImwm\fP uses several default paths to find a configuration file.
If the LANG environment variable is set, \fImwm\fP looks for the
configuration file first in $HOME/$LANG/.mwmrc.
If that file does not exist or if LANG is not set, \fImwm\fP looks for
$HOME/.mwmrc.
If that file does not exist and if LANG is set, \fImwm\fP next looks for
the file system.mwmrc in the $LANG subdirectory of an
implementation-dependent directory.
(The default for this directory, if not changed by the implementation,
is /usr/lib/X11.)
If that file does not exist or if LANG is not set, \fImwm\fP looks for
the file system.mwmrc in the same implementation-dependent directory.
.IP "\fIdeiconifyKeyFocus\fP\ (class\ \fIDeiconifyKeyFocus\fP)"
This resource applies only
when the keyboard input focus policy is explicit.  If a value of
True is used, a window receives the keyboard input focus when it is
normalized (deiconified).  True is the default value.
.nL
.ne 4
.IP "\fIdoubleClickTime\fP\ (class\ \fIDoubleClickTime\fP)"
This resource is used to set the maximum time (in ms) between the clicks
(button presses) that make up a double-click.
The default value of this resource is the display's multi-click time.
.IP "\fIenableWarp\fP\ (class\ \fIEnableWarp\fP)"
The default value of this resource, True, causes \fImwm\fP to warp
the pointer to the center of
the selected window during keyboard-controlled resize and
move operations.  Setting the value to False causes \fImwm\fP to leave
the pointer at its original place on the screen, unless the
user explicitly moves it with the cursor keys or pointing device.
.IP "\fIenforceKeyFocus\fP\ (class\ \fIEnforceKeyFocus\fP)"
If this resource is given a value of True,
the keyboard input focus is always explicitly set to selected windows
even if there is an indication that they are "globally active" input
windows.  (An example of a globally active window is a scroll bar that
can be operated without setting the focus to that client.)  If the resource
is False, the keyboard input focus is not
explicitly set to globally active windows.
The default value is True.
.IP "\fIfadeNormalIcon\fP\ (class\ \fIFadeNormalIcon\fP)"
If this resource is given a
value of True, an icon is grayed out whenever it has been normalized
(its window has been opened).  The default value is False.
.IP "\fIfeedbackGeometry\fP\ (class\ \fIFeedbackGeometry\fP)"
This resource sets the position of the move and resize feedback window.
If this resource is not specified, the default is to place the feedback
window at the center of the screen.
The value of the resource is a standard window geometry string with the
following syntax:
.P 
.sp 1
.in 0
.KS
.TS 
tab(	);
l l .
	[\fI=\fP]{\fI+-\fP}\fBxoffset\fP{\fI+-\fP}\fByoffset\fP]
.TE
.KE
.in
.sp 1
.IP "\fIframeBorderWidth\fP\ (class\ \fIFrameBorderWidth\fP)"
This resource specifies
the width (in pixels) of a client window frame border without resize
handles.  The border width includes the 3-D shadows.  
The default value is based on the size and resolution of the screen.
.IP "\fIiconAutoPlace\fP\ (class\ \fIIconAutoPlace\fP)"
This resource indicates whether the window manager arranges icons in a
particular area of the screen or places each icon where the window was
when it was iconified.
The value True indicates that icons are arranged in a particular area of
the screen, determined by the iconPlacement resource.
The value False indicates that an icon is placed at the location of the
window when it is iconified.
The default is True.
.IP "\fIiconBoxGeometry\fP\ (class\ \fIIconBoxGeometry\fP)"
This resource indicates the
initial position and size of the icon box.  The value of the resource is a
standard window geometry string with the following syntax:
.P 
.sp 1
.in 0
.KS
.TS 
tab(	);
l l .
	[\fI=\fP][\fBwidth\fIx\fBheight\fP][{\fI+-\fP}\fBxoffset\fP{\fI+-\fP}\fByoffset\fP]
.TE
.KE
.in
.sp 1
.P
If the offsets are not provided, the iconPlacement policy is used to
determine the initial placement.  The units for width and
height are columns and rows.
.P
The actual screen size of the icon box window depends on the
iconImageMaximum (size) and iconDecoration resources.  The
default value for size is (6 * iconWidth + padding) wide by (1 * iconHeight
+ padding) high.  The default value of the location is +0 -0.
.IP "\fIiconBoxName\fP\ (class\ \fIIconBoxName\fP)"
This resource specifies the name
that is used to look up icon box resources.  The default name is
"iconbox".
.IP "\fIiconBoxSBDisplayPolicy\fP\ (class\ \fIIconBoxSBDisplayPolicy\fP)"
This resource specifies the scroll bar display policy of
the window manager in the icon box.
The resource
has three possible values:  all, vertical, and horizontal.
The default value, "all", causes both vertical
and horizontal scroll bars always to appear.
The value "vertical" causes a single vertical scroll bar to appear
in the icon box and sets the orientation of the icon box to
horizontal (regardless of the iconBoxGeometry specification).
The value "horizontal" causes
.ne 3
a single horizontal scroll bar to appear
in the icon box and sets the orientation of the icon box to
vertical (regardless of the iconBoxGeometry specification).
.IP "\fIiconBoxTitle\fP\ (class\ \fIIconBoxTitle\fP)"
This resource specifies the name
that is used in the title area of the icon box frame.  The default value is
"Icons".
.IP "\fIiconClick\fP\ (class\ \fIIconClick\fP)"
When this resource is given the value of
True, the system menu is posted and left posted when an icon is
clicked.  
The default value is True.
.IP "\fIiconDecoration\fP\ (class\ \fIIconDecoration\fP)"
This resource specifies the general icon decoration.
The resource value is label (only the label part is displayed)
or image (only the image part is displayed) or label image
(both the label and image parts are displayed).
A value of activelabel can also be specified to get a label
(not truncated to the width of the icon)
when the icon is selected.
The default icon decoration for icon box icons is that each icon has a
label part and an image part (label image).
The default icon decoration for stand alone icons is that each icon has an
active label part, a label part, and
an image part (activelabel label image).
.IP "\fIiconImageMaximum\fP\ (class\ \fIIconImageMaximum\fP)"
This resource specifies the maximum size of the icon \fBimage\fP.
The resource value is \fBwidth\fIx\fBheight\fP (for example, 64x64).
The maximum supported size is 128x128.
The default value of this resource is 50x50.
.IP "\fIiconImageMinimum\fP\ (class\ \fIIconImageMinimum\fP)"
This resource specifies the minimum size of the icon \fBimage\fP.
The resource value is \fBwidth\fIx\fBheight\fP (for example, 32x50).
The minimum supported size is 16x16.
The default value of this resource is 16x16.
.IP "\fIiconPlacement\fP\ (class\ \fIIconPlacement\fP)"
This resource specifies the icon placement scheme to be used.
The resource value has the following syntax:
.P 
.na
.wH
.in +5n 
\fBprimary_layout  secondary_layout  [tight]\fP
.wH
.in -5n 
.ad
.P 
The layout values are one of the following:
.P 
.ne 1.5i
.sp 1
.in 0
.KS
.TS 
center;
lb lb
l l.
Value	Description
_
top	Lay the icons out top to bottom.
bottom	Lay the icons out bottom to top.
left	Lay the icons out left to right.
right	Lay the icons out right to left.
.TE
.KE
.in
.sp 1
.PP
A horizontal (vertical) layout value should not be used for both the
\fBprimary_layout\fP and the \fBsecondary_layout\fP
(for example, don't use top for the \fBprimary_layout\fP and bottom for the
\fBsecondary_layout\fP).
The \fBprimary_layout\fP indicates whether, when an icon placement is done,
the icon is placed in a row or a column and the direction of placement.
The \fBsecondary_layout\fP indicates where to place new rows or columns.
For example, top right indicates that icons should be placed top to bottom
on the screen and that columns should be added from right to left on the
screen.
The default placement is left bottom
(icons are placed left to right on the screen, with the first row on the
bottom of the screen, and new rows added from the bottom of the screen
to the top of the screen).
A \fBtight\fP value places icons with zero spacing in between icons.  This
value is useful for aesthetic reasons, as well as X-terminals with small
screens.
.IP "\fIiconPlacementMargin\fP\ (class\ \fIIconPlacementMargin\fP)"
This resource sets the distance between the edge of the screen and the
icons that are placed along the edge of the screen.
The value should be greater than or equal to 0.
A default value (see below) is used if the value specified is invalid.
The default value for this resource is equal to the space between
icons as they are placed on the screen (this space is based on maximizing
the number of icons in each row and column).
.IP "\fIinteractivePlacement\fP\ (class\ \fIInteractivePlacement\fP)"
This resource controls the initial placement of new windows on the screen.
If the value is True, the pointer shape changes before a new window is
placed on the screen to indicate to the user that
a position should be selected for the upper-left hand corner of the
window.
If the value is False, windows are placed according to the
initial window configuration attributes.
The default value of this resource is False.
.IP "\fIkeyBindings\fP\ (class\ \fIKeyBindings\fP)"
This resource identifies the set of key bindings
for window management functions.
If specified,
these key bindings \fBreplace\fP the built-in
default bindings.
The named set of key bindings is specified in
\fImwm\fP resource description file.
The default value for this resource is "DefaultKeyBindings".
.IP "\fIkeyboardFocusPolicy\fP\ (class\ \fIKeyboardFocusPolicy\fP)"
If set to pointer, the keyboard focus policy is to have the keyboard focus set
to the client window that contains the pointer
(the pointer could also be in the client window decoration that \fImwm\fP adds).
If set to explicit, the policy is to have the keyboard focus
set to a client window when the user presses button 1 with the pointer
on the client window or any part of the associated \fImwm\fP decoration.
The default value for this resource is explicit.
.IP "\fIlimitResize\fP\ (class\ \fILimitResize\fP)"
If this resource is True, the user is not allowed to resize a window
to greater than the maximum size.
The default value for this resource is True.
.IP "\fIlowerOnIconify\fP\ (class\ \fILowerOnIconify\fP)"
If this resource is given the default
value of True, a window's icon appears on the bottom of the window
stack when the window is minimized (iconified).  A value of False
places the icon in the stacking order at the same place as its associated
window.
The default value of this resource is True.
.IP "\fImaximumMaximumSize\fP\ (class\ \fIMaximumMaximumSize\fP)"
This resource is used to limit the maximum size of a client window
as set by the user or client.
The resource value is \fBwidth\fIx\fBheight\fP (for example, 1024x1024)
where the width and height are in pixels.
The default value of this resource is twice the screen width and height.
.IP "\fImoveOpaque\fP\ (class\ \fIMoveOpaque\fP)"
This resource controls whether the actual window is moved or a
rectangular outline of the window is moved.  A default value of False
displays a rectangular outline on moves.
.IP "\fImoveThreshold\fP\ (class\ \fIMoveThreshold\fP)"
This resource is used to control the sensitivity of dragging operations
that move windows and icons.
The value of this resource is the number of pixels that the locator is
moved with a button down before the move operation is initiated.
This is used to prevent window/icon
.ne 3
movement when you click or
double-click and there is unintentional pointer movement with
the button down.
The default value of this resource is 4 (pixels).
.IP "\fImultiScreen\fP\ (class\ \fIMultiScreen\fP)"
This resource, if True, causes \fImwm\fP to manage all the screens on
the display.
If False, \fImwm\fP manages only a single screen.
The default value is False.
.IP "\fIpassButtons\fP\ (class\ \fIPassButtons\fP)"
This resource indicates whether or not button press events are passed to
clients after they are used to do a window manager function in the client
context.
If the resource value is False, the button press is not passed
to the client.
If the value is True, the button press is passed to the
client window.
The window manager function is done in either case.
The default value for this resource is False.
.IP "\fIpassSelectButton\fP\ (class\ \fIPassSelectButton\fP)"
This resource indicates whether or not to pass the select button press events
to clients after they are used to do a window manager function in the
client context.  If the resource value is False, then the button press will
not be passed to the client.  If the value is True, the button press is
passed to the client window.  The window manager function is done in either
case.  The default value for this resource is True.
.IP "\fIpositionIsFrame\fP\ (class\ \fIPositionIsFrame\fP)"
This resource indicates how client window position information
(from the WM_NORMAL_HINTS property and from configuration requests)
is to be interpreted.
If the resource value is True, the information is interpreted as
the position of the MWM client window frame.  If the value is False,
it is interpreted as being the position of the client area of the window.
The default value of this resource is True.
.IP "\fIpositionOnScreen\fP\ (class\ \fIPositionOnScreen\fP)"
This resource is used to indicate that windows should initially be
placed (if possible) so that they are not clipped by the edge of the
screen (if the resource value is True).
If a window is larger than the size of the screen,
at least the upper-left corner of the window is on-screen.
If the resource value is False, windows are placed in the
requested position even if totally off-screen.
The default value of this resource is True.
.IP "\fIquitTimeout\fP\ (class\ \fIQuitTimeout\fP)"
This resource specifies the amount of time (in milliseconds) that \fImwm\fP
will wait for a client to update the WM_COMMAND property after \fImwm\fP has
sent the WM_SAVE_YOURSELF message.
The default value of this resource is 1000 (ms). (Refer to the f.kill
function description for additional information.)
.IP "\fIraiseKeyFocus\fP\ (class\ \fIRaiseKeyFocus\fP)"
This resource is available
only when the keyboard input focus policy is explicit.
When set to True,
this resource specifies that a window raised by
means of the f.normalize_and_raise function also receives
the input focus.
The default value of this resource is False.
.IP "\fIresizeBorderWidth\fP\ (class\ \fIResizeBorderWidth\fP)"
This resource specifies the width (in pixels) of a client window frame
border with resize handles.  The specified border width includes the 3-D
shadows.
The default value is based on the size and resolution of the screen.
.IP "\fIresizeCursors\fP\ (class\ \fIResizeCursors\fP)"
This is used to indicate whether the resize cursors are always displayed
when the pointer is in the window size border.
If True, the cursors are shown, otherwise the window manager cursor is
shown.
The default value is True.
.IP "\fIscreens\fP\ (class\ \fIScreens\fP)"
This resource specifies the resource names to use for the screens
managed by \fImwm\fP.
If \fImwm\fP is managing a single screen, only the first name in the
list is used.
If \fImwm\fP is managing multiple screens, the names are assigned to the
screens in order, starting with screen 0.
Screen 0 gets the first name, screen 1 the second name, and so on.
The default screen names are 0, 1, and so on.
.nL
.ne 6
.IP "\fIshowFeedback\fP\ (class\ \fIShowFeedback\fP)"
This resource controls whether or not feedback windows or confirmation dialogs 
are displayed.  A feedback window shows a client window's initial
placement and shows position and size during move and resize 
operations.  Confirmation dialogs can be displayed for certain operations.
.PP
The
value for this resource is a list of names of the feedback options to be
enabled or disabled; the names must be separated by a space.
If an option is preceded by a minus sign, that option is
excluded from the list.
The \fBsign\fP of the first item in the list
determines the initial set of options.
If the sign of the first
option is minus, \fImwm\fP assumes all options are present and starts
subtracting from that set.
If the sign of the first decoration is plus (or not
specified), \fImwm\fP starts with no options and builds up a list from
the resource.
.PP
The names of the feedback options are shown below:
.P 
.ne 2i
.sp 1
.in 0
.KS
.TS 
center;
lB  lB
l l.
Name	Description
_
all	Show all feedback (Default value)
behavior	Confirm behavior switch
kill	Confirm on receipt of KILL signal
move	Show position during move
none	Show no feedback
placement	Show position and size during initial placement
quit	Confirm quitting \fImwm\fP
resize	Show size during resize
restart	Confirm \fImwm\fP restart
.TE
.KE
.in
.sp 1
.PP
.ne 15
The following command line illustrates the syntax for showFeedback:
.PP
.sp 1
.in 0
.KS
.TS 
tab(	);
l l .
	\fIMwm*showFeedback: placement resize behavior restart\fP
.TE
.KE
.in
.sp 1
.PP
This resource specification provides feedback for initial client
placement and
resize, and enables the dialog boxes to confirm the restart and set
behavior functions.  It disables feedback for the move function.
The default value for this resource is all.
.IP "\fIstartupKeyFocus\fP\ (class\ \fIStartupKeyFocus\fP)"
This resource is available only
when the keyboard input focus policy is explicit.  When given
the default
value of True, a window gets the keyboard input focus when the window
is mapped (that is, initially managed by the window manager).
It is recommended that both \fIautoKeyFocus\fP and \fIstartupKeyFocus\fP
be True to work with tear off menus.  The default value is True.
.IP "\fItransientDecoration\fP\ (class\ \fITransientDecoration\fP)"
This controls the amount of decoration that \fImwm\fP puts on transient
windows.
The decoration specification is exactly the same as for the
\fIclientDecoration\fP (client specific) resource.
Transient windows are identified by the WM_TRANSIENT_FOR property, which
is added by the client to indicate a relatively temporary window.
The default value for this resource is menu title (that is, transient
windows have frame borders and a titlebar with a window menu button).
.PP
An application can also specify which decorations \fImwm\fP should apply
to its windows.
If it does so, \fImwm\fP applies only those decorations indicated by
both the application and the \fItransientDecoration\fP resource.
Otherwise, \fImwm\fP applies the decorations indicated by the
\fItransientDecoration\fP resource.
For more information see the description of \fIXmNmwmDecorations\fP on
the \fIVendorShell(3X)\fP reference page.
.IP "\fItransientFunctions\fP\ (class\ \fITransientFunctions\fP)"
This resource is used to indicate which window management functions are
applicable (or not applicable) to transient windows.
The function specification is exactly the same as for the
\fIclientFunctions\fP (client specific) resource.
The default value for this resource is -minimize -maximize.
.PP
An application can also specify which functions \fImwm\fP should apply
to its windows.
If it does so, \fImwm\fP applies only those functions indicated by both
the application and the \fItransientFunctions\fP resource.
Otherwise, \fImwm\fP applies the functions indicated by the
\fItransientFunctions\fP resource.
For more information see the description of \fIXmNmwmFunctions\fP on
the \fIVendorShell(3X)\fP reference page.
.IP "\fIuseIconBox\fP\ (class\ \fIUseIconBox\fP)"
If this resource is given a value of
True, icons are placed in an icon box.  When an icon box is not used,
the icons are placed on the root window (default value).
.nL
.ne 15
.IP "\fIwMenuButtonClick\fP\ (class\ \fIWMenuButtonClick\fP)"
This resource
indicates whether a click of the mouse when the pointer is over
the window menu button posts and leaves posted the window
menu.  If the value given this resource is True, the menu
remains posted.  True is the default value for this
resource.
.IP "\fIwMenuButtonClick2\fP\ (class\ \fIWMenuButtonClick2\fP)"
When this resource is
given the default value of True, a double-click action on the window menu
button does an f.kill function.
.nL
.ne 2i
.SS "Client Specific Resources"
The syntax for specifying client specific resources is
.P 
.na
.wH
.in +5n 
\fIMwm*\fBclient_name_or_class\fI*\fBresource_id\fP
.wH
.in -5n 
.ad
.P 
For example, \fIMwm*mterm*windowMenu\fP is used to specify the window menu to
be used with mterm clients.
The syntax for specifying client specific resources for
all classes of clients is
.P 
.na
.wH
.in +5n 
\fIMwm*\fBresource_id\fP
.wH
.in -5n 
.ad
.P 
Specific client specifications take precedence over the specifications
for all clients.
For example, \fIMwm*windowMenu\fP is used to specify the window menu to
be used for all classes of clients that don't have a window
menu specified.
.P 
The syntax for specifying resource values for windows that have an
unknown name and class (that is, windows that do not have a WM_CLASS
property associated with them) is
.P 
.na
.wH
.in +5n 
\fIMwm*defaults*\fBresource_id\fP
.wH
.in -5n 
.ad
.PP 
For example, \fIMwm*defaults*iconImage\fP is used to specify the icon image
to be used for windows that have an unknown name and class.
.PP 
.ne 4
The following client specific resources can be specified:
.PP 
.wH
.in 0 
.sp 1
.in 0
.KS
.TS 
center;
cb sss
lb lb lb lb
l l l l .
Client Specific Resources
Name	Class	Value Type	Default
_
clientDecoration	ClientDecoration	string	all
clientFunctions	ClientFunctions	string	all
focusAutoRaise	FocusAutoRaise	T/F	varies
iconImage	IconImage	pathname	(image)
iconImageBackground	Background	color	T{
icon
.nL
background
T}
iconImageBottomShadowColor	Foreground	color	T{
icon bottom
.nL
shadow
T}
iconImageBottomShadowPixmap	T{
BottomShadow-
.nL
Pixmap
T}	color	T{
icon bottom
.nL
shadow
.nL
pixmap
T}
iconImageForeground	Foreground	color	varies
iconImageTopShadowColor	Background	color	T{
icon top
.nL
shadow
.nL
color
T}
iconImageTopShadowPixmap	T{
TopShadow-
.nL
Pixmap
T}	color	T{
icon top
.nL
shadow
.nL
pixmap
T}
matteBackground	Background	color	background
matteBottomShadowColor	Foreground	color	T{
bottom
.nL
shadow
.nL
color
T}
matteBottomShadowPixmap	T{
BottomShadow-
.nL
Pixmap
T}	color	T{
bottom
.nL
shadow
.nL
pixmap
T}
matteForeground	Foreground	color	foreground
matteTopShadowColor	Background	color	T{
top shadow
.nL
color
T}
matteTopShadowPixmap	T{
TopShadow-
.nL
Pixmap
T}	color	T{
top shadow
.nL
pixmap
T}
matteWidth	MatteWidth	pixels	0
maximumClientSize	MaximumClientSize	T{
wxh
.nL
vertical
.nL
horizontal
T}	T{
fill the
.nL
screen
T}
useClientIcon	UseClientIcon	T/F	F
usePPosition	UsePPosition	string	nonzero
windowMenu	WindowMenu	string	T{
"Default-
.nL
Window-
.nL
Menu"
T}
.TE
.KE
.in
.sp 1
.wH
.in  
.PP 
.IP "\fIclientDecoration\fP\ (class\ \fIClientDecoration\fP)"
This resource controls the amount of window frame decoration.
The resource is specified as a list of decorations to specify their
inclusion in the frame.
If a decoration is preceded by a minus sign, that decoration is excluded
from the frame.
The \fBsign\fP of the first item in the list determines the initial
amount of decoration.
If the sign of the first decoration is minus, \fImwm\fP assumes all
decorations are present and starts subtracting from that set.
If the sign of the first decoration is plus (or not specified), then
\fImwm\fP starts with no decoration and builds up a list from the
resource.
.PP
An application can also specify which decorations \fImwm\fP should apply
to its windows.
If it does so, \fImwm\fP applies only those decorations indicated by
both the application and the \fIclientDecoration\fP resource.
Otherwise, \fImwm\fP applies the decorations indicated by the
\fIclientDecoration\fP resource.
For more information see the description of \fIXmNmwmDecorations\fP on
the \fIVendorShell(3X)\fP reference page.
.nL
.ne 25
.sp 1
.in 0
.KS
.TS- 
center;
lb  lb
l  l.
Name	Description
_
all	Include all decorations (default value)
border	Window border
maximize	Maximize button (includes title bar)
minimize	Minimize button (includes title bar)
none	No decorations
resizeh	Border resize handles (includes border)
menu	Window menu button (includes title bar)
title	Title bar (includes border)
.TE
.KE
.in
.sp 1
.P
Examples:
.P 
    \fIMwm*XClock.clientDecoration: -resizeh -maximize\fP
.P 
This removes the resize handles and maximize button from
XClock windows.
.P 
    \fIMwm*XClock.clientDecoration: menu minimize border\fP
.P 
This does the same thing as above. Note that either \fImenu\fP or
\fIminimize\fP implies \fItitle\fP.
.IP "\fIclientFunctions\fP\ (class\ \fIClientFunctions\fP)"
This resource is used to indicate which \fImwm\fP functions are
applicable (or not applicable) to the client window.
The value for the resource is a list of functions.
If the first function in the list has a minus sign in front of it, then
\fImwm\fP starts with all functions and subtracts from that set.
If the first function in the list has a plus sign in front of it, then
\fImwm\fP starts with no functions and builds up a list.
Each function in the list must be preceded by the appropriate plus or
minus sign and separated from the next function by a space.
.PP
An application can also specify which functions \fImwm\fP should apply
to its windows.
If it does so, \fImwm\fP applies only those functions indicated by both
the application and the \fIclientFunctions\fP resource.
Otherwise, \fImwm\fP applies the functions indicated by the
\fIclientFunctions\fP resource.
For more information see the description of \fIXmNmwmFunctions\fP on the
\fIVendorShell(3X)\fP reference page.
.PP 
.ne 25
The table below lists the functions available for this resource:
.P 
.ne 2.5i
.sp 1
.in 0
.KS
.TS 
center;
lb  lb
l  l.
Name	Description
_
all	Include all functions (default value)
none	No functions
resize	f.resize
move	f.move
minimize	f.minimize
maximize	f.maximize
close	f.kill
.TE
.KE
.in
.sp 1
.P 
.ne 3i
.IP "\fIfocusAutoRaise\fP\ (class\ \fIFocusAutoRaise\fP)"
When the value of this resource is True, clients are raised when
they get the keyboard input focus.  If
the value is False,  the stacking of windows on the display is
not changed when a window gets the keyboard input focus.
The default value is True when the keyboardFocusPolicy is explicit and
False when the keyboardFocusPolicy is pointer.
.IP "\fIiconImage\fP\ (class\ \fIIconImage\fP)"
This resource can be used to specify an icon image for a client (for example,
"Mwm*myclock*iconImage").  The resource value is a pathname for a bitmap file.
The value of the (client specific) useClientIcon resource is used
to determine whether or not user supplied icon images are used instead of
client supplied icon images.
The default value is to display a built-in window manager icon image.
.IP "\fIiconImageBackground\fP\ (class\ \fIBackground\fP)"
This resource specifies the background color of the icon image that
is displayed in the image part of an icon.
The default value of this resource is the icon background color
(that is, specified by "Mwm*background or Mwm*icon*background).
.nL
.ne 15
.IP "\fIiconImageBottomShadowColor\fP\ (class\ \fIForeground\fP)"
This resource specifies the bottom shadow color of the icon image that
is displayed in the image part of an icon.
The default value of this resource is the icon bottom shadow color
(that is, specified by Mwm*icon*bottomShadowColor).
.IP "\fIiconImageBottomShadowPixmap\fP\ (class\ \fIBottomShadowPixmap\fP)"
This resource specifies the bottom shadow Pixmap of the icon image that
is displayed in the image part of an icon.
The default value of this resource is the icon bottom shadow Pixmap
(that is, specified by Mwm*icon*bottomShadowPixmap).
.IP "\fIiconImageForeground\fP\ (class\ \fIForeground\fP)"
This resource specifies the foreground color of the icon image that
is displayed in the image part of an icon.
The default value of this resource varies depending on the icon
background.
.nL
.ne 3i
.IP "\fIiconImageTopShadowColor\fP\ (class\ \fIBackground\fP)"
This resource specifies the top shadow color of the icon image that
is displayed in the image part of an icon.
The default value of this resource is the icon top shadow color
(that is, specified by Mwm*icon*topShadowColor).
.IP "\fIiconImageTopShadowPixmap\fP\ (class\ \fITopShadowPixmap\fP)"
This resource specifies the top shadow Pixmap of the icon image that
is displayed in the image part of an icon.
The default value of this resource is the icon top shadow pixmap
(that is, specified by Mwm*icon*topShadowPixmap).
.IP "\fImatteBackground\fP\ \ (class\ \fIBackground\fP)"
This resource specifies the background color of the matte, when
\fImatteWidth\fP is positive.
The default value of this resource is the client background color
(that is, specified by "Mwm*background or Mwm*client*background).
.IP "\fImatteBottomShadowColor\fP\ (class\ \fIForeground\fP)"
This resource specifies the bottom shadow color of the matte, when
\fImatteWidth\fP is positive.
The default value of this resource is the client bottom shadow color
(that is, specified by "Mwm*bottomShadowColor or Mwm*client*bottomShadowColor).
.nL
.ne 15
.IP "\fImatteBottomShadowPixmap\fP\ (class\ \fIBottomShadowPixmap\fP)"
This resource specifies the bottom shadow Pixmap of the matte, when
\fImatteWidth\fP is positive.
The default value of this resource is the client bottom shadow pixmap
(that is, specified by
.na
"Mwm*bottomShadowPixmap or Mwm*client*bottomShadowPixmap).
.ad
.IP "\fImatteForeground\fP\ (class\ \fIForeground\fP)"
This resource specifies the foreground color of the matte, when
\fImatteWidth\fP is positive.
The default value of this resource is the client foreground color
(that is, specified by "Mwm*foreground or Mwm*client*foreground).
.nL
.ne 3i
.IP "\fImatteTopShadowColor\fP\ (class\ \fIBackground\fP)"
This resource specifies the top shadow color of the matte, when
\fImatteWidth\fP is positive.
The default value of this resource is the client top shadow color
(that is, specified by "Mwm*topShadowColor or Mwm*client*topShadowColor).
.IP "\fImatteTopShadowPixmap\fP\ (class\ \fITopShadowPixmap\fP)"
This resource specifies the top shadow pixmap of the matte, when
\fImatteWidth\fP is positive.
The default value of this resource is the client top shadow
.ne 10
pixmap
(that is, specified by "Mwm*topShadowPixmap or Mwm*client*topShadowPixmap).
.IP "\fImatteWidth\fP\ (class\ \fIMatteWidth\fP)"
This resource specifies the width of the optional matte.
The default value is 0, which effectively disables the matte.
.IP "\fImaximumClientSize\fP\ (class\ \fIMaximumClientSize\fP)"
This resource is either a size specification or a direction that indicates
how a client window is to be maximized.  The resource value
can be specified as a size specification \fBwidth\fIx\fBheight\fP.  The
width and height are interpreted in the units that the client uses (for
example, for terminal emulators this is generally characters).  Alternately,
"vertical" or "horizontal" can be specified to indicate the direction in
which the client maximizes.
.PP
If this resource is not specified, the maximum size from the
WM_NORMAL_HINTS property is used if set.
Otherwise the default value is the size where the client window with
window management borders fills the screen.  When the maximum client size
is not determined by the maximumClientSize resource, the maximumMaximumSize
resource value is used as a constraint on the maximum size.
.IP "\fIuseClientIcon\fP\ (class\ \fIUseClientIcon\fP)"
If the value given for this
resource is True, a client-supplied icon image takes precedence
over a user-supplied icon image.  The default value is False, giving the
user-supplied icon image higher precedence than the client-supplied
icon image.
.IP "\fIusePPosition\fP\ (class\ \fIUsePPosition\fP)"
This resource specifies whether Mwm honors program specified position
\fIPPosition\fP specified in the WM_NORMAL_HINTS property in the absence of
an user specified position.  Setting this resource to on, causes \fImwm\fP
to always honor program specified position. Setting this resource to off,
causes \fImwm\fP to always ignore program specified position.  Setting this
resource to the default value of nonzero cause \fImwm\fP to honor program
specified position other than (0,0).
.IP "\fIwindowMenu\fP\ (class\ \fIWindowMenu\fP)"
This resource indicates the name of the menu pane that is posted when
the window menu is popped up (usually by pressing button 1 on the window
menu button on the client window frame).
Menu panes are specified in the MWM resource description file.
Window menus can be customized
on a client class basis by specifying resources of the form
\fIMwm*\fBclient_name_or_class\fI*windowMenu\fP
(see "Mwm Resource Description File Syntax").
The default value of this resource is "DefaultWindowMenu".
.SS "Resource Description File"
.PP 
The MWM resource description file is a supplementary resource file
that contains resource descriptions that are referred to by entries in
the defaults files (.Xdefaults, app-defaults/Mwm).
It contains descriptions of resources that are to be used by \fImwm\fP,
and that cannot be easily encoded in the defaults files
(a bitmap file is an analogous type of resource description file).
A particular \fImwm resource descriptionfile\fP can be selected using the \fIconfigFile\fP resource.
.P 
.nL
.ne 20
The following types of resources can be described in the \fImwm\fP
resource description file:
.IP "\fIButtons\fP"
Window manager functions can be bound (associated) with button events.
.IP "\fIKeys\fP"
Window manager functions can be bound (associated) with key press events.
.IP "\fIMenus\fP"
Menu panes can be used for the window menu and other menus posted
with key bindings and button bindings.
.SS "mwm Resource Description File Syntax"
The \fImwm\fP resource description file
is a standard text file that contains items
of information separated by blanks, tabs, and newline characters.
Blank lines are ignored.
Items or characters can be quoted to avoid special interpretation
(for example, the comment character can be quoted to prevent it from being
interpreted as the comment character).
A quoted item can be contained in double quotes (\fI"\fP).
Single characters can be quoted by preceding them by the backslash
character (\fI\\\fP).
All text from an unquoted \fI#\fP to the end of the line is regarded
as a comment and is not interpreted as part of a resource description.
If \fI!\fP is the first character in a line, the line is regarded as a comment.
If a line ends in a backslash character (\fI\\\fP), the next line is considered
a continuation of that line.
Window manager functions can be accessed with button and key bindings,
.ne 10
and
with window manager menus.
Functions are indicated as part of the specifications for button and key
binding sets, and menu panes.
The function specification has the following syntax:
.P 
.ne 1i
.sp 1
.in 0
.KS
.TS 
tab(	), center;
ll.
\fBfunction\fP =	\fBfunction_name\fP [\fBfunction_args\fP]
\fBfunction_name\fP =	\fBwindow manager function\fP
\fBfunction_args\fP =	{\fBquoted_item\fI  \fBunquoted_item\fP}
.TE
.KE
.in
.sp 1
.P 
The following functions are supported.
If a function is specified that isn't one of the supported functions, then it
is interpreted by \fImwm\fP as \fBf.nop\fP.
.IP "\fIf.beep\fP"
This function causes a beep.
.IP "\fIf.circle_down\fP\ [\fIicon\fP\ \ \fIwindow\fP]"
This function causes the window or icon that is on the top of the window
stack to be put on the bottom of the window stack (so that it no
longer obscures any other window or icon).
This function affects only those windows and icons
that obscure other windows and icons,
or that are obscured by other windows and icons.
Secondary windows (that is, transient windows) are restacked with their
associated primary window.
Secondary windows always stay on top of the associated primary window and
there can be no other primary windows between the secondary windows and
their primary window.  If an \fIicon\fP function argument is specified,
the function applies only to icons.
If a \fIwindow\fP function argument is specified, the function applies
only to windows.
.IP "\fIf.circle_up\fP\ [\fIicon\fP\ \ \fIwindow\fP]"
This function raises the window or icon on the bottom of the window stack
(so that it is not obscured by any other windows).
This function affects only those windows and icons
that obscure other windows and icons,
or that are obscured by other windows and icons.
Secondary windows (that is, transient windows) are restacked with their
associated primary window.
If an \fBicon\fP function argument is specified, the
function applies only to icons.
If a \fBwindow\fP function argument is specified, the function applies
only to windows.
.nL
.ne 2i
.IP "\fIf.exec\fP\ or\ \fI!\fP"
This function causes \fBcommand\fP to be executed (using the
value of the MWMSHELL environment variable if it is set,
otherwise the value of the SHELL environment variable if it is set,
otherwise \fB/bin/sh\fP).
The \fI!\fP notation can be used in place of the \fIf.exec\fP function
name.
.IP "\fIf.focus_color\fP"
This function sets the colormap focus to a client window.
If this function is done in a root context, the default colormap
(set up by the \fBX Window System\fP for the screen where MWM is running)
is installed and there is no specific client window colormap focus.
This function is treated as \fBf.nop\fP if colormapFocusPolicy is not
explicit.
.IP "\fIf.focus_key\fP"
This function sets the keyboard input focus to a client window or icon.
This function is treated as \fBf.nop\fP if keyboardFocusPolicy is not
explicit or the function is executed in a root context.
.IP "\fIf.kill\fP"
This function is used to terminate a client.
If the WM_DELETE_WINDOW protocol is set up, the client is sent a
client message event, indicating that the client window should be deleted.
If the WM_SAVE_YOURSELF protocol is set up, the client is sent a
client message event, indicating that the client needs to prepare to be
terminated.
If the client does not have the WM_DELETE_WINDOW or WM_SAVE_YOURSELF
protocol set up,
this function causes a client's X connection to be terminated
(usually resulting in termination of the client).
Refer to the description of the quitTimeout resource and the
WM_PROTOCOLS property.
.IP "\fIf.lower\fP\ [\fI\-\fBclient\fP \fIwithin\fP\ \ \fIfreeFamily\fP]"
This function lowers a primary window to the bottom of the global window
stack (where it obscures no other window) and lowers the secondary window
(transient window or dialog box) within the client family.  The
arguments to this function are mutually exclusive.
.PP
The \fBclient\fP argument indicates the name or class of a client to
lower.
If the \fBclient\fP argument is not specified, the context that the
function was invoked in indicates the window or icon to lower.
.PP
Specifying \fIwithin\fP lowers the secondary window within the family
(staying above the parent) but does not lower the client family in the
global window stack.
.PP
Specifying \fIfreeFamily\fP lowers the window to the bottom of the
global windows stack from its local family stack. 
.IP "\fIf.maximize\fP"
This function causes a client window to be displayed with its maximum
size.
.IP "\fIf.menu\fP"
This function associates a cascading (pull-right) menu
with a menu pane entry or a menu with a button or key binding.
The \fBmenu_name\fP function argument identifies the menu to be used.
.IP "\fIf.minimize\fP"
This function causes a client window to be minimized (iconified).
When a window is minimized when no icon box is used, its icon is placed on
the bottom of the window
stack (so that it obscures no other window).  If an icon box is used,
the client's icon changes to its iconified form inside the icon box.
Secondary windows (that is, transient windows) are minimized with their
associated primary window.
There is only one icon for a primary window and all its secondary windows.
.IP "\fIf.move\fP"
This function causes a client window to be interactively moved.
.IP "\fIf.next_cmap\fP"
This function installs the next colormap in the list of colormaps for
the window with the colormap focus.
.IP "\fIf.next_key\fP\ [\fIicon\fP\ \ \fIwindow\fP\ \ \fItransient\fP]"
This function sets the keyboard input focus to the next window/icon in the set
of windows/icons managed by the window manager
(the ordering of this set is based on the stacking of windows on the screen).
This function is treated as \fBf.nop\fP if keyboardFocusPolicy is not
explicit.
The keyboard input focus is moved only to windows that do not have an
associated secondary window that is application modal.
If the \fItransient\fP argument is specified, transient (secondary)
windows are traversed (otherwise, if only \fIwindow\fP is specified,
traversal is done only to the last focused window in a transient
group).
If an \fIicon\fP function argument is specified, the
function applies only to icons.
If a \fIwindow\fP function argument is specified, the function applies
only to windows.
.IP "\fIf.nop\fP"
This function does nothing.
.IP "\fIf.normalize\fP"
This function causes a client window to be displayed with its normal size.
Secondary windows (that is, transient windows) are placed in their normal state
along with their associated primary window.
.nL
.ne 10
.IP "\fIf.normalize_and_raise\fP"
This function causes the corresponding client
window to be displayed with its normal size
and raised to the top of the window stack.
Secondary windows (that is, transient windows) are placed in their normal state
along with their associated primary window.
.IP "\fIf.pack_icons\fP"
This function is used to relayout icons
(based on the layout policy being used)
on the root window or in the icon box.
In general this causes icons to be "packed" into the icon grid.
.nL
.ne 10
.IP "\fIf.pass_keys\fP"
This function is used to enable/disable (toggle) processing of key bindings
for window manager functions.  When it disables key binding processing, all
keys are passed on to the window with
the keyboard input focus and no window manager functions are invoked.
If the \fBf.pass_keys\fP function is invoked with a key binding to
disable key-binding processing, the
same key binding can be used to enable key-binding processing.
.IP "\fIf.post_wmenu\fP"
This function is used to post the window menu.  If a key is used to post
the window menu and a window menu button is present, the window menu is
automatically
placed with its top-left corner at the bottom-left corner of the
window menu button for the client window.  If no window menu button is
present,  the window menu is placed
at the top-left corner of the client window.
.IP "\fIf.prev_cmap\fP"
This function installs the previous colormap in the list of colormaps for
the window with the colormap focus.
.IP "\fIf.prev_key\fP\ [\fIicon\fP\ \ \fIwindow\fP\ \ \fItransient\fP]"
This function sets the keyboard input focus to the previous window/icon in
the set of windows/icons managed by the window manager
(the ordering of this set is based on the stacking of windows on the screen).
This function is treated as \fBf.nop\fP if keyboardFocusPolicy is not
explicit.
The keyboard input focus is moved only to windows that do not have an
associated secondary window that is application modal.
If the \fBtransient\fP argument is specified, transient (secondary)
windows are traversed (otherwise, if only \fBwindow\fP is specified,
traversal is done only to the last focused window in a transient
group).
If an \fBicon\fP function argument is specified, the
function applies only to icons.
If an \fBwindow\fP function argument is specified, the function applies
only to windows.
.IP "\fIf.quit_mwm\fP"
This function terminates \fImwm\fP (but NOT the X window system).
.nL
.ne 8
.IP "\fIf.raise\fP\ [\fI\-\fBclient\fP \fIwithin freeFamily]\fP"
This function raises a primary window to the top of the global window stack
(where it is obscured by no other window) and raises the secondary window
(transient window or dialog box) within the client family.  The
arguments to this function are mutually exclusive.
.PP
The \fBclient\fP argument indicates the name or class of a client to
lower.
If the \fBclient\fP is not specified, the context that the
function was invoked in indicates the window or icon to lower.
.PP
Specifying \fIwithin\fP raises the secondary window within the family
but does not raise the client family in the
global window stack.
.PP
Specifying \fIfreeFamily\fP raises the window to the top of its local
family stack and raises the family to the top of the global window stack.
.IP "\fIf.raise_lower\fP\ [\fIwithin freeFamily]\fP"
This function raises a primary window to the top of the global window stack if
it is partially obscured by another window; otherwise, it lowers the window
to the bottom of the window stack.  The arguments to this function
are mutually exclusive.
.PP
Specifying \fIwithin\fP raises a secondary window within the family
(staying above the parent window), if it
is partially obscured by another window in the application's family; 
otherwise, it lowers the
window to the bottom of the family stack.  It has no effect on the global 
window stacking order.
.PP
Specifying \fIfreeFamily\fP raises the window to the top of its local family
stack, if obscured by another window, and raises the family to the top of the 
global window stack; otherwise, it lowers the window to the bottom of its
local family stack and lowers the family to the bottom of the global window
stack.
.IP "\fIf.refresh\fP"
This function causes all windows to be redrawn.
.IP "\fIf.refresh_win\fP"
This function causes a client window to be redrawn.
.IP "\fIf.resize\fP"
This function causes a client window to be interactively resized.
.IP "\fIf.restore\fP"
This function restores the previous state of an icon's associated window.
If a maximized window is iconified, then
\fIf.restore\fP restores it to its maximized state.  If a normal window is
iconified, then \fIf.restore\fP restores it to its normalized state.
.IP "\fIf.restore_and_raise\fP"
This function restores the previous state of an icon's associated
window and raises the window to the top of the window stack.
If a maximized window is iconified, then
\fIf.restore_and_raise\fP restores it to its maximized state and raises it
to the top of the window stack.  If a normal window is iconified, then
\fIf.restore_and_raise\fP restores it to its normalized state and raises it
to the top of the window stack.
.IP "\fIf.restart\fP"
This function causes \fImwm\fP to be restarted (effectively terminated
and re-executed).
.IP "\fIf.screen\fP\ [\fInext\fP \fIprev\fP \fIback\fP
\fBscreen_number\fP]"
This function causes the pointer to be warp to a specific screen number
or to the \fInext\fP, \fIprevious\fP, or last visited (\fIback\fP) screen.
The arguments to this function are mutually exclusive.
.PP
The \fBscreen_number\fP argument indicates the screen number that the
pointer is to be warped.  Screens are numbered starting from screen 0.
.PP
Specifying \fInext\fP cause the pointer to warp to the next managed
screen (skipping over any unmanaged screens).
.PP
Specifying \fIprev\fP cause the pointer to warp to the previous managed
screen (skipping over any unmanaged screens).
.PP
Specifying \fIback\fP cause the pointer to warp to the last visited
screen.
.IP "\fIf.send_msg\fP\ \fBmessage_number\fP"
This function sends a client message of the type _MOTIF_WM_MESSAGES with the
\fBmessage_type\fP indicated by the \fBmessage_number\fP function argument.
The
client message is sent only if \fBmessage_number\fP is included in the
client's _MOTIF_WM_MESSAGES property.  A menu item label is grayed out if
the menu item is used to do \fBf.send_msg\fP of a message that is not
included in the client's _MOTIF_WM_MESSAGES property.
.IP "\fIf.separator\fP"
This function causes a menu separator to be put in the menu pane at the
specified location (the label is ignored).
.nL
.ne 10
.IP "\fIf.set_behavior\fP"
This function causes the window manager to restart with the default
behavior (if a custom behavior is configured) or revert to the
custom behavior.
By default this is bound to \fIShift\ Ctrl\ Meta\ <Key>!\fP.
.IP "\fIf.title\fP"
This function inserts a title in the menu pane at the specified location.
.PP 
Each function may be constrained as to which resource types can specify
the function (for example, menu pane) and also what context the function can
be used in (for example, the function is done to the selected client window).
Function contexts are
.IP "\fIroot\fP"
No client window or icon has been selected as an object for
the function.
.IP "\fIwindow\fP"
A client window has been selected as an object for the function.
This includes the window's title bar and frame.
Some functions are applied only when the window is
in its normalized state (for example, \fBf.maximize\fP) or its maximized state
(for example, \fBf.normalize\fP).
.IP "\fIicon\fP"
An icon has been selected as an object for the function.
.PP 
If a function's context has been specified as \fIiconwindow\fP and the
function is invoked in an icon box, the function applies to the icon
box, not to the icons inside.
.PP 
If a function is specified in a type of resource where it is not supported
or is invoked in a context that does not apply,
the function is treated as \fBf.nop\fP.
The following table indicates the resource types and function contexts in
which window manager functions apply.
.P 
.wH
.in 0 
.sp 1
.in 0
.KS
.TS 
center;
l l l.
\fIFunction\fP	\fIContexts\fP	\fIResources\fP
_
f.beep	root, icon, window	button, key, menu
f.circle_down	root, icon, window	button, key, menu
f.circle_up	root, icon, window	button, key, menu
f.exec	root, icon, window	button, key, menu
f.focus_color	root, icon, window	button, key, menu
f.focus_key	root, icon, window	button, key, menu
f.kill	icon, window	button, key, menu
f.lower	icon, window	button, key, menu
f.maximize	icon, window(normal)	button, key, menu
f.menu	root, icon, window	button, key, menu
f.minimize	window	button, key, menu
f.move	icon, window	button, key, menu
f.next_cmap	root, icon, window	button, key, menu
f.next_key	root, icon, window	button, key, menu
f.nop	root, icon, window	button, key, menu
f.normalize	icon, window(maximized)	button, key, menu
f.normalize_and_raise	icon, window	button, key, menu
f.pack_icons	root, icon, window	button, key, menu
f.pass_keys	root, icon, window	button, key, menu
f.post_wmenu	root, icon, window	button, key
f.prev_cmap	root, icon, window	button, key, menu
f.prev_key	root, icon, window	button, key, menu
f.quit_mwm	root, icon, window	button, key, menu (root only)
f.raise	icon, window	button, key, menu
f.raise_lower	icon, window	button, key, menu
f.refresh	root, icon, window	button, key, menu
f.refresh_win	window	button, key, menu
f.resize	window	button, key, menu
f.restore	icon, window	button, key, menu
f.restore_and_raise	icon, window	button, key, menu
f.restart	root, icon, window	button, key, menu (root only)
f.screen	root, icon, window	button, key, menu
f.send_msg	icon, window	button, key, menu
f.separator	root, icon, window	menu
f.set_behavior	root, icon, window	button, key, menu
f.title	root, icon, window	menu
.TE
.KE
.in
.sp 1
.SS "Window Manager Event Specification"
Events are indicated as part of the specifications for button and
key-binding sets, and menu panes.
.PP 
Button events have the following syntax:
.PP 
.wH
.in +4 
.sp 1
.in 0
.KS
.TS 
tab(	);
l l.
\fBbutton\fP =	[\fBmodifier_list\fP]\fI<\fBbutton_event_name\fI>\fP
\fBmodifier_list\fP =	\fBmodifier_name\fP {\fBmodifier_name\fP}
.TE
.KE
.in
.sp 1
.wH
.in -4 
.PP 
All modifiers specified are interpreted as being exclusive
(this means that only the specified modifiers can be present when the
button event occurs).
The following table indicates the values that can be used
for \fBmodifier_name\fP.\*F
.wH
.FS
.wH
.FS
The [Alt] key is frequently labeled [Extend] or [Meta].
Alt and Meta can be used interchangeably in event specification.
.wH
.FE
.wH
.FE
.P 
.ne 2.5i
.sp 1
.in 0
.KS
.TS 
center;
lfI  lfI
l  l.
\fIModifier\fP	\fIDescription\fP
_
Ctrl	Control Key
Shift	Shift Key
Alt	Alt/Meta Key
Meta	Meta/Alt Key
Lock	Lock Key
Mod1	Modifier1
Mod2	Modifier2
Mod3	Modifier3
Mod4	Modifier4
Mod5	Modifier5
.TE
.KE
.in
.sp 1
.PP 
.ne 10
The following table indicates the values that can be used for
\fBbutton_event_name\fP.
.P 
.ne 4i
.sp 1
.in 0
.KS
.TS 
center;
lfI  lfI
l  l.
\fIButton\fP	\fIDescription\fP
_
Btn1Down	Button 1 Press
Btn1Up	Button 1 Release
Btn1Click	Button 1 Press and Release
Btn1Click2	Button 1 Double-Click
Btn2Down	Button 2 Press
Btn2Up	Button 2 Release
Btn2Click	Button 2 Press and Release
Btn2Click2	Button 2 Double-Click
Btn3Down	Button 3 Press
Btn3Up	Button 3 Release
Btn3Click	Button 3 Press and Release
Btn3Click2	Button 3 Double-Click
Btn4Down	Button 4 Press
Btn4Up	Button 4 Release
Btn4Click	Button 4 Press and Release
Btn4Click2	Button 4 Double-Click
Btn5Down	Button 5 Press
Btn5Up	Button 5 Release
Btn5Click	Button 5 Press and Release
Btn5Click2	Button 5 Double-Click
.TE
.KE
.in
.sp 1
.PP 
.ne 2i
Key events that are used by the window manager for menu mnemonics
and for binding to window manager functions are single key presses;
key releases are ignored.
Key events have the following syntax:
.PP 
.wH
.in +4 
.sp 1
.in 0
.KS
.TS 
tab(	);
l l.
\fBkey\fP =	[\fBmodifier_list\fP]\fI<Key>\fBkey_name\fP
\fBmodifier_list\fP =	\fBmodifier_name\fP {\fBmodifier_name\fP}
.TE
.KE
.in
.sp 1
.wH
.in -4 
.PP 
All modifiers specified are interpreted as being exclusive
(this means that only the specified modifiers can be present when the
key event occurs).
Modifiers for keys
.ne 7
are the same as those that apply to buttons.
The \fBkey_name\fP is an X11 keysym name.
Keysym names can be found in the keysymdef.h file
(remove the \fBXK_\fP prefix).
.SS "Button Bindings"
The \fIbuttonBindings\fP resource value is the name of a set of button
bindings that are used to configure window manager behavior.
A window manager function can be done when a button press  occurs with
the pointer over a framed client window,
an icon, or the root window.
The context for indicating where the button press applies is also the
context for invoking the window manager function when the button press
is done
(significant for functions that are context sensitive).
.PP 
The button binding syntax is
.P 
.na
.wH
.in +5n 
\fIButtons\fP \fBbindings_set_name\fP
.nL
\fI{\fP
.nL
    \fBbutton\fP    \fBcontext\fP    \fBfunction\fP
.nL
    \fBbutton\fP    \fBcontext\fP    \fBfunction\fP
.nL
                         .
.nL
                         .
.nL
    \fBbutton\fP    \fBcontext\fP    \fBfunction\fP
.nL
\fI}\fP
.wH
.in -5n 
.ad
.PP 
.ne 2i
The syntax for the \fBcontext\fP specification is
.P 
.sp 1
.in 0
.KS
.TS 
tab(	), center;
ll.
\fBcontext\fP =	\fBobject\fP[\fI\ \ \fBcontext\fP]
\fBobject\fP =	\fIroot  icon  window  title  frame  border  app\fP
.TE
.KE
.in
.sp 1
.P 
The context specification indicates where the pointer must be for the
button binding to be effective.
For example, a context of \fIwindow\fP indicates that the pointer must
be over a client window or
window management frame for the button binding to be effective.
The \fIframe\fP context is for the window management frame around a
client window
(including the border and titlebar), the \fIborder\fP context is
for the border part of the window management frame
.ne 15
(not including the titlebar), the \fItitle\fP
context is for the title area of the window management frame,
and the \fIapp\fP context is for the application window
(not including the window management frame).
.P 
If an \fBf.nop\fP function is specified for a button binding, the button
binding is not done.
.SS "Key Bindings"
The \fIkeyBindings\fP resource value is the name of a set of key
bindings that are used to configure window manager behavior.  A window
manager function can be done when a particular key is pressed.
The context in which the key binding applies is indicated in the key
binding specification.
The valid contexts are the same as those that apply to button bindings.
.P 
The key binding syntax is
.P 
.na
.wH
.in +5n 
\fIKeys\fP \fBbindings_set_name\fP
.nL
\fI{\fP
.nL
    \fBkey\fP    \fBcontext\fP    \fBfunction\fP
.nL
    \fBkey\fP    \fBcontext\fP    \fBfunction\fP
.nL
                .
.nL
                .
.nL
    \fBkey\fP    \fBcontext\fP    \fBfunction\fP
.nL
\fI}\fP
.wH
.in -5n 
.ad
.PP 
If an \fBf.nop\fP function is specified for a key binding, the key
binding is not done.
If an \fBf.post_wmenu\fP or \fBf.menu\fP function is bound to a
key, \fImwm\fP will automatically use the same key for removing the menu from
the screen after it has been popped up.
.PP 
The \fBcontext\fP specification syntax is the same as for button bindings.
For key bindings, the \fIframe\fP, \fItitle\fP, \fIborder\fP, and \fIapp\fP
contexts are equivalent to the \fIwindow\fP context.
The context for a key event is the window or icon that has the keyboard
input focus (\fIroot\fP if no window or icon has the keyboard input focus).
.nL
.ne 8
.SS "Menu Panes"
Menus can be popped up using the \fBf.post_wmenu\fP and
\fBf.menu\fP window manager functions.
The context for window manager functions that are done from
a menu is \fBroot\fP, \fBicon\fP or \fBwindow\fP depending on how the
menu was popped up.
In the case of the \fBwindow\fP menu or menus popped up with a key
binding, the location of the keyboard input
focus indicates the context.
For menus popped up using a button binding,
the context of the button binding is the context of the menu.
.P 
The menu pane specification syntax is
.P 
.na
.wH
.in +5n 
\fIMenu\fP \fBmenu_name\fP
.nL
\fI{\fP
.nL
    \fBlabel\fP  [\fBmnemonic\fP]  [\fBaccelerator\fP]   \fBfunction\fP
.nL
    \fBlabel\fP  [\fBmnemonic\fP]  [\fBaccelerator\fP]   \fBfunction\fP
.nL
                .
.nL
                .
.nL
    \fBlabel\fP  [\fBmnemonic\fP]  [\fBaccelerator\fP]   \fBfunction\fP
.nL
\fI}\fP
.wH
.in -5n 
.ad
.PP 
Each line in the \fBMenu\fP specification identifies the label for a menu
item and the function to be done if the menu item is selected.
Optionally a menu button mnemonic and a menu button keyboard accelerator
may be specified.
Mnemonics are functional only when the menu is posted
and keyboard traversal applies.
.PP 
The \fBlabel\fP may be a string or a bitmap file.
The label specification has the following syntax:
.P 
.sp 1
.in 0
.KS
.TS 
tab(	), center;
ll.
\fBlabel\fP =	\fBtext\fI  \fBbitmap_file\fP
\fBbitmap_file\fP =	\fI@\fBfile_name\fP
\fBtext\fP =	\fBquoted_item\fI  \fBunquoted_item\fP
.TE
.KE
.in
.sp 1
.P 
The string encoding for labels must be compatible with the menu font that
is used.
Labels are greyed out for menu items that do the \fBf.nop\fP function
or an invalid function or a function that doesn't apply in the current
context.
.P 
.ne 5
A \fBmnemonic\fP specification has the following syntax
.P 
.wH
.in +4 
.sp 1
.in 0
.KS
.TS 
tab(	);
l l.
\fBmnemonic\fP =	\fI_\fBcharacter\fP
.TE
.KE
.in
.sp 1
.wH
.in -4 
.PP 
The first matching \fBcharacter\fP in the label is underlined.
If there is no matching \fBcharacter\fP in the label, no
mnemonic is registered with the window manager for that label.
Although the \fBcharacter\fP must exactly match a character in the
label,
the mnemonic does not execute if any modifier (such as Shift) is pressed with
the character key.
.PP 
The \fBaccelerator\fP specification is a key event specification with
the same syntax as is used for key bindings to window manager functions.
.SS Environment
\fImwm\fP uses the environment variable HOME specifying the user's
home directory.
.PP 
\fImwm\fP uses the environment variable LANG specifying the
user's choice of language for the \fImwm\fP message catalog and
the \fImwm\fP resource description file.
.PP 
\fImwm\fP uses the environment variables XFILESEARCHPATH,
XUSERFILESEARCHPATH, XAPPLRESDIR, XENVIRONMENT, LANG, and HOME in
determining search paths for resource defaults files.
\fImwm\fP may also use XBMLANGPATH to search for bitmap files.
.PP 
\fImwm\fP reads the $HOME/.motifbind file if it
exists to install a virtual
key bindings property on the root window.
For more information on the content of the \&.motifbind file, see
\fIVirtualBindings(3X)\fP.
.PP 
.ne 2i
\fImwm\fP uses the environment variable MWMSHELL (or SHELL, if MWMSHELL
is not set), specifying the shell to use when executing commands via the
\fBf.exec\fP function.
.nL
.ne 15
.SH Files
.na
\fI/usr/lib/X11/$LANG/system.mwmrc\fP
.nL
\fI/usr/lib/X11/system.mwmrc\fP
.nL
\fI/usr/lib/X11/app-defaults/Mwm\fP
.nL
\fI$HOME/Mwm\fP
.nL
\fI$HOME/.Xdefaults\fP
.nL
\fI$HOME/$LANG/.mwmrc\fP
.nL
\fI$HOME/.mwmrc\fP
.nL
\fI$HOME/.motifbind\fP
.ad
.SH RELATED INFORMATION
.na
\fIVendorShell(3X)\fP,
\fIVirtualBindings(3X)\fP,
\fIX(1)\fP, and
\fIXmInstallImage(3X)\fP.
.ad
