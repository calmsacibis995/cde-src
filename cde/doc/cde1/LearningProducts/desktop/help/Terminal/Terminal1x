<chapter id=dtterm1X>dtterm (1X) Man Page


<list bullet tight>
*<xref Synopsis>
*<xref Description>
*<xref Options>
*<xref Resources>
*<xref pointerusage>
*<xref actions>
*<xref translations>
<!-- *<xref xconsoles> -->
<\list>

<procedure>See Also
<list bullet tight>
*<xref EscapeSequences> 

*<link X man> X(1) <\link>
*<link resize man> resize(1) <\link>
*<link xset man> xset(1) <\link>
*<link xterm man> xterm(1) <\link>
*<link hpterm man> hpterm(1X) <\link>
*<link pty man> pty(1) <\link>
*<link Core man> Core(3X) <\link>
*<link XmBulletinB man> XmBulletinBoard(3X) <\link>
*<link XmForm man> XmForm(3X) <\link>
*<link XmFrame man> XmFrame(3X) <\link>
*<link XmPrimitive man> XmPrimitive(3X) <\link>
*<link XmScrollBaA man> XmScrollBar(3X) <\link>
<\list>

<s1 id=Synopsis>SYNOPSIS
``dtterm''
[-options]

<s1 id=Description>DESCRIPTION
The %%dtterm%% client provides runtime support of legacy applications
written for ANSI X3.64-1979 and ISO 6429:1992(E) conformant character
terminals such as the DEC VT220.

<s1 id=Options>OPTIONS
The %%dtterm%% terminal emulator
accepts all of the standard X Toolkit command line options along with
additional options all of which are listed below (if the option begins
with a `+' instead of a `-', the option is restored to its default value):

<!-- spec pages 11 through 17 -->

<p id=minus132>
``-132''
<p indent>Normally the DECCOLM escape sequence that switches between
80 and 
132 column mode is ignored. This option causes the DECCOLM escape
sequence to be recognized, and the ``dtterm'' window will resize
appropriately.
<idx|c132|
<p indent>Associated resource: <link c132> ``c132''<\link>.

<p id=plus132>
``+132''
<p indent>This option causes the DECCOLM 
escape sequence to be ignored.  This is the
default behavior.
<idx|c132|
<p indent>Associated resource: <link c132> ``c132''<\link>.

<p id=minusaw>
``-aw''
<p indent>This option indicates that auto-wraparound 
should be allowed. This
allows the cursor to automatically wrap to the beginning of the next
line when it is at the right-most position of a line and text is output.
This is the default behavior.
<p indent>Associated resource: <link autowrap> ``autoWrap''<\link>.
<idx|autoWrap|

<p id=plusaw>
``+aw''
<p indent>
This option indicates that auto-wraparound should not be allowed.
<p indent>Associated resource: <link autowrap> ``autoWrap''<\link>.
<idx|autoWrap|

<p id=bkgndopt>
``-background'' !!background_color!!
<p indent>
This option specifies the background of the terminal window as well as the
default background used for the scroll bar and the X11 pointer cursor.
Under CDE, this option defaults to the primary
colorset select pixel or background pixel(see
<link bselect>``-bs''<\link>.  Without CDE, this option defaults to
``*background/*Background'' with an ultimate fallback color of black.
<p indent>
!!background_color!! describes the background color to use.
<p indent>
<idx|background|
Associated resource: <link background>``background''<\link>

``-bd %%border_color%%''
<p indent>
This option specifies the border color for all windows.  The shell widget's
border
may not be visible when reparenting window managers such as ``dtwm(1X)''
and ``mwm(1X)'' are used.  The default color is black.
<p indent>
%%border_color%%  describes the border color to use.
<p indent>
<idx|borderColor|
Associated resource: <link bdrcol> ``borderColor''<\link>.

<p id=bgnd>
``-bg'' %%background_color%%
<p indent>
This option is identical to <link bkgndopt>``-background''<\link>.
<p indent>
``background_color''  describes the background color to use.
<p indent>
<idx|background|
Associated resource: <link background> ``background''<\link>.

``-bordercolor'' !!border_color!!
<p indent>
This option is identical to -bd above.
<p indent>
!!border_color!! 
Describes the border color to use
<p indent>
<idx|borderColor|
Associated resource: <link bdrcol> ``borderColor''<\link>.

<p id=bdrwidthopt>
``-borderwidth'' !!border_width!!
<p indent>
This option specifies the border width of the shell widget's window.
This value may be overridden by reparenting window managers such as
``dtwm(1X)'' and ``mwm(1X)''.  The default is 0.
<p indent>
!!border_width!!
Specifies the width of the window border in pixels.
<p indent>
<idx|borderwidth|
Associated resource: <link bwidth> ``borderWidth''<\link>.

<p id=bselect>
``-bs''
<p indent>
This option specifies that the 
terminal window should use the Motif select color instead of the background
color for the terminal window's background color.  This is the default
behavior.
<p indent>
<idx|backgroundIsSelect|
Associated resource: <link bgndIsSel> ``backgroundIsSelect''<\link>.

``+bs''
<p indent>
This option specifies that the
terminal window should not use the Motif select color instead of the
background color for the terminal window's background color.
<p indent>
Associated resource: <link bgndIsSel> ``backgroundIsSelect''<\link>.

``-bw %%border_width%%''
<p indent>
This option is identical to <link bdrwidthopt>``-borderwidth''<\link> above.
<p indent>
Associated resource: <link bwidth> ``borderWidth''<\link>.

``-C''
<p indent>
This option specifies that output directed at ``/dev/console'' should be
directed instead to the terminal window. It is provided as a way to
prevent output that would normally be displayed on the ITE from 
overwriting the X server's display. It is not provided as a general mechanism to
direct the output from an arbitrary system's ``/dev/console'' to an
arbitrary X server.  Note that you must have ownership of and read/write
access to ``/dev/console'' for this option to work.

``-display %%display_name%%''
<p indent>
This option specifies the X11 display server to be used by ``dtterm''.
This defaults to the value in the $DISPLAY environment variable.
<p indent>
%%display_name%%  specifies the X11 server to connect to.
<idx|display|

``-e %%program_argument ...%%''
<p indent>
This option specifies an executable program to be invoked as a subprocess
when ``dtterm'' is started.
This option must be the last option on
the command line.
<p indent>
%%program_argument ...%%  specifies the program and command line arguments
to execute.

``-fb'' !!fontset!!
<p indent>
This option specifies an XFontSet to be used when displaying bold terminal
text.  It should be specified as a Motif XmFontList.
Only character or mono spaced fonts are supported.  The behavior when
using proportional fonts is undefined.
A default bold font will be generated based on the XLFD
name of the userFont.
If that font is not available, bold text
will be generated by overstriking (with a one pixel offset) the
userFont.
<p indent>
!!fontset!!   specifies the bold terminal XFontSet to use.
<p indent>
Associated resource: <link userFont> ``userFont''<\link>.

<p id=fgopt>
``-fg'' !!foreground_color!!
<p indent>
This option specifies the foreground color of the terminal window as
well as the default foreground color used for the scroll bar and the
for the X11 pointer cursor.  Under CDE, this resource
will default to the primary color set foreground pixel.  Without CDE,
this resource will default to ``*foreground'' or ``*Foreground'' with
an ultimate fallback color of white.
<p indent>
!!foreground_color!!    specifies the foreground color to use.
<p indent>
<idx|foreground|
Associated resource: <link fg> ``foreground''<\link>.

<p id=fn>
``-fn'' !!fontset!!
<p indent>
This option specifies an XFontSet to be used when displaying terminal text.
It should be specified as a Motif XmFontList.
Only character or mono spaced fonts are supported.  The behavior when
using proportional fonts is undefined.
This font will not be used
to display non-terminal text (menu bar, popup menus, dialogs, etc.).
The default is
to use the XmNtextFontList value of the parent bulletin board (see
XmBulletinBoard(3X)) in the same manner as the XmText widget.
<p indent>
!!fontset!!  Specifies the terminal XFontSet to use.
Associated resource: <link userFont> ``userFont''<\link>.

``-font'' !!fontset!!
<p indent>
This option is identical to ``-fn'' above.
<p indent>
!!fontset!!  Specifies the terminal XFontSet to use.

Associated resource: <link userFont> ``userFont''<\link>.
<p id=foregndopt>
``-foreground'' !!foreground!!
<p indent>
This option is identical to <link fgopt>``-fg''<\link> above.
<p indent>
!!foreground!!  Specifies the foreground color to use.
<p indent>
<idx|foreground|
Associated resource: <link fg> ``foreground''<\link>.

``-geometry %%geometry_string%%''
<p indent>
This option specifies the preferred size and position of the terminal
window. The default size is 24 lines of 80 characters each. 
There is no default position.
<p indent>
!!geometry!!  Specifies the terminal geometry to use.
<p indent>
<idx|geometry|
Associated resource: <link geometry> ``geometry''<\link>.

``-help''
<p indent>
Displays a message summarizing the usage of ``dtterm''.
<idx|help|

``-iconic''
<p indent>
This option specifies that the terminal emulator should initially be
placed on the display iconified.
<p indent>
<idx|iconic|
Associated resource: <link iconic> ``iconic''<\link>.

``+iconic''
<p indent>
This option specifies that the terminal emulator should initially be
placed on the display as a normal window. This is the default behavior.
<p indent>
Associated resource: <link iconic> ``iconic''<\link>.

``-j''
<p indent>
This option specifies that jump scrolling should be used. Under jump
scrolling, the screen may be scrolled more than one line at a time. This
provides for faster screen updates when multiple lines of text are being
sent to the terminal. The maximum number of lines that may be jump
scrolled is limited to the number of lines in the terminal window. It is
guaranteed that
all lines will be displayed. This is the default behavior.
<p indent>
<idx|jumpScroll|
Associated resource: <link jumpScroll> ``jumpScroll''<\link>.

``+j''
<p indent>
This option specifies that jump scrolling should not be used. For a 
description of jump scrolling, see ``-j'' above.
<p indent>
Associated resource: <link jumpScroll> ``jumpScroll''<\link>.

``-kshMode''
<p indent>
This option specifies that ksh mode should be enabled.
Under ksh mode, a key pressed with the extend modifier bit set will
generate an escape character followed by the character generated by the
un-extended keystroke. This option is provided for use with emacs and
the emacs command line editor mode of ``ksh(1)'' or ``ied(1)''. It
conflicts with the normal use of the meta key for generating extended
single byte characters, and for generating multi-byte Asian characters.
<idx|kshMode|
<p indent>
Associated resource: <link kshMode> ``kshMode''<\link>.

``+kshMode''
<p indent>
This option specifies that the ksh mode should not be enabled.  This is
the default behavior.
<p indent>
Associated resource: <link kshMode> ``kshMode''<\link>.

``-l''
<p indent>
This option enables output logging. When logging is enabled, all output
received from the subprocess is logged either to a file or to a command
pipeline (as specified via the ``-lf'' option below). Since the data is
being logged directly from the subprocess, it includes all escape
characters and carriage return/newline pairs sent by the terminal line
discipline.  Output may be enabled and disabled via
escape sequences.
<p indent>
<idx|logging|
Associated resource: <link logging> ``logging''<\link>.

``+l''
<p indent>
This option disables output logging. For a description of output
logging, see ``-l'' above. This option is the default.
<p indent>
<idx|logging|
Associated resource: <link logging> ``logging''<\link>.

``-lf %%file_name%%''
<p indent>
This option specifies the name of the file to which the output log described
above is written.  If %%file_name%% begins with a pipe symbol (``|''), the rest of
the string is assumed to be a command to be used as the endpoint of a pipe.
The default filename is ``DttermLog''%%XXXXX%% (where %%XXXXX%%
is the process id of ``dtterm'') and is created in the directory from which
``dtterm'' was started.  If the last five characters are "XXXXX," they
are replaced by the process ID. 
<p indent>
!!file_name!!  specifies the log file name to use.
<p indent>
<idx|logFile|
Associated resource: <link logfile> ``logFile''<\link>.

``-ls''
<p indent>
This option indicates that the shell that is started 
should be a login shell (i.e. the first character of ``argv[0]'' will be a dash,
indicating to the shell that it should read the system's ``profile''
and the  user's ``$HOME/.profile'' (for ``ksh'' and ``sh'') or the system's
``csh.login'' and the user's
``$HOME.login'' (for ``csh'').
<p indent>
<idx|loginShell|
Associated resource: <link logShell>``loginShell''<\link>.

``+ls''
<p indent>
This option specifies that a normal (non-login) shell should be started.
This is the default behavior.
<p indent>
<idx|loginShell|
Associated resource: <link logShell>``loginShell''<\link>.

``-map''
<p indent>
This option indicates that ``dtterm'' should map (de-iconify) itself upon
subprocess output if it is unmapped (iconified).  An initial period of time
during which ``dtterm'' will not map itself upon subprocess output may be
specified
via the <link maponoutdlay>``mapOnOutputDelay''<\link> resource.
<p indent>
<idx|mapOnOutput|
Associated resource: <link maponout> ``mapOnOutput''<\link>.

``+map''
<p indent>
This option specifies that there should be no special mapping behavior.
This is the default
behavior.
<p indent>
<idx|mapOnOutput|
Associated resource: <link maponout> ``mapOnOutput''<\link>.

``-mb''
<p indent>
This option indicates that ``dtterm'' should ring a margin bell when the user 
types near the right margin.  The actual distance involved is specified by
the <link nb> ``-nb''<\link> option.
<p indent>
<idx|marginBell|
Associated resource: <link marginBell> ``marginBell''<\link>.

``+mb''
<p indent>
This option indicates that margin bell should not be rung when the user
types near the right margin.  This is the default.
<p indent>
<idx|marginBell|
Associated resource: <link marginBell> ``marginBell''<\link>.

``-ms %%pointer_color%%''
<p indent>
This option specifies the foreground color to use for the terminal window's
(X11) pointer cursor.  The default is to use the terminal window's
foreground color.  See <link foregndopt>``foreground''<\link> above.
<p indent>
!!pointer_color!!  specifies the pointer foreground color to use.
<p indent>
Associated resource: <link pointcolor> ``pointerColor''<\link>.

``-name %%prog_name%%''
<p indent>
This option specifies the X11 name of the ``dtterm'' window.
<p indent>
!!prog_name!!  the name to use. 
<idx|name|

<p id=nb>
``-nb %%number%%''
<p indent>
This option specifies the number of characters from the right margin
at which the margin bell will ring, if enabled.  The default is 10.
<p indent>
<idx|nMarginBell|
Associated resource: <link nMarginBell> ``nMarginBell''<\link>.

``-r''
<p indent>
This option causes the ``dtterm'' window to be displayed with the
foreground and background colors reversed.  This is identical to the
``-r'' and
``-reverse'' options.

``+r''
<p indent>
This option causes the ``dtterm'' window to be displayed with the normal
foreground and background colors. This is the default, and is also
identical to the ``+rv'' option..

``-reverse''
<p indent>
This option causes the ``dtterm'' window to be displayed with the
foreground and background colors reversed.  This is identical to the
``-r'' and
``-rv'' options.

``-rv''
<p indent>
This option causes the ``dtterm'' window to be displayed with the
foreground and background colors reversed.  This is identical to choosing
Options | Global Options, and then changing the "windowBackground"  options
menu to "Inverse."  A ``dtterm'' window started with this option has the
"Window Background" options menu set to "Inverse."  See <link
GlobOpts>"Global Options"<\link>.

``+rv''
<p indent>
This option causes the ``dtterm'' window to be displayed with the normal
foreground and background colors. This is the default.

<p id=minusrw>
``-rw''
<p indent>
This option specifies that reverse-wraparound should be enabled.
<p indent>
<idx|reverseWrap|
Associated resource: <link reverseWrap> ``reverseWrap''<\link>.

<p id=plusrw>
``+rw''
<p indent>
This option indicates that reverse-wraparound should not be enabled.  This
is the default.
<p indent>
<idx|reverseWrap|
Associated resource: <link reverseWrap> ``reverseWrap''<\link>.

``-S%%ccn%%''
<p indent>
This option specifies that the terminal emulator should be run against 
a pre-opened pty or STREAMS device. This option is provided for use where
the pty or STREAMS device's slave name is
of the form ``tty??'' (i.e., exactly two characters following the
``tty''). This option is intended for use when ``dtterm'' is invoked
programmatically from another application.
<p indent>
!!cc!!  specifies the last two characters of the pty or STREAMS device's
slave name, where the
slave name is of the form ``tty??''.  This value is ignored, but must be
exactly two characters in length.
<p indent>
!!n!!  specifies the number of the file descriptor that corresponds to the
pty or STREAMS device's already-opened master side.

``-S%%c.n%%''
<p indent>
This option is identical to ``-Sccn'' above, but is provided for systems
with a larger pty name space.
<p indent>
!!c!!  specifies the last component of the pty slave name.  This values is
ignored and may be empty.
<p indent>
!!n!!  specifies the number of the file descriptor that corresponds to the
pty's already-opened master side.

``-sb''
<p indent>
This option indicates that a scrollbar should be displayed.  This is the
default.
<p indent>
<idx|scrollBar|
Associated resource: <link scrollbar> ``scrollBar''<\link>.

``+sb''
<p indent>
This option indicates that a scrollbar should !!not!! be displayed.  
<p indent>
<idx|scrollBar|
Associated resource: <link scrollbar> ``scrollBar''<\link>.

``-sf''
<p indent>
This option indicates that Sun Function Key escape codes should be
generated for function keys instead of standard VT220 escape sequences.
<p indent>
<idx|sunFunctionKeys|
Associated resource: <link sunfnctk> ``sunFunctionKeys''<\link>.

``+sf''
<p indent>
This option indicates that the standard escape sequences should be
generated for function keys instead of the Sun Function Key escape codes.
This is the default behavior.
<p indent>
<idx|sunFunctionKeys|
Associated resource: <link sunfnctk> ``sunFunctionKeys''<\link>.

``-sl %%screens[s|l]%%''
<p indent>
This option specifies the number of lines in the terminal buffer beyond the
length of the window.  The option value consists of a number followed by an
optional suffix.  If no suffix is included, or the suffix is "l" (ell), the
total length of the terminal buffer will be !!screens!! plus the length of
the terminal window.  If the suffix is "s" (ess), the total length of the
terminal buffer will be (!!screens!! plus one) times the length of the
terminal window.  ``dtterm'' will try to maintain the same buffer-to-window
ratio when the window is resized larger.  The default is "4s."
<p indent>
!!screens!!  specifies the number of screens or lines to save.
<p indent>
<idx|saveLines|
Associated resource: <link savelines> ``saveLines''<\link>.

``-ti'' !!term_id!!
<p indent>
This option supplies the name used to select the correct response to
terminal ID queries.  Valid values are ``vt100, vt101, vt102'', and
``vt220''.  The default is ``vt220''.
<p indent>
!!term_id!!  specifies the terminal ID to use.

``-title %%title_string%%''
<p indent>
This option specifies the window title.  If the ``-e'' option is
used, the default will be the last component of the program's path. If
the ``-e'' option is not used, the default will be the last component of
the name used to execute ``dtterm'' (i.e., ``argv[0]'').
<p indent>
!!title_string!!  specifies the title to use.
<p indent>
<idx|title|
Associated resource: <link title> ``title''<\link>.

``-tm %%term_modes%%''
<p indent>
This option specifies a string containing terminal-setting keywords
and the characters to which they may be bound.  Allowable keywords
include  ``intr'', ``quit'', ``erase'', ``kill'', ``eof'',
``eol'', ``swtch'', ``start'', ``stop'', ``brk'',
``susp'', ``dsusp'', ``rprnt'', ``flush'', ``weras'',
and ``lnext''.  Keywords that do not apply
to a specific architecture will be correctly parsed and ignored.
Control characters may be specified as ``^'' followed by ``char''
(e.g.  ``^c'' or ``^u''), and ``^?''
may be used to indicate delete.  This is useful for overridding the
default terminal settings without having to do an ``stty(1)'' every time a
terminal process is started.  The default is NULL.
<p indent>
!!term_modes!!  specifies the terminal mode string.
<p indent>
<idx|ttyModes|
Associated resource: <link ttymodes> ``ttyModes''<\link>.

``-tn %%term_name%%''
<p indent>
This option specifies a name to set the
``$TERM'' environment variable to. The default is ``"vt220"''.
<p indent>
!!term_name!!  specifies the terminal name to use.
<p indent>
<idx|termName|
Associated resource: <link termname> ``termName''<\link>.

``-usage''
<p indent>
Prints a usage message on the screen.

``-vb''
<p indent>
This option indicates that a visual bell is preferred over an audible one.
Instead of ringing the terminal bell whenever a Control-G is received, the
window will be flashed.
<p indent>
<idx|visualBell|
Associated resource: <link visbell> ``visualBell''<\link>.

``+vb''
<p indent>
This option indicates that an audio bell is preferred over a visual one.
This is the default behavior.
<p indent>
<idx|visualBell|
Associated resource: <link visbell> ``visualBell''<\link>.

``-w'' !!border_width!!
<p indent>
This option is identical to <link bdrwidthopt>``-borderwidth''<\link>
above.
<p indent>
!!border_width!!  specifies the width of the window border in pixels.

``-xrm %%resource_string%%''
<p indent>
This option allows X11 Resource Manager-style resources to be specified on
the command line.  %%resource_string%% specifies an X11 resource string.


<!-- spec pages 22 through 27 -->
<s1 id=Resources>RESOURCES

``allowSendEvents''
<p indent>
This resource specifies that the terminal emulator should allow
synthetic events (generated and sent by another application). Enabling
this resource opens up a possible security hole. The default is
False.

``appCursorDefault''
<p indent>
If True, the cursor keys are initially in application mode. If False, they
are initially in cursor mode.  The
default is False.

``appKeypadDefault''
<p indent>
If True, the keypad keys are initially in application mode. If False, they
are initially in numeric mode.  The
default is False.

<p id=autowrap>``autoWrap''
<p indent>
This resource specifies whether or not auto-wraparound is initially
enabled. The default is True.

<p id=background>``background''
<p indent>
This resource specifies the background color of the terminal window as
well as the default background color used for the scrollbar. Under CDE,
this resource
defaults to either the primary color set select pixel or the primary
color set background pixe (see ``backgroundIsSelect''). The default is the
primary color set background pixel.  Without CDE,
this resource defaults to black.

<p id=bgndIsSel>``backgroundIsSelect''
<p indent>
When True, this resource specifies that the terminal window should use the Motif
select color instead of the background color for the terminal window's
background color.  The default is False.

``blinkRate''
<p indent>
This resource specifies the number of milliseconds the cursor is in the
``"on"'' and ``"off"''
states while blinking.  A value of
250 will blink the cursor two times per second. A value of 0 
will turn blinking off.  The default is 250.

<p id=bdrcol>``borderColor''
<p indent>
This resource defines the border color for the window. The window border
may not be visible when reparenting window managers such as ``dtwm'' and
``mwm'' are used.  The
default is ``"black"''.

<p id=bwidth>``borderWidth''
<p indent>
This resource specifies the border width of the shell widget's window.
This value may be overridden by reparenting window managers such as
``dtwm'' and ``mwm''.  The default is ``0''.

<p id=c132>``c132''
<p indent>
This resource specifies whether or not the DECCOLM escape sequence that
switches to window with between 80 and 132 columns should be honored. The
default is
False.

``charCursorStyle''
<p indent>
This resource specifies the shape of the text cursor.  A value of
``char_cursor_box'' specifies a cursor with the width and height of the
base font's bounding box.  A value of ``char_cursor_bar'' specifies a 
cursor with the width of the base font's bounding box, a height of two
pixels, and drawn with it's top on the baseline.  The default is
``char_cursor_box''.

``consoleMode''
<p indent>
This resource specifies that output directed at ``/dev/console'' should be
directed instead to the terminal window.  It is provided as a way to
prevent output that would normally be displayed on the ITE from 
overwriting the X server's display.  It is not provided as a
general mechanism to
direct the output from an arbitrary system's ``/dev/console'' to an
arbitrary X server.  Note that you must have ownership of and read/write
access to ``/dev/console'' for this option to work.
The default is False.

<p id=fg>``foreground''
<p indent>
This resource specifies the foreground color of the terminal window as well as
the default foreground color used for the scrollbar and the color used
for the pointer
cursor. Under CDE, this resource will default to the primary
colorset foreground. Otherwise, it defaults to ``"white"''.

<p id=geometry>``geometry''
<p indent> 
This resource specifies the preferred size and position of the terminal
window. The default size is 24 lines of 80 characters each. There is
no default position.

<p id=icongeom>``iconGeometry''
<p indent>
This resource specifies the preferred position of the terminal
emulator's icon.  Window managers may ignore this value. 
There is no default.

<p id=iconic>``iconic''
<p indent>
If true, this resource specifies that the terminal emulator should
initially be placed on the display iconified.  Window managers (including
``dtwm'' and ``mwm'' may ignore this value.
The default is False.

``iconicName''
<p indent>
This resource specifies the name for the icon. If the ``-e'' option is
used, the default will be the last component of the program's path. If
the ``-e'' option is not used, the default will be the base name of the
name used to execute ``dtterm'' (i.e., ``argv[0]'').

<p id=jumpScroll>``jumpScroll''
<p indent>
This resource specifies that jump scrolling should be used. Under jump
scrolling, the screen may be scrolled more than one line at a time. This
provides for faster screen updates when multiple lines of text are being
sent to the terminal. The maximum number of lines that may be jump
scrolled is limited to the number of lines in the display. It is guaranteed that
all lines will be displayed. The default is True.

<p id=kshMode>``kshMode''
<p indent>
This resource specifies that ksh mode should be enabled. Under ksh mode,
a key pressed with the extend modifier bit set will generate an escape
character followed by the character generated by the un-extended
keystroke. This option is provided for use with emacs and emacs command
line editor mode of ``ksh(1)'' or ``ied(1)''. It conflicts with the
normal use of the meta key for generating extended single byte
characters and for generating multi-byte Asian characters. The default
is False.

<p id=logfile>``logFile''
<p indent>
This resource specifies the name of the file to which the output log described
below is written.  If the filename begins with a pipe symbol (``|''), the
rest of the string is assumed to be a command to be used as the endpoint of
a pipe. The default filename is ``DttermLog''%%XXXXX%% (where %%XXXXX%%
is the process id of ``dtterm'') and is created in the directory from
which the subprocess was started.
If the last five characters are "XXXXX," they
are replaced by the process ID. 
<p id=logging>``logging''
<p indent>
This resource enables output logging. When logging is enabled, all
output received from the subprocess is logged either to a file or to a
command pipeline (as specified via the ``logFile'' option above). Since
the data is being logged directly from the subprocess, it includes all
escape characters and carriage return/newline pairs sent by the terminal
line discipline. Output may be enabled and disabled via 
escape sequences. The default is
False.

``logInhibit''
<p indent>
This resource specifies that device and file logging should be inhibited.
The default is False.

<p id=logShell>``loginShell''
<p indent>
This resource specifies that the shell that is started should be a login
shell (i.e. the first character of ``argv[0]'' will be a dash, indicating
to the shell that it should read the system's ``profile'' and the user's 
``$HOME/.profile'' (for ``ksh'' and ``sh'') or the system's ``csh.login'' and
the user's ``$HOME/.login'' (for ``csh'').  The default is False.

<p id=maponout>``mapOnOutput''
<p indent>
This resource indicates that the terminal emulator should map
(de-iconify) itself upon subprocess output if it is unmapped (iconified). An
initial period of time during which it will not map itself upon subprocess
output may be specified via the ``mapOnOutputDelay'' resource (see
below). The default is False.

<p id=maponoutdlay>``mapOnOutputDelay''
<p indent>
This resource specifies the number of seconds after start-up that
``dtterm'' will not honor the ``mapOnOutput'' resource (see above). This
allows for initial output (e.g., shell prompts) to be sent to the
terminal without auto mapping the window. The default is ``0'' (no delay)

<p id=marginBell>``marginBell''
<p indent>
Specifies whether or not the bell should be run when the user types near
the right margin. The default is False.

<p id=menuresource>``menuBar''
<p indent>
This resources specifies that a pulldown menu should be displayed.  The
default is True.

<p id=menuPopup>``menuPopup''
<p indent>
This resources specifies that a popup menu should be enabled.  The
default is True.

<p id=nMarginBell>``nMarginBell''
<p indent>
Specifies the number of characters from the right margin at which the
margin bell should be rung, when enabled.  The default is 10.

<p id=pointblank>``pointerBlank''
<p indent>
This resource specifies that the pointer cursor should be put into
blanking mode. In this mode, the cursor will turn on when the pointer is
moved, and will be blanked either after a selectable number of seconds
or after keyboard input has occurred. The delay is set via the
``pointerBlankDelay'' resource (see below). The default is False.

<p id=pointblankdelay>``pointerBlankDelay''
<p indent>
This resource defines the number of seconds to wait before blanking the
pointer cursor after the pointer has been moved.  A value of 0 invokes
pointer blanking only on keyboard input.  The default is 2
seconds.

<p id=pointcolor>``pointerColor''
<p indent>
This resource specifies the foreground color to use for the terminal
window's pointer (X11) cursor.  The default is to use the terminal window's
foreground color.  See <link fg>``foreground''<\link> above.

``pointerColorBackground''
<p indent>
This resource specifies the background color to use for the terminal
windows pointer (X11) cursor. The default is to use the terminal windows
background color See <link background>``background''<\link> above.

``pointerShape''
<p indent>
This resource specifies the X cursor font character to use as the pointer
cursor.  It should be specified as a string from the include file
``&<X11/cursorfont.h>'' with the leading ``XC_'' removed.  The default is
``xterm''.

``reverseVideo''
<p indent>
This resource specifies whether or not reverse video should be
used. The default is False.

<p id=reverseWrap>``reverseWrap''
<p indent>
This resource specifies whether or not reverse-wraparound should be
enabled. The default is False.

<p id=savelines>``saveLines''
<p indent>
This resource specifies the number of lines in the terminal buffer beyond
length of the window.  The value value consists of a number followed by an
optional suffix.  If no suffix is included, or the suffix is "l" (ell), the
total length of the terminal buffer will be !!screens!! plus the length of
the terminal window.  If the suffix is "s" (ess), the total length of the
terminal buffer will be (!!screens!! plus one) times the length of the
terminal window.  ``dtterm'' will try to maintain the same buffer-to-window
ratio when the window is resized larger.  The default is "4s."

<p id=scrollbar>``scrollBar''
<p indent>
This resource specifies whether or not the scrollbar should be visible.
The
default is True.

<p id=sunfnctk>``sunFunctionKeys''
<p indent>
Specifies whether or not Sun Function Key escape codes should be
generated for function keys instead of standard VT220 escape sequences.
The default is False.

<p id=termid>``termId''
<p indent>
This resource supplies the name used to select the correct response to
terminal ID queries.  Valid values are ``vt100'', ``vt101'', ``vt102'',
and ``vt220''.  The default is ``vt220''.

<p id=termname>``termName''
<p indent>
This resource defines the name for the
``$TERM''
environment variable. The default is ``vt220''.

<p id=title>``title''
<p indent> 
This resource specifies the window title. If the ``-e'' option is used,
the default will be the last component of the program's path. If the
``-e'' option is not used, the default will be the last component of the
name used to execute ``dtterm'' (i.e., ``argv[0]'').

<p id=ttymodes>``ttyModes'' 
<p indent>
This resource specifies a string containing terminal-setting keywords
and the characters to which they may be bound.  Allowable keywords
include: ``intr, quit, erase, kill, eof, eol, swtch, start, stop, brk,
susp, dsusp, rprnt, flush, weras'', and ``Inext''.  Keywords that do not
apply to a specific architecture will be correctly parsed and ignored.  Control characters may
be specified as ``^''followed by ``char'' (e.g. ``^c'' or ``^u)'', and ``^?''
may be used to indicate
delete.  This is very useful for overriding the default terminal
settings without having to do an ``stty'' every time a terminal process 
is started. The default is NULL.

``userBoldFont''
<p indent>
This resource specifies an XFontSet to be used when displaying bold
terminal text.  It should be specified as a Motif ``XmFontList''.  Only
character or mono spaced fonts are supported. The behavior when using
proportional fonts is undefined.  A default bold font will be generated
based on the XLFD name of the ``userFont''.  If that font is not available,
bold text will be generated by overstriking (with a one pixel offset) the
``userFont''.

<p id=userFont>
``userFont''
<p indent>
This resource specifies an XFontSet to be used when displaying 
terminal text.  It should be specified as a Motif ``XmFontList''.  Only
character or mono spaced fonts are supported. The behavior when using
proportional fonts is undefined.  This font will not be used to display
non-terminal text (menu bar, popup menu, dialog, etc.).  The default is to
use the ``XmNtextFontList'' value of the parent bulletin board (see
XmBulletinBoard(3X)) in the same manner as the ``XmText'' widget.

<p id=visbell>
``visualBell''
<p indent>
This resource specifies that a visual bell is preferred over an audible
one.  Instead of ringing the terminal bell whenever a CTRL-G is received,
the windows will be flashed.  The default is False.

<s1 id=pointerusage>POINTER USAGE
``dtterm''
allows you to select regions of text.  Selection is based on the model
specified in the <book|Inter-Client Communication Conventions Manual|
(ICCCM).  ``dtterm'' supports primary selection only.  You can copy or
paste selected text using primary transfer.  Input is treated as keyboard
input, and is inserted at the cursor.  The select/insert operations and their
default assignments are described below.

<lablist>
\<term nogloss|select|\The left button is used to select the text
to be copied.  Move
the pointer to the beginning of the text to copy, press and hold the left
button, move the cursor to the end of the text to copy, and release the
button.  Any currently selected text can be deselected by clicking the left
button once without moving the mouse.

\<term nogloss|insert|\The middle button pastes the text from the primary selection,
treating it as keyboard input.
<\lablist>

<s1 id=actions>ACTIONS
This topic describes the  ``dtterm'' action routines.

``bell'' ([!!Percentage!!])
<p indent>
This action rings the keyboard bell at the specified !!percentage!! above or
below the base volume.

``break ()''
<p indent>
This action send a break signal to the child process.

``cancel ()''
<p indent>
This action sends a ``CAN'' (cancel) character to the child process.

``do ()''
<p indent>
This action sends the escape sequence associated with the ``Do'' key
to the child process.

``edit-key'' (!!string!!)
<p indent>
This action sends the escape sequence associated with the corresponding
edit key to the child process.  The interpretation of these keys is
application specific.
Valid values for !!string!! are
``find'',
``insert'',
``next'',
``prior'',
``remove'', and
``select''.

``extend-start()''
<p indent>
Start the extension of the currently selected text.

``extend-end ()''
<p indent>
Extends the current selection.  The amount of text selected depends on
the number of mouse clicks.

``function-key-execute'' (!!num!! [,!!type!!])
<p indent>
This action sends the escape sequence associated with the corresponding
function key !!num!! to the child process.  Valid values for !!num!!
are``1'' through``35''.  If !!type!! is set to ``function''
(or not set at all), the escape sequence associated with function
key !!num!! is sent to the child process.  If !!type!! is set to
``UDK'', then the string associated with user defined key !!num!!
is sent to the child process.

``grab-focus ()''
<p indent>
This action performs one of the following depending on the number of
multiple mouse clicks.  One click will deselect any selected text and
set the selection anchor at the pointer position, two clicks will select
a word, three clicks will select a line of text, and four clicks will
select all text.

``hard-reset ()''
<p indent>
This action will perform a hard reset on the terminal emulator.

``help ()''
<p indent>
This action sends the escape sequence associated with the ``DEC VT220''
Help key to the child process.
The interpretation of this key is application specific.

``keymap'' (!!name!!)
<p indent>
This action dynamically defines a new translation table whose resource
name is name with the suffix Keymap (case is significant).  The name
``None'' restores the original translation table.

``keypad-key-execute'' (!!string!!)
<p indent>
This action sends the escape sequence associated with the corresponding
keypad key to the child process.  The interpretation of these keys are
application specific.  Valid values for !!string!! include:
``f1''-
``f4'',
``space'',
``tab'',
``enter'',
``equal'',
``multiply'',
``add'',
``separator'',
``subtract'',
``decimal'',
``divide'', and
``0'' -
``9''.

``move-cursor'' (!!direction!!)
<p indent>
This action sends the escape sequence associated with the corresponding
cursor motion to the child process.  The interpretation of these keys are
application specific.  Valid values for !!direction!! include:
``up'',
``down'',
``backward'', and
``forward''.

``redraw-display ()''
<p indent>
This action redraws the contents of the text window.

``scroll'' (!!count!! [,!!units!!])
<p indent>
This action will scroll the display memory down if !!count!! is less than
zero, or up if !!count!! is less than zero.  The number of lines scrolled is
based on count and units.  Valid values for !!units!! are
``page'',
``halfpage'', or
``line''.
The default for units is ``line''.

``select-adjust ()''
<p indent>
This action extends the selection.  The amount of text selected depends on the
number of mouse clicks:
<list bullet tight>
*1 click = char
*2 clicks = word
*3 clicks = line
*4 clicks = buffer
<\list>

``select-all ()''
<p indent>
This action selects all text.

``select-page ()''
<p indent>
This action selects all text on the screen.

``self-insert ()''
<p indent>
This action sends the character associated with the key pressed to the child
process.

``soft-reset ()''
<p indent>
This action perform a soft reset of the terminal.

``stop'' (!!state!!)
<p indent>
This action either toggles, starts, or stops the process of reading data
from the child process.  Valid values for !!state!! are
``toggle'',
``on'', and
``off''.

``string'' (!!string!!)
<p indent>
This action insert the specified text string as if it had been typed.
The string must be quoted if it contains whitespace or non-alphanumeric
characters.  The string is interpreted as a hex character constant if it
begins with the characters ``0x''.

``tab ()''
<p indent>
This action sends a tab to the child process.

``visual-bell ()''
<p indent>
This action flashes the window quickly.

<procedure>Virtual Bindings
The bindings for virtual keys are vendor specific.
Virtual bindings do not apply when the ``dtterm'' widget has input focus.
For information about bindings for virtual buttons and keys, see ``VirtualBindings(3X)''.

<s1 id=translations>TRANSLATIONS
``DtTerm'' includes translations from Primitive.
Note that altering translations in ``#override''
or ``#augment'' mode is undefined.

<lablist tight width=4.25in>
\&<Key>Up:\   move-cursor(up)
\&<Key>Down:\   move-cursor(down)
\&<Key>Left:\   move-cursor(backward)
\&<Key>Right:\   move-cursor(forward)
\Shift&<Key>Prior:\   scroll(-1, page)
\Shift&<Key>Next:\   scroll(1, page)

\&<Key>Find:\   edit-key(find)
\&<Key>Insert:\   edit-key(insert)
\&<Key>Select:\   edit-key(select)
\&<Key>Remove:\   edit-key(remove)
\~Shift&<Key>Prior:\   edit-key(prior)
\~Shift&<Key>Next:\   edit-key(next)

\Meta&<Key>Break:\   soft-reset()
\Shift&<Key>Break:\   hard-reset()
\~Shift~Meta&<Key>Break:\   break(long)
\Ctrl&<Key>Cancel:\   stop(toggle)
\~Ctrl&<Key>Cancel:\   stop(toggle)
\~Shift&<Key>Tab:\   tab()

\&<Key>KP_F1:\   keypad-key-execute(f1)
\&<Key>KP_F2:\   keypad-key-execute(f2)
\&<Key>KP_F3:\   keypad-key-execute(f3)
\&<Key>KP_F4:\   keypad-key-execute(f4)
\&<Key>KP_Space:\   keypad-key-execute(space)
\&<Key>KP_Tab:\   keypad-key-execute(tab)
\&<Key>KP_Enter:\   keypad-key-execute(enter)
\&<Key>KP_Equal:\   keypad-key-execute(equal)
\&<Key>KP_Multiply:\   keypad-key-execute(multiply)
\&<Key>KP_Add:\   keypad-key-execute(add)
\&<Key>KP_Separator:\   keypad-key-execute(separator)
\&<Key>KP_Subtract:\   keypad-key-execute(subtract)
\&<Key>KP_Decimal:\   keypad-key-execute(decimal)
\&<Key>KP_Divide:\   keypad-key-execute(divide)
\&<Key>KP_0:\   keypad-key-execute(0)
\&<Key>KP_1:\   keypad-key-execute(1)
\&<Key>KP_2:\   keypad-key-execute(2)
\&<Key>KP_3:\   keypad-key-execute(3)
\&<Key>KP_4:\   keypad-key-execute(4)
\&<Key>KP_5:\   keypad-key-execute(5)
\&<Key>KP_6:\   keypad-key-execute(6)
\&<Key>KP_7:\   keypad-key-execute(7)
\&<Key>KP_8:\   keypad-key-execute(8)
\&<Key>KP_9:\   keypad-key-execute(9)

\Shift&<Key>F1:\   function-key-execute(1, UDK)
\Shift&<Key>F2:\   function-key-execute(2, UDK)
\Shift&<Key>F3:\   function-key-execute(3, UDK)
\Shift&<Key>F4:\   function-key-execute(4, UDK)
\Shift&<Key>F5:\   function-key-execute(5, UDK)
\Shift&<Key>F6:\   function-key-execute(6, UDK)
\Shift&<Key>F7:\   function-key-execute(7, UDK)
\Shift&<Key>F8:\   function-key-execute(8, UDK)
\Shift&<Key>F9:\   function-key-execute(9, UDK)
\Shift&<Key>F10:\   function-key-execute(10, UDK)
\Shift&<Key>F11:\   function-key-execute(11, UDK)
\Shift&<Key>F12:\   function-key-execute(12, UDK)
\Shift&<Key>F13:\   function-key-execute(13, UDK)
\Shift&<Key>F14:\   function-key-execute(14, UDK)
\Shift&<Key>F15:\   function-key-execute(15, UDK)
\Shift&<Key>F16:\   function-key-execute(16, UDK)
\Shift&<Key>F17:\   function-key-execute(17, UDK)
\Shift&<Key>F18:\   function-key-execute(18, UDK)
\Shift&<Key>F19:\   function-key-execute(19, UDK)
\Shift&<Key>F20:\   function-key-execute(20, UDK)
\Shift&<Key>F21:\   function-key-execute(21, UDK)
\Shift&<Key>F22:\   function-key-execute(22, UDK)
\Shift&<Key>F23:\   function-key-execute(23, UDK)
\Shift&<Key>F24:\   function-key-execute(24, UDK)
\Shift&<Key>F25:\   function-key-execute(25, UDK)
\Shift&<Key>F26:\   function-key-execute(26, UDK)
\Shift&<Key>F27:\   function-key-execute(27, UDK)
\Shift&<Key>F28:\   function-key-execute(28, UDK)
\Shift&<Key>F29:\   function-key-execute(29, UDK)
\Shift&<Key>F30:\   function-key-execute(30, UDK)
\Shift&<Key>F31:\   function-key-execute(31, UDK)
\Shift&<Key>F32:\   function-key-execute(32, UDK)
\Shift&<Key>F33:\   function-key-execute(33, UDK)
\Shift&<Key>F34:\   function-key-execute(34, UDK)
\Shift&<Key>F35:\   function-key-execute(35, UDK)
\~Shift&<Key>F1:\   function-key-execute(1)
\~Shift&<Key>F2:\   function-key-execute(2)
\~Shift&<Key>F3:\   function-key-execute(3)
\~Shift&<Key>F4:\   function-key-execute(4)
\~Shift&<Key>F5:\   function-key-execute(5)
\~Shift&<Key>F6:\   function-key-execute(6)
\~Shift&<Key>F7:\   function-key-execute(7)
\~Shift&<Key>F8:\   function-key-execute(8)
\~Shift&<Key>F9:\   function-key-execute(9)
\~Shift&<Key>F10:\   function-key-execute(10)
\~Shift&<Key>F11:\   function-key-execute(11)
\~Shift&<Key>F12:\   function-key-execute(12)
\~Shift&<Key>F13:\   function-key-execute(13)
\~Shift&<Key>F14:\   function-key-execute(14)
\~Shift&<Key>F15:\   function-key-execute(15)
\~Shift&<Key>F16:\   function-key-execute(16)
\~Shift&<Key>F17:\   function-key-execute(17)
\~Shift&<Key>F18:\   function-key-execute(18)
\~Shift&<Key>F19:\   function-key-execute(19)
\~Shift&<Key>F20:\   function-key-execute(20)
\~Shift&<Key>F21:\   function-key-execute(21)
\~Shift&<Key>F22:\   function-key-execute(22)
\~Shift&<Key>F23:\   function-key-execute(23)
\~Shift&<Key>F24:\   function-key-execute(24)
\~Shift&<Key>F25:\   function-key-execute(25)
\~Shift&<Key>F26:\   function-key-execute(26)
\~Shift&<Key>F27:\   function-key-execute(27)
\~Shift&<Key>F28:\   function-key-execute(28)
\~Shift&<Key>F29:\   function-key-execute(29)
\~Shift&<Key>F30:\   function-key-execute(30)
\~Shift&<Key>F31:\   function-key-execute(31)
\~Shift&<Key>F32:\   function-key-execute(32)
\~Shift&<Key>F33:\   function-key-execute(33)
\~Shift&<Key>F34:\   function-key-execute(34)
\~Shift&<Key>F35:\   function-key-execute(35)
\&<KeyPress>:\   self-insert()
\~Shift~Ctrl&<Btn1Down>:\   grab-focus()
\Shift~Ctrl&<Btn1Down>:\   extend-start()
\~Ctrl&<Btn1Motion>:\   select-adjust()
\~Ctrl&<Btn1Up>:\   extend-end()
\&<Btn2Down>:\   process-bdrag()
\&<Btn2Up>:\   copy-to()
<\lablist>
