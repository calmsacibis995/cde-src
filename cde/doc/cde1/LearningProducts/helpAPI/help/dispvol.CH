<chapter id=ChapterProcessingAndDisplayingHelpVolume > Processing \ and Displaying \ a Help Volume 

<!-- IFDEF ONLINE ONLY -->
<list bullet tight>
 * <xref CreatingRunTimeHelpFiles>
 * <xref ViewingHelpVolume>
 * <xref TestingYourHelp>
<\list>
<!-- IFDEF ONLINE ONLY END -->



&headerFix;

		<idx|processing help volume|
		<idx|displaying: help volume|
		<idx|volume: displaying|


Before a help volume can be displayed, you must create !!run-time help
files!! by processing your files with the &TagAppName; software.  

<procedure>What &TagAppName; Does

The &TagAppName; software, which is invoked by the ``dthelptag'' command,
does two significant tasks:

<list order loose>

 * The &TagAppName; <term nogloss|parser| converts your marked-up files
   into an internal format understood by the the &ProductName;.  If you've
   made any markup errors, the errors are listed in a file named
   ``%%volume%%.err''.

 * If there are no parser errors, the master help volume file
   (``%%volume%%.sdl'') is created.


<\list>

<procedure>Viewing Your Volume

When &TagAppName; finishes, your help volume is ready to be displayed.  You can
display it using the ``dthelpview'' command.  Or, if you have written help
for an application and the application is ready to use, you can display
your help by running the application and asking for help.


<!-- IFDEF ONLINE ONLY -->
<!-- seealsos/Hprohvol.SA -->
<!-- SEE ALSO ONLINE -->

<procedure>See Also

<list bullet tight>
 * <xref ChapterRegisteringHelpVolumes>
<\list>

<!-- IFDEF ONLINE ONLY END -->



<s1 id=CreatingRunTimeHelpFiles > Creating Run-Time Help Files

<!-- IFDEF ONLINE ONLY -->
<!-- &CreatingRunTimeHelpFilesSubtopics; -->
<list bullet tight>
* <xref ToRunHelpTagTA>
* <xref ToReviewAndCorrectErrorsTA>
<\list>
<!-- IFDEF ONLINE ONLY END -->

		<idx|creating: run-time help files|
		<idx|run-time files|
		<idx|files, run-time help: creating|

When you run &TagAppName; (by using the ``dthelptag'' command), it reads your
``%%volume%%.htg'' file and any additional source files that are included
using entities.  Also, graphics file names are validated.

<figure nonumber entity=HPHelpKit-TheBigBuildPicture>
<\figure>

The output from &TagAppName; is a run-time help volume.  This file,
plus your graphics files, are read by the &ProductName; to display help
topics.


<procedure>&TagAppName; Output

The run-time help file has the same base name as your
``%%volume%%.htg'' file.  For example, if your ``%%volume%%.htg'' is named
``Librarian.htg'', then the help volume name is ``Librarian.sdl''.


<!-- seealsos/Hprrunt.SA -->
<!-- SEE ALSO -->

<procedure>See Also

For more information about the files generated by &TagAppName;, refer to <xref
GatheringRunTimeHelpFilesSI>.

<!-- IFDEF ONLINE ONLY -->
<!-- SEE ALSO ONLINE -->

<procedure>See Also

<list bullet tight>
 * <xref ChapterRegisteringHelpVolumes> includes more information about the
   files generated by &TagAppName;.
<\list>


<newpage>
<!-- IFDEF ONLINE ONLY END -->



<s2 id=ToRunHelpTagTA > To run `dthelptag'

		<idx|running: ``dthelptag''|
		<idx|``dthelptag'' command|
		<idx|run-time files: creating|
		<idx|files, run-time help|
		<idx|accessing: help|

<need begin>

<list order>

 * Be sure the ``/opt/dt/bin/dthelptag'' command is in your search
   path.  (If you're not sure how to do this, contact your system
   administrator.) 

 * Change to the directory where your ``%%volume%%.htg'' file is located.

 * Run the ``dthelptag'' command as follows:

<ex>
dthelptag  %%command-options%%  %%volume%%  %%parser-options%%
<\ex>

Where %%command-options%% are options entered before the %%volume%% name and
%%parser-options%% are options entered after the %%volume%% name.  
<xref ProcessingHelpTagSI> lists all available options.

<\list>

<need end>


<!--
<procedure>Search paths
-->


<procedure>Example: Commands

The following command processes a help volume named ``MyVolume'':

<ex smaller>
dthelptag MyVolume
<\ex>

Using the ``-verbose'' option causes
the progress of the processing to be displayed on your screen:

<ex smaller>
dthelptag -verbose MyVolume
<\ex>

Adding a search path enables &TagAppName; to find files stored in a subdirectory
(of the current directory) named ``graphics/'':

<ex smaller>
dthelptag -verbose MyVolume search=graphics
<\ex>

<procedure>Example: A `helptag.opt' File

Here's a sample ``helptag.opt'' file showing that each option is on a
separate line.  It would be appropriate for creating a draft version of
the volume.

<ex smaller>
memo
onerror=go
search=graphics/
search=entityFiles/
<\ex>

Before producing the final version of the help volume, you would remove
the ``memo'' and ``onerror=go'' lines.  


<newpage>


<!-- seealsos/Hprrunht.SA -->
<!-- IFDEF ONLINE ONLY -->
<!-- SEE ALSO ONLINE -->

<procedure>See Also

<list bullet tight>
 * <xref ToReviewAndCorrectErrorsTA>
<\list>

<!-- IFDEF ONLINE ONLY END -->



<s2 id=ToReviewAndCorrectErrorsTA > To review and correct parser errors
		<idx|reviewing: errors|
		<idx|correcting errors|
		<idx|errors, correcting|


<list bullet>

 * Look at the contents of the ``%%volume%%.err'' file after running &TagAppName;
   (where %%volume%% is the base name of your ``%%volume%%.htg'' file).

<\list>

Each error listed in the ``%%volume%%.err'' file begins with a string of
asterisks (``*****'').  For example, the following error was detected at
line 54 of the file ``actions'':

<ex smaller>
&empty;*****
Line 54 of actions,
Missing end tag for LIST:
...he execution host becomes the current working directory.

&<s2 id=EverythingYouNeedToKnow>E...
Current element is LIST begun on Line 28 of actions.
<\ex>

A few lines of the file are shown to give you some context for the error.
Also, there is a hint that the current element is a "LIST" started
on line 28 of the same file.  An ``&<s2>'' is not allowed within a list,
so it appears that the author forgot to enter the ``&<\list>'' end tag. 

It's possible for a single simple error to produce several error messages.
This is because the first error may cause the parser to lose track of the
intended context, making it impossible to interpret subsequent markup
properly.


<!-- IFDEF ONLINE ONLY -->
<!-- seealsos/Hprerr.SA -->
<!-- SEE ALSO ONLINE -->

<procedure>See Also

<list bullet tight>
 * <xref ToRunHelpTagTA>
<\list>

<!-- IFDEF ONLINE ONLY END -->



<s1 id=ViewingHelpVolume > Viewing a Help Volume

<!-- IFDEF ONLINE ONLY -->
<!-- &ViewingHelpVolumeSubtopics; -->
<list bullet tight>
* <xref ToRunHelpview>
<\list>

<!-- IFDEF ONLINE ONLY END -->

		<idx|viewing help volume|
		<idx|volume: viewing|
		<idx|accessing: help|


The &ViewerAppName; application can be used to display any help volume.  It supports
all types of hyperlinks except application-defined links (because it cannot
know how your links are to be interpreted).

If you are writing application help and your application is ready to use,
you can also view your help by running your application, then requesting
help just as a user would.



<s2 id=ToRunHelpview > To run `dthelpview'

		<idx|running: ``dthelpview''|
		<idx|``dthelpview'', running|
		<idx|accessing: help|

<list bullet>

 * If the ``%%volume%%.sdl'' file for the volume you want to display is
   either in the current directory or has been "registered," execute this
   command:  

<ex>
dthelpview -helpVolume %%volume%% &
<\ex>

 * !!Or,!! if the ``%%volume%%.sdl'' is in another directory (and hasn't
been registered), execute this command:

<ex>
dthelpview -helpVolume /%%full-path%%/%%volume%%.sdl &
<\ex>

 * !!Or,!! open a File Manager view of the directory where the
   ``%%volume%%.sdl'' file is and double-click
   its icon.  The default action for a ``.sdl'' file is to run ``dthelpview''.

<\list>

The ``-helpVolume'' parameter can be shortened to ``-h'' in any of these
commands.

<procedure>Example

Suppose you just edited your help volume.  You would first
process it with the &TagAppName; software:

<ex smaller>
dthelptag MyVolume
<\ex>

If no errors occurred, you could then display it with this command:

<ex smaller>
dthelpview -h MyVolume &&
<\ex>


<procedure>Example: A Personal \ Help Directory

During a project, you may want to access the help volume you are
developing, but not expose it to all users on your system.  For example,
suppose your working directory is ``/projects/help/'' and your help
volume is named ``Myvolume''.

First, create a personal help directory in your home directory where you can
register the volume:

<ex smaller>
mkdir -p $HOME/.dt/help/C
<\ex>

Now create a symbolic link to the ``Myvolume.sdl'' file
(which is created by the &TagAppName software):

<ex smaller>
ln -s /projects/help/Myvolume.sdl $HOME/.dt/help/C/Myvolume.sdl
<\ex>

You can now display the volume with the following command (regardless of your
current working directory)
because the ``.dt/help/C/'' directory within your home directory
is one of the first places the help system looks for help volumes.

<ex smaller>
dthelpview -helpVolume Myvolume &
<\ex>

<!-- seealsos/Hprruhv.SA -->
<!-- SEE ALSO -->

To display the online version of the guide you are now reading,
you can execute this command from any directory:

<ex smaller>
dthelpview -helpVolume online &
<\ex>

<procedure>See Also

<list bullet tight>
 * <xref DisplayingHelpSI> lists options available for the
``dthelpview'' command.
<\list>

<!-- IFDEF ONLINE ONLY -->
<!-- SEE ALSO ONLINE -->

<procedure>See Also

<list bullet tight>
 * <xref DisplayingHelpSI> lists options available for the
``dthelpview'' command.
<\list>
<!-- IFDEF ONLINE ONLY END -->



<s1 id=TestingYourHelp > Testing Your Help

		<idx|testing: help|
		<idx|validating hyperlinks|
		<idx|hyperlink: validating hyperlinks|
		<idx|verifying application entry points|
		<idx|application entry points, verifying|
		<idx|entry points in application, verifying|
		<idx|points, entry, verifying in application|
		<idx|testing: graphics on various displays|
		<idx|graphics, testing on various displays|
		<idx|displays, testing graphics on various|


Testing your help volume is as important as testing any software product.
Here are some tips to help you plan your testing:

<procedure>Validating Hyperlinks

<list bullet tight>

 * Display your help volume and try every hyperlink.  Any underlined text
   (solid or dashed underlines) is a hyperlink.  Also, test any
   graphics that are hyperlinks.  Graphic hyperlinks use an
   open cornered border around the image as a hyperlink cue.


 * If you are writing application-specific help and you have included any
   ``JumpNewView'', ``Man'', or ``AppDefined'' links,
   you must test these links from your application.  
   Testing such links from &ViewerAppName; does not ensure that the links will
   operate correctly from within your application.

<\list>


<procedure>Verifying Entry Points

If you are writing application-specific help that uses IDs to access
particular help
topics, there are two ways to verify that the IDs have been properly
established within the help volume:

<list bullet tight>

 * Run your application and request help just as a user will, trying each of
   the entry points.  This also verifies that the application is using the
   correct IDs.

 * If your application is not ready to use (still under development), you
   can test each ID by running &ViewerAppName; for each ID:

<ex>
dthelpview -helpVolume %%volume%% -locationId %%id%%
<\ex>

   Where %%id%% is the location ID that you want to test.  If &ViewerAppName;
   displays the correct topic, then the ID is okay.

<\list>


<procedure>Testing Graphics

<list bullet tight>
 * Physically run your application on various displays to verify that the
   graphics are acceptable on color, grayscale, and monochrome displays.

 * Print your help volume to verify that the printed
   graphics are acceptable.  Graphics appear in hardcopy the same as
   on a monochrome display.

 * You can also simulate other displays by changing the "CDE Color Use"
    in Style Manager's Color dialog.

<\list>


<!-- seealsos/Hprtest.SA -->
<!-- SEE ALSO -->

<procedure>See Also

<list bullet tight>
 * <xref PrintingHelpTopicsSI>
<\list>
