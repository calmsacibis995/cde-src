#!/usr/local/bin/perl

eval "exec /usr/local/bin/perl -S $0 $*"
    if $running_under_some_shell;

########################################################
# required files
########################################################
# Add the test directory to the locations to search for
# libraries.
push(@INC,"/x/cdesrc/admin/BuildTools/rcs_tools");
require 'RcsSock.pl';
require 'RcsUTest.pl';

########################################################
# define variables
########################################################
&InitializeVariables();
$exitValue = 0;
# do not buffer output
select(STDERR); $| =1;
select(STDOUT); $| =1;

#######################################################
# define local subroutines
#######################################################
#
# The following are signal handlers for abort due a specific signal
#
sub abortHUP {
        local(@errormessage);
        @errormessage = ("*** Client terminated with signal 1 -> SIGHUP ***");
        &Exit(1,@errormessage);
}
sub abortINT {
        local(@errormessage);
        &Exit(1,@errormessage);
}
sub abortQUIT {
        local(@errormessage);
        @errormessage = ("*** Client terminated with signal 3 -> SIGQUIT ***");
        &Exit(1,@errormessage);
}
sub abortTERM {
        local(@errormessage);
        @errormessage = ("*** Client terminated with signal 15 -> SIGTERM ***");
        &Exit(1,@errormessage);
}

########################################################
# Catch signals
########################################################
$SIG{'INT'} = 'abortINT';
$SIG{'HUP'} = 'abortHUP';
$SIG{'QUIT'} = 'abortQUIT';
$SIG{'TERM'} = 'abortTERM';


########################################################
# argument processing
########################################################
$IsDashROption = 0;
$TwoDashROptions = 0;
while ( $ARGV[0] =~ /^-/ ){
	$_ = shift;

	if (/^-H(.*)$/){
		# specify remote host
		$rhost = ($1 ? $1 : shift);
	}
	elsif (/^-P(.*)$/){
		# specify port
		$port = ($1 ? $1 : shift);
	}
	elsif (/^-D$/){
		# turn on debugging output
		$Debug = 1;
	}
	elsif (/^(-[befhn]$)/) {
		#
		# args which may not have associated strings
		#
		push(@Rcsargs,$1);
	}
	elsif (/^(-p$)/) {
		#
		# args which may not have associated strings
		# this is only a remote arg
		#
		push(@remoteRcsArgs,$1);
	}
	elsif (/^(-r)(.*)$/) {
		#
		# if 2 -r options then don't send local file to remote
		# server
		if (++$IsDashROption == 2) {
			$TwoDashROptions = 1;
		}
		
		#
		# args which allow associated strings
		# if so quote the strings to save embedded blanks etc.
		#
		if ( "$2" ) {
			push(@Rcsargs, $1 . "'" . $2 . "'" );
		} else {
			push(@Rcsargs, $1 );
		}
	}
	elsif (/^(-c)(.*)$/) {
		#
		# args which allow associated strings
		# if so quote the strings to save embedded blanks etc.
		#
		if ( "$2" ) {
			push(@Rcsargs, $1 . "'" . $2 . "'" );
		} else {
			push(@Rcsargs, $1 );
		}
	}
	else {
		@errorMessage = ("Unrecognized flag: \"$_\"\n");
		&Exit(1,@errorMessage);
	}
}

#
# get the files and do appropriate error checking
# see if the files are local or remote
#
# for some reason while(@ARGV) cannot be in a subroutine
while ( @ARGV ) {
	$tstfile=shift;
	$tmp = `basename $tstfile`;
	chop $tmp;

	# if there is a wildcard unexpanded for the RCS vault
	# store for later processing
	#
	if (($tstfile =~ m%[\*\?]%) || ($tstfile =~ m%\[.*\]%)) {
		$tmpdir =`dirname $tstfile`;
		chop $tmpdir;
		if (($tmpdir =~ m%^RCS%) || ($tmpdir =~ m%\/RCS%)) {
			$realtmpdir = &IsRcsDirectoryLocal($tmpdir);
			$newtstfile = "${realtmpdir}/${tmp}";
			push(@wildCardFiles,$newtstfile);
		}
	}			
	# don't do RCS dir
	elsif ("$tmp" ne "RCS")  {
		push(@allFiles, $tstfile);
	}
}

if ((! defined(@allFiles)) && (! defined(@wildCardFiles))) {
	@errorMessage = ("NO FILES to Process");
        &Exit(1,@errorMessage);
}

# must be a readable file or exit, can be writable file
# don't need readable file if 2 -r options
if ($TwoDashROptions) {
	$needReadableFile = 0;
}
else {
	$needReadableFile = 1;
}
# get all of the correct file names, local and remote
&GetFilePaths($needReadableFile);


####################################################################
# debug argument processing
####################################################################
if ( $Debug ) {
	print "rhost= $rhost\n";
	print "port= $port\n";
	print "Rcsargs= \"@Rcsargs\"\n";
	print "localExchangeFiles= \"@localExchangeFiles\"\n";
	print "remoteExchangeFiles= \"@remoteExchangeFiles\"\n";
	print "remoteCommaVFiles = \"@remoteCommaVFiles\"\n";
	print "originalFiles = \"@originalFiles\"\n";
	print "wildCardFiles = \"@wildCardFiles\"\n";
	print "allremoteExchangeFiles = \"@allRemoteExchangeFiles\"\n";
}

##################################################################
# Process the local files
# Run local Rcs commands
##################################################################
if (defined(@localExchangeFiles)) {
	$tmpExitValue = system "$RcsPrg @Rcsargs @localExchangeFiles";

	# reset exit value if necessary
	if ((!$exitValue) && ($tmpExitValue)) {
		$exitValue = 1;
	}
}

if ((defined(@allRemoteExchangeFiles)) || (defined(@wildCardFiles))) {

	##################################################################
	# Open the connection
	##################################################################
        if (! ($SOCK_HANDLE = &sock'open($rhost,$port))) {
		@errorMessage = ("Connect to \"$rhost\" failed: $!");
		&Exit(1,@errorMessage);
	}

	# send username
	print $SOCK_HANDLE  "USER: $userName\n";

	#
	# Expand wildcards if there are any.
	# Pass the basic command string.
	#
	if (!defined(@wildCardFiles)) {
		print $SOCK_HANDLE "$RemoteRcsPrg \n";
	}
	else {
		print $SOCK_HANDLE "$RemoteRcsPrg @wildCardFiles\n";
		#
		# get the complete wildcard paths from the server.
		# Add them to the list of remote exchange files.
		&getWildCardsFromServer($needReadableFile);
	}

	#
	# Pass the basic rcsdiff command string with wild cards included
	#
	print $SOCK_HANDLE "$RemoteRcsPrg @Rcsargs @remoteRcsArgs @allRemoteExchangeFiles\n";
	print "$RemoteRcsPrg @Rcsargs @remoteRcsArgs @allRemoteExchangeFiles\n" if $Debug;
	#
	# indicate whether 2 -r options
	#
	print $SOCK_HANDLE  "$TwoDashROptions\n";

	# 
	# if not 2 -r options, need to send a file for diffing
	#
	if (! $TwoDashROptions) {
		foreach $file (@originalFiles) {
			#
			# send the diff files to the server
			#
			if (!open(OFILE,"$file")) {
				print STDERR "	ERROR - cannot open $file $!\n";
				print STDERR "	        Not processing $file\n";
				$exitValue = 1;
				next;
			}
			chop($wcount=`wc $file`);
			print $SOCK_HANDLE ">>### BEGIN RCS DIFF: ", $wcount, " ###<<\n";
			while ( <OFILE> ) {
				print $SOCK_HANDLE $_;
			}
			print $SOCK_HANDLE ">>### END RCS DIFF: ", $wcount, " ###<<\n";
		}
		print $SOCK_HANDLE ">>### RCS DIFF DONE ###<<\n";
	}
	#
	# get the command output
	#
	while (<$SOCK_HANDLE>) {
		if (m%^>>### RCS DIFF ALL DONE ###<<$%) {
			last;
		}
		else {
			print;
		}
	}
	$tmpExitValue = <$SOCK_HANDLE>;
	&checkForDeadServer($tmpExitValue);
	chop $tmpExitValue;

	#
	# reset the exit value if necessary
	#
	if ((!$exitValue) && ($tmpExitValue)){
		$exitValue = 1;
	}
	&sock'close($SOCK_HANDLE);
}
&Exit($exitValue,@nullError);


