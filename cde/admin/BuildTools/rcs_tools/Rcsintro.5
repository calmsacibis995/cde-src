.\" $Header: Rcsintro.5,v 1.2 93/07/12 20:19:18 xbuild_hp_cv Exp $
.TH Rcsintro 5
.ds )H Hewlett-Packard Company
.ds ]W HP-UX Release 9.0: August 1992
.SH NAME
Rcsintro \- description of \s-1RCS\s0 commands
.SH DESCRIPTION
Revision Control System (\s-1RCS\s0) automates the storing, retrieval,
logging, identification, and merging of revisions of
.SM ASCII
text files.
.SM RCS
is useful for managing files that are revised frequently.
This man page has been altered to include information concerning remote
access of RCS vaults that are outside a user's normal network.
.SS Functions of \s-1RCS\s0
.TP 3
\(bu
Storage and retrieval of revisions of text files.
.SM RCS
saves revisions
in a space efficient way.  Revisions can be retrieved by ranges of
revision numbers, symbolic names, dates, authors, and states.
.TP
\(bu
Maintenance of a complete history of changes.
.SM RCS
logs all changes
automatically.  In addition to the text of each revision,
.SM RCS
stores the
author, date and time of
check in, and a log message summarizing the change.
.TP
\(bu
Resolution of access conflicts.  When two or more people try to
modify the same revision of a file,
.SM RCS
alerts them and prevents one
modification from corrupting the other.
.TP
\(bu
Maintenance of a tree of revisions.
.SM RCS
can maintain separate lines of
development for each file.  It stores a tree structure that represents the
ancestral relationships among revisions.
.TP
\(bu
Merging of revisions and resolution of conflicts.
Two separate lines of development of a file can be coalesced by merging.
If the revisions to be merged affect the same lines of a file,
.SM RCS
flags
the overlapping changes.
.TP
\(bu
Release and configuration control.  Revisions can be assigned symbolic names
and marked as released, stable, experimental, etc.
With these facilities, configurations of a file can be
described simply and directly.
.TP
\(bu
Automatic identification of each revision with filename, revision number,
creation time, author, etc.
This identification is like a stamp that can be
embedded at an appropriate place in the text of a revision.
These stamps make it simple to determine which
revisions of which files make up a given configuration.
.TP
\(bu
Minimization of secondary storage.
.SM RCS
uses very little extra space for
revisions (only the differences are stored).  If intermediate revisions are
deleted, the remaining deltas are compressed accordingly.
.SS Getting Started with \s-1RCS\s0
.PP
The basic user interface is extremely simple.
The novice only needs to learn two commands:
.IR Ci (1)
and
.IR Co (1).
.IR Ci ,
short for "check in," deposits the contents of a
text file into an archival file called an
.SM RCS
file.
An
.SM RCS
file contains all revisions of a particular text file.
.IR Co ,
short for "check out", retrieves revisions from an
.SM RCS
file.
.PP
Suppose you have a file
.I f.c
that you wish to put under control of
.SM RCS.
Invoke the check in command:
.IP
.I Ci  f.c
.PP
.ne 4
This command creates the
.SM RCS
file
.IR f.c,v ,
stores
.I f.c
into it as revision
.IR 1.1 ,
and deletes
.IR f.c .
It also asks you for a description.
The description should be a synopsis of the contents of the file.
All subsequent check-in commands will ask for a log entry,
which should summarize the changes that were made.
.PP
Files with names ending with
.I ,v
are called
.SM RCS
files ("v" stands for
"versions"), all other files are presumed to be working files.
To get back the working file
.I f.c
in the previous example, use the check out command:
.IP
.I Co  f.c
.PP
This command extracts the latest revision from
.I f.c,v
and writes it into
.IR f.c .
You can now edit
.I f.c
and check it back in by invoking:
.IP
.I Ci  f.c
.PP
.I Ci
increments the revision number properly.
If
.I Ci
complains with the message:
.IP
.I 	ci error: no lock set by <your login>
.PP
your system administrator has decided to create all
.SM RCS
files with the locking attribute set to "strict".
In this case, you should have locked the revision
during the previous check out.
Your last check out should have been:
.IP
.I Co  \-l  f.c
.PP
Of course, it is too late now to do the check out with locking,
because you probably modified
.I f.c
already, and a second check out would overwrite your modifications.
Instead, invoke:
.IP
.I Rcs  \-l  f.c
.PP
This command will lock the latest revision for you, unless somebody
else has already locked it.
In that case, you will have to negotiate with that person.
.PP
Locking assures that you, and only you,
can check in the next update, and avoids nasty problems
if several people work on the same file.
Even if a revision is locked, it can still be checked out for reading,
compiling, etc.
All that locking prevents is a check in by anybody but the locker.
.PP
If your
.SM RCS
file is private, i.e., if you are the only person who is going
to deposit revisions into it, strict locking is not needed and you
can turn it off.
If strict locking is turned off, the owner of the
.SM RCS
file need not have a lock for check in; all others
still do.
Turning strict locking off and on is done with the commands:
.IP
.I Rcs  \-U  f.c
.PP
and
.IP
.I Rcs  \-L  f.c
.PP
If you do not want to clutter your working directory with
.SM RCS
files, create a subdirectory called
.SM RCS
in your working directory, and move all your
.SM RCS
files there.
.SM RCS
commands will search that directory to find needed files.
All the commands discussed above will still work without any modification.
.PP
To avoid the deletion of the working file during check in (in case you want to
continue editing), invoke:
.IP
.I Ci  \-l  f.c
.PP
or
.IP
.I Ci  \-u  f.c
.PP
These commands check in
.I f.c
as usual, but perform an implicit check out.
The first form also locks the checked in revision,
the second one does not.
Thus, these options save you one check out operation.
The first form is useful if locking is strict; the second one if not strict.
Both update the identification markers in your working file (see below).
.PP
You can give
.I Ci
the number you want assigned to a checked in revision.
Assume all your revisions were numbered 1.1, 1.2, 1.3, etc.,
and you would like to start release 2.
The command:
.IP
.I Ci  \-r2  f.c
.PP
or
.IP
.I Ci  \-r2.1  f.c
.PP
assigns the number 2.1 to the new revision.
From then on,
.I Ci
will number the subsequent revisions with 2.2, 2.3, etc.
The corresponding
.I Co
commands:
.IP
.I Co  \-r2  f.c
.PP
and
.IP
.I Co  \-r2.1  f.c
.PP
retrieve the latest revision numbered 2.x and the revision 2.1, respectively.
.I Co
without a revision number selects the latest revision on the "trunk";
i.e., the highest revision with a number consisting of 2 fields.
Numbers with more than 2 fields are needed for branches.
For example, to start a branch at revision 1.3, invoke:
.IP
.I Ci  \-r1.3.1  f.c
.PP
This command starts a branch numbered 1 at revision 1.3, and assigns
the number 1.3.1.1 to the new revision.
For more information about branches, see
.IR Rcsfile (4).
.SS \s-1RCS\s0 File Naming and Location
.PP
.SM RCS
recognizes two kinds of files:
.SM RCS
files (revision archives), and working files.
Working filenames are defined by the
.SM RCS
user,
.SM RCS
file names are generated by
.SM RCS
by appending 
.I ,v
to the working file name.
Pairs of
.SM RCS
files and working files can be specified in 3 ways:
.RS
.TP 3
\(bu
Both the
.SM RCS
file and the working file are given.  The
.SM RCS
filename
is of the form
.I path1/workfile,v
and the working filename is of the form
.IR path2/workfile ,
where
.I path1
and
.I path2
are (possibly different or empty) paths and
.I workfile
is a filename.
Currently, if you are not in the directory where the RCS directory
exists either as a real directory or symbolic link, you must specify the
full path name.
.TP
\(bu
Only the
.SM RCS
file is given.
Then the working file is assumed to be in the current directory
and its name is derived from the name of the
.SM RCS
file by removing
.I path1/
and the suffix 
.IR ,v .
.TP
\(bu
Only the working file is given.
Then the name of the
.SM RCS
file is derived from the name of the working file by removing
.I path2/
and appending the suffix 
.IR ,v .
.RE
.PP
If the
.SM RCS
filename is omitted or specified without a path,
.SM RCS
commands look for the
.SM RCS
file in the directory
.I ./RCS
(or the directory it points to if it is a directory link),
then in the current working directory.
.SS \s-1RCS\s0 Directory Links
.SM RCS
supports directory links.
If a regular file named
.SM RCS
exists in the current working directory,
.SM RCS
interprets the first line as a path name to the directory where
.SM RCS
files are stored.
.SM RCS
will try to resolve the symbolic link. If it cannot, it 
will check remotely for the existence of the 
.SM RCS 
directory.
.SS Automatic Identification
.SM RCS
can put special strings for identification
into your source and object code.
To obtain such identification, place the marker:
.IP
.I $\&Header$
.PP
into your text, for instance inside a comment.
.SM RCS
replaces this marker with a string of the form:
.IP
.I $\&Header: "  filename  revision_number  date  time  author  state"$
.PP
With such a marker on the first page of each module,
you can always see with which revision you are working.
.SM RCS
keeps the markers up-to-date automatically.
To propagate the markers into your object code,
simply put them into literal character strings.
In C, this is done as follows:
.IP
.I static char rcsid[] = "$\&Header$";
.PP
The command
.I Ident
extracts such markers from any file, even object code and dumps.
Thus,
.I Ident
lets you find out which revisions of which modules
were used in a given program.
.PP
You may also find it useful to put the marker
.I  $\&Log$
into your text, inside a comment.
This marker accumulates the log messages that are requested during check in.
Thus, you can maintain the complete history of your file directly inside it.
There are several additional identification markers.  See
.IR Co (1)
for details.
.SH WARNINGS
Names of
.SM RCS
files are generated by appending
.I ,v
to the end of the working file name.
If the resulting
.SM RCS
file name is too long for the file system on which the
.SM RCS
file should reside, the
.SM RCS
command terminates with an error message.
.PP
.SM RCS
is designed to be used with
.SM TEXT
files only.
Attempting to use
.SM RCS
with non-text (binary) files
will result in data corruption.
.SH AUTHOR
.I Rcsintro
was modified from the 
.I rcsintro
man page by Marc Ayotte, OSSD-CV, Hewlett-Packard.
.I rcsintro
was developed by Walter F. Tichy, Purdue University, West Lafayette, IN
47907.
.br
Revision Number:  3.0; Release Date: 83/05/11.
.br
Copyright 1982 by Walter F. Tichy.
.SH SEE ALSO
Ci(1), Co(1), Rcs(1), Rcsdiff(1), Rls(1), Rcslocks(1), Ident(1),
Rcsmerge(1), Rlog(1), Rcsfile(4).
.sp
Walter F. Tichy, "Design, Implementation, and Evaluation of a Revision Control
System," in \f2Proceedings of the 6th International Conference on Software
Engineering\f1, IEEE, Tokyo, Sept. 1982.
