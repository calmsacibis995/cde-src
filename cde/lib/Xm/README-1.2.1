The Purpose of This Release

	This release contains approximately 200 bug fixes for
	Motif 1.2. The reference platforms for Motif 1.2.1
	are the HP 9000/700 running HP-UX 8.05 and the DECstation 3100
        running OSF/1 1.1.  In addition to bug fixes in the Motif
	source code, this release contains bug fixes to three books:
	the Programmer's Guide, Style Guide, and User's Guide. The
	full, new sources for these books are included on this tape.
	Please note that the printed books available from Prentice
	Hall reflect these 1.2.1 versions of the books, and not the
	original 1.2 versions.

        OSF encourages the reporting of all bugs found in
        OSF/Motif regardless of the platform or hardware
        configuration in which the bug is found.  However, OSF
        will commit to accept (and repair according to
        priority) only those bugs that can be replicated on the
        current reference configurations.  A list of known bugs
        can be found in the OPENBUGS file and a list of bugs
        fixed in this release can be found in the FIXEDBUGS
        file, both on the release tape.

        Since this is a general availability product release,
        it has undergone the full quality assurance cycle at
        OSF.

Installing This Release

	Installing the Tape

	OSF/Motif 1.2.1 is provided on magnetic tape, in tar format.

	This release is made up of a "sparse tree" of files that have
	changed. The new versions of the files should replace the
	corresponding Motif 1.2 versions of the files in your source
	tree, and then the Makefiles and then the binaries should be
	rebuilt.

	The documentation directory, however, ships the complete
	trees for the new books. You can simply remove the old
	copies of these books and replace them with the new ones.
	Only three new books are shipped with this release: the
	Style Guide, Programmer's Guide, and User's Guide.

	To install the entire contents of the tape, create the
	directory that you want to be the root for the sources, make
	that the current directory, load the tape into the tape
	drive, and issue this command:

		tar xvf device_name

	After the tape is unloaded, you can use, for example, cp -f 
	command to copy the sources from the current directory into 
	your source tree. Please don't forget to remove the old versions 
	of Style Guide, Programmer's Guide, and User's Guide from your
	documentation directory.

	This release creates several new files: ./lib/Xm/StrObsolete.c,
	./README1.2.1 and some files under ./doc directory.
	If you are using a symbolic link tree, you will need to create
	new links for them.
	
	If you have any problems when installing the tape, call the
	OSF/Motif support desk at (617) 621-8990.

Summary of Changes in this Release

	All changes made in this release are fixes for reported bugs.
	For details on the bugs fixed, see the file CLOSEDBUGS on this
	tape.

Files Obsoleted by This Release

	In lib/Xm, the file TemplateB.c has been defuncted in 1.2.1.
	The new Imakefile removes the reference to TemplateB.c. You
	may wish to remove this file from your build. 

Overview of the Motif Directory Structure

        This section describes the Motif directory structure.

        This file, ./README-1.2.1, summarizes the contents of the top
        level directories in the directory structure, briefly
        describes the build process, and describes bug
        reporting procedures.

        The file ./BUGREPORT is a bug report template.

        The file ./OPENBUGS contains all open bugs.

        The file ./CLOSEDBUGS contains all bugs fixed in this
        release.

        The directory ./X11R5 contains official MIT patches for
        Version 11 of the X Window System.  The patches to the
        Xlib and the X Toolkit Intrinsics are required for
        building and running Motif 1.2.1.  The file
        ./X11R5/README describes the patches and how to apply
        them to your X sources.  For more information, refer to
        the section "Building Motif On Your System."

        Note:  MIT, not OSF, is responsible for support
               of any patches in the ./X11R5 directory.
               We provide them unsupported for the
               convenience of users who might not yet
               have received the latest sources.

        The directory ./doc contains the full sources for
	the Programmers' Guide, User's Guide, and Style Guide.

        The directory ./lib contains the toolkit library and
        resource manager library:

           * ./lib/Xm contains the Motif widget library.

           * ./lib/Mrm contains the Motif resource manager
             library used with the uil compiler.

        The directory ./bindings contains vendor-specific
        bindings for virtual keysyms.  For more information on
        virtual bindings, see the file ./bindings/README or the
        VirtualBindings(3X) manual page in the OSF/Motif
        Programmer's Reference.

        The directory ./clients contains the Motif window
        manager, the User Interface Language (uil) compiler,
        and the xmbind client:

           * ./clients/uil contains the uil compiler and the
             callable uil interface library (libUil.a).  The
             file ./clients/uil/UilParser.c is obsolete and no
             longer included.

           * ./clients/mwm contains the Motif window manager.

        The directory ./demos is an unsupported directory. However,
	a small number of fixes for demo programs are provided in
	this release.

        The directory ./tools contains a single tools
        subdirectory, wml, with the Widget Meta-Language (WML)
        facility.

        The directory ./config contains configuration files 
	which changed between 1.2 and 1.2.1.

	No bug fixes for tests are included on this tape. However,
	those who have licensed the Motif Validation Test Suite (MVTS)
	and Quality Assurance Test Suite (QATS) separately should
	be aware that changes introduced in 1.2.1 may affect you.
	Specifically, those who intend to certify Motif 1.2.1 should
	obtain a new waiver file for the MVTS first. Those who
	have the Quality Assurance Test Suite will not be able to
	use the Motif 1.2.1 window manager (mwm) unless you first
	procure a small set of bug fixes for the QATS libraries.
	To obtain the new waiver file, contact Laura Norton at OSF,
	norton@osf.org or (617) 621-8761. The updates to the QATS files
	will be provided to all QATS licensees automatically. If you
	do not receive the updates in a few weeks, please contact 
	the Motif Support Desk at motif-support@osf.org, or (617) 621-8990.

Where to Get Help

        To report problems with this release, please complete
        the OSF Problem Report in the file ./BUGREPORT and mail
        to:

        motif-defect@osf.org or uunet!osf.org!motif-defect

        motif-defect is an alias to a person at OSF who is in
        charge of receiving and dispatching bugs reported
        against the latest released version of OSF/Motif.

        Discussions concerning the technology in this release
        can be directed to the mailing list:

           motif-talk@osf.org or uunet!osf.org!motif-talk

        If you want to be added to the motif-talk mailing list,
        please send your email address to:

        motif-talk-request@osf.org or uunet!osf.org!motif-talk-request

        Please include your company name and Motif license
        agreement number.

        Licensees with full support contracts can also call OSF
        for help.  The service number is 1-617-621-8990, and
        support is available between 8:30 AM and 5:00 PM United
        States Eastern time, Monday through Friday.  You can
        obtain an OSF/Motif software support contract for
        support of released versions of OSF/Motif by contacting
        OSF Direct Channels at 1-617-621-7300.

Building Motif for Your System

        # The following section is reprinted from the Motif 1.2
	  release notes. If you have already begun using Motif 1.2,
	  you have probably performed the necessary customization
	  steps. If you did not build Motif 1.2, use this section
	  to customize your build set-up.

        Motif 1.2.1 uses X11R5 Xlib and X Toolkit Intrinsics
        libraries.  The versions of these libraries used to
        build Motif must have the MIT fixes 1-14 fix supplied in
        the ./X11R5 directory applied to them in order for
        Motif to build and run properly.  Please read the README
	in that directory for more discussion of the patches.

        Be sure to read the section "Tailoring the Build
        Process" for information on how to configure your
        system before building Motif.  This section includes
        instructions for patching your X11R5 sources.  The
        section "Motif Makefiles" describes the steps you
        should follow to build the source, including building
        the Makefiles, after you have tailored your build
        configuration.  The section "The Motif Build Tree"
        indicates how the build proceeds once it has begun.

   Tailoring the Build Process

     Patching the X11R5 Libraries

        You must apply the patches supplied in the ./X11R5
        directory to the X11R5 sources.  If you do not have the
        X11R5 sources, you can obtain them by writing to this
        address:

        MIT X Consortium
        Laboratory for Computer Science
        545 Technology Square
        Cambridge, MA 02139

        To apply the patches, you may want to use the patch
        program that appears in the ./mit/util/patch directory
        from the MIT X11R5 distribution.  To use the patch
        program, you must first build it by moving to the
        directory ./mit/util/patch and following the
        instructions in the README file in that directory.
        Once you have built the patch program for your system,
        you are ready to apply the patches to your X11R5
        sources.  These patches are contained in the files
        ./X11R5/fix*.

        Run the patch program, applying the MIT patches in
        ascending numerical order.  Follow the directions in
        the beginning of each of the ./X11R5/fix* files.

        After applying all patches to the X11 and Xt library
        sources, you should rebuild and re-install those
        libraries, if necessary.

	Please read the README in the X11r5 directory before
	beginning the patch process.

     Integrating X11 Release 5 and Motif


        Motif 1.2.1 release is based on X11 Release 5.  We assume
        that you do not have the R5 libraries and include files
        installed on your system, but residing in a source tree
        on your system.  The supplied Makefiles assume this
        configuration.  If you have X11R5 installed somewhere
        on your system, you should follow the guidelines in the
        section below on "Using X11R5 Installed Libraries and
        Header Files."  If your X11R5 is not installed, but is
        in a source tree on your system, you should follow the
        guidelines in the following section, "Using X11R5
        Libraries and Header Files from a Source Tree."

        Using X11R5 Libraries and Header Files From a
        Source Tree

        The imake configuration for the 1.2.1 release allows you
        to set the location of your X11 tree by setting the
        variable XTop in your  ./config/site.def file in your
        Motif source tree.  This variable is set by default to
        $(TOP) in the ./config/Motif.tmpl file.  Another
        variable, MTop, is similarly used to define the
        location of the top of the Motif source tree.  This is
        also set to $(TOP) by default in ./config/Motif.tmpl.
        In other words, the default configuration has both
        trees rooted at the same point, or the Motif tree is
        within the X tree.

        You will most likely want to leave the top of your
        Motif tree (MTop) as $(TOP), unless you are using the
        Motif setup when integrating other applications and
        need to point to the Motif source tree outside of that
        tree.

        You will most likely want to change the top of your
        X11R5 tree (XTop) to be the pathname where your X11R5
        source tree (libraries, includes and utilities) is on
        your system.  For example, you can add this definition
        to site.def:

        #define XTop /local/x11R5/mit

        It should be added within the block selected by #ifdef
        AfterVendorCF.  If you change either of these
        definitions in the ./config/site.def file, you must
        remake your Makefiles.  To make your first Makefile
        (which also builds imake), use the following command
        from the top of your Motif tree:

        make Makefile "BOOTSTRAPCFLAGS=-IXTop/X11"

        where XTop is the value used in site.def.  Follow this
        with make Makefiles  as described in the section "Motif
        Makefiles."

        Using X11R5 Installed Libraries and Header Files

        If you wish to use the version of your X11R5 libraries
        and header files from an installed area and not the X
        source tree, you should remake your Makefiles using the
        -DUseInstalled switch.  Use the following command from
        the top of your Motif tree:

        make Makefile "BOOTSTRAPCFLAGS=-I/installed/x11R5/usr/include/X11"\
        IMAKE_DEFINES=-DUseInstalled

        where /installed/x11R5/usr/include/X11 is the location
        of your installed X11 header files (or your IncRoot/X11
        or ProjectRoot/include/X11).  This replaces the make
        Makefile step described in the section "Motif
        Makefiles".  Follow this by the following sequence of
        commands:

        cd config
        ./imake -DUseInstalled -I.
        su
        make install
        exit
        cd ..
        make Makefiles

        This installs the proper configuration files from the
        Motif source tree, builds imake in the Motif tree using
        the include files found in your installed area, and
        constructs Makefiles that use all X installed libraries
        and utilities, including the imake utility.

        After building the Makefiles, you must not use make
        World to build Motif, as this reverses the
        modifications you have just made to imake by installing
        Motif configuration files.  You can use make
        Everything.  See the "Motif Makefiles" section for more
        information.

     Linking With X11 and Extra Libraries

        We have removed the variable SYSLIBS from the Motif 1.1
        HP and Ultrix imake configuration files ./config/hp.cf
        and ./config/ultrix.cf.

        All Motif targets need to link with the Xlib library
        libX11.a and the Xt library libXt.a.  These have been
        added to the appropriate ClientLibs definitions in
        Motif.tmpl. See the section "Patching the X11R5
        Libraries" for details on how to access the appropriate
        X files.

        If your development platform requires that the Motif
        libraries be linked with the additional libraries, you
        can add them to the platform-specific imake config file
        using the XmExtraLibraries definition. For example, on
        the HP reference platform, we have added

        #define XmExtraLibraries -lPW

        to the hp.cf file, because the Xm library needs to link
        with the Programmer's Workbench library on that
        platform.

        You can also use the ExtraLibraries definition to add a
        library to be linked with any X11 application, not only
        Motif applications.  For example, on some SystemV-type
        systems, you must link X11 applications with a socket
        library with the following specification in your config
        file:

        #define ExtraLibraries -linet

     Compiler Flags

        The imake variables MotifDefines, StandardDefines and
        DefaultCCOptions contain the flags that are used in
        every C compile.  They are incorporated into the CFLAGS
        that are used with every call to CC.  Any option that
        you need to set for every compile should be included in
        one of these variables.  The default imake
        configuration file, ./config/generic.cf, does not have
        any MotifDefines, StandardDefines or DefaultCCOptions.
        StandardDefines can contain flags that are operating
        system or machine dependent.  -DSYSV is an example of
        an operating system dependent flag.  -DSTRINGS_ALIGNED
        is an example of a machine dependent flag.
        StandardDefines is the appropriate place to put the
        following types of flags:

        #define StandardDefines -DSYSV

        and DefaultCCOptions should be used for compiler
        directives such as:

        #define DefaultCCOptions -Wc,-Np3000

        MotifDefines should be used for -D flags that are used
        only in Motif compilations.  StandardDefines may retain
        the value used when compiling X11R5.  If you are using
        imake, you can change the MotifDefines line in your
        system configuration files; otherwise you will have to
        edit the STD_DEFINES value in every bottom level
        Makefile in the directory structure if you need to
        change these flags.

        The make variable DEFINES can be set in a particular
        Imakefile if you need to add a flag to a single
        directory compile.  There is an example of the use of
        DEFINES in ./clients/mwm/Imakefile:

        DEFINES = MwmDefines

        See the next section for a description of MwmDefines.

        If you need to add a compile flag to a single
        directory, add or change the DEFINES variable in the
        Imakefile or Makefile for that directory.  DEFINES are
        never given a value in an imake configuration file.

        The make variable CDEBUGFLAGS has the default value -O,
        which tells the compiler to optimize.  If you wish to
        debug, change the value of the CDEBUGFLAGS to the debug
        flag for your compiler.  To change the value of the
        variable CDEBUGFLAGS in the entire build, add the
        following line to your imake configuration file,
        assuming that the debug flag is -g:

        #define DefaultCDebugFlags -g

        To change the value of the variable CDEBUGFLAGS in a
        single Makefile, replace the present CDEBUGFLAGS
        definition within this line:

        CDEBUGFLAGS = -g

        If you are not using imake, you need to edit any
        Makefile your build uses.  The default build passes the
        variable CDEBUGFLAGS through the tree, so you may need
        to edit higher level Makefiles that you use.
        CDEBUGFLAGS are dependent on the compiler you use, so
        if you change compilers, you may need to change your
        CDEBUGFLAGS accordingly.

        If you do not set the value of DefaultCDebugFlags, you
        can control the level of optimization using the imake
        variable OptimizedCDebugFlags.  For example, some
        systems will use this definition:

        #define OptimizedCDebugFlags -O2

        Because we separate Motif-specific definitions and
        libraries into unique imake variables, we hope you will
        be able to use the same platform-specific configuration
        files to build both X11R5 and Motif.  There is one
        important exception; if your platform has a special
        value for LibraryDefines, it must have the Motif-
        specific definitions appended to it.

     X11 Extensions in mwm

        In this release, the Motif window manager (mwm) is
        built to support the X11 move opaque feature and
        nonrectangular window shape extension by default.  If
        the current X11 installation does not support the shape
        extensions, mwm must be compiled with the -DNO_SHAPE
        option.  If it is desired to turn off support for
        multibyte and localized text, mwm must be compiled with
        the -DNO_MULTIBYTE option.  These options can be added
        to the MwmDefines imake variable.  MwmDefines should be
        used for -D flags that are used only in compiling mwm.
        It is currently only used in ./clients/mwm/Imakefile.

     YACCFLAGS

        The widget meta-language facility uses the commands
        yacc and lex to convert widget description tables into
        C source files.  Some versions of yacc need special
        flags to process the large parse tables that are
        generated.  The make variable YACCFLAGS is used to hold
        the flags required by yacc.  Here are examples of
        YACCFLAGS that may be needed:

        For an HP 9000/370:

        YACCFLAGS = -Nm20000

        For the XENIXTM operating system:

        YACCFLAGS = -SR500 -Ss1000 -Sa10000 -Sm50000

        If you have compilation errors that cause yacc to die
        with a complaint such as "out of space", you may need
        to add the YaccFlags definition to your imake
        configuration file.  For example, we have added

        #define YaccFlags -Nm20000

        to the hp.cf file.  The default imake configuration
        file, ./config/generic.cf, does not have any YaccFlags
        defined.  The only Makefile in the Motif source tree
        that uses yacc is in the directory ./tools/wml.  If you
        are not using imake, you may need to define YACCFLAGS
        in the Makefile in this directory.

        Some old versions of yacc cannot increase the size of
        their internal tables with flags and therefore will not
        work with our wml sources.  In this case you need to
        upgrade your yacc from new sources.  You can get a new
        yacc by:

           * Asking your operating system vendor for an
             upgrade.

           * If you are an OSF/1 licensee, using the yacc
             sources from OSF/1.  It will build on most
             machines without significant changes.

           * Using the yacc from the System V.4 distribution.
             We have not tested the use of this version of
             yacc.

     Machine Dependencies

        The code to support the use of compound strings, found
        in the file ./lib/Xm/XmString.c, has a machine
        dependency.  The compound string contains an unaligned
        integer.  When this code is compiled without any
        additional flags, the integer is accessed directly.  If
        your machine cannot access an unaligned integer, you
        can compile with the flag -DSTRINGS_ALIGNED, and the
        integer is accessed as two separate bytes.  You can add
        the flag -DSTRINGS_ALIGNED to the MotifDefines line in
        your imake configuration file or the Makefile in
        ./lib/Xm.  The default imake configuration file,
        ./config/generic.cf, does not have the
        -DSTRINGS_ALIGNED flag defined.

        Whether to use the -DSTRINGS_ALIGNED flag will depend
        on your machine, not on your operating system.  For
        instance, a Vax running Ultrix does not require aligned
        integers, however a DECstation 3100, which is a Risc-
        based machine, does require the flag to be defined even
        when it is also running Ultrix.  (We have added the
        flag to MotifDefines in ./config/ultrix.cf,
        ./config/osf1.cf, ./config/sgi.cf and ./config/sun.cf.)
        Some machines do not require integers to be aligned,
        but will respond more slowly when you try to access one
        that is not aligned.  It may be prudent to try
        compiling both with and without the flag, and seeing
        which toolkit provides better performance on your
        machine.

     Operating System Dependencies

        Presently, we provide several workarounds for
        portability problems in Motif source.  These
        workarounds have been suggested by Motif licensees and
        are not thoroughly tested.  You may wish to examine
        them closely to determine if they will work properly on
        your system.  None of the flags mentioned in this
        section are used by default.

        A workaround for machines that do not have vfork() can
        be used by adding the flag -DPORT_NOVFORK to MwmDefines
        or to the DEFINES line in the Imakefile or Makefile in
        the directory ./clients/mwm.

        By default, the name of a directory is found in the
        structure dirent, which is defined in the include file
        dirent.h.  Some systems keep their directory
        information in a structure called direct rather than
        dirent.  The structure direct can usually be found in
        either sys/dir.h or ndir.h.  If the structure dirent is
        found in the include file dirent.h on your system, you
        won't have to add any compile flag.  If dirent.h does
        not exist on your machine, check to see which one of
        sys/dir.h or ndir.h does exist on your machine.  Look
        in the include file to see which structure, direct or
        dirent, is defined.  If your system uses the structure
        direct defined in the include file sys/dir.h, you can
        add the flag -DSYS_DIR to the MotifDefines in your
        imake configuration file or to the DEFINES in the
        Imakefile or Makefile in ./lib/Xm to pick up the
        correct structure.  If your system uses the structure
        direct found in the include file ndir.h, you can add
        the flag -DNDIR to the MotifDefines in your imake
        configuration file or Makefile to pick up the correct
        structure.  If your system uses the opposite pairings
        of include files and structure or some other structure
        to provide directory information, you will need to edit
        the file ./lib/Xm/Xmos.c to be sure that the correct
        file is included and the correct structure is used.

        The default regular expression handling functions used
        by Motif are regex() and regcmp().  On some systems,
        such as our reference machine the HP 9000/370, regex
        and regcmp are found in libPW rather than libc.  If you
        can not link Motif applications because regex and
        regcmp are undefined, look to see if they are in libPW.
        If they are in libPW you can add the flag -lPW to your
        XmExtraLibraries definition in your imake configuration
        file or Makefiles.  Look at the imake configuration
        file for the HP, ./config/hp.cf, to see an example of
        how to add this flag.

        We have added a workaround so that if you do not have
        regex() or regcmp() on your system, you can use
        re_comp() and re_exec() by adding the flag -DNO_REGEX
        to the MotifDefines line in your imake configuration
        file or the DEFINES line in the Imakefile or Makefile
        in the ./lib/Xm directory in order to pick up the
        appropriate functions.

        We have also added a workaround for systems that have
        getwd() rather than getcwd().  This workaround is
        located in Xmos.c and can be used by adding the flag
        -DUSE_GETWD to the MotifDefines line in your imake
        configuration file or the DEFINES line in the Imakefile
        or Makefile in the ./lib/Xm directory in order to pick
        up the appropriate function.

        If you do not have the putenv() library call, you can
        use setenv() by adding the flag -DNO_PUTENV to the
        MotifDefines line in line in your imake configuration
        file or the DEFINES line in the Imakefile or Makefile
        in the ./lib/Xm directory in order to pick up the
        appropriate function.

     Compiler Dependencies

        The -D_NO_PROTO flag is no longer set in the imake
        configuration. This value is now determined in the file
        ./lib/Xm/Xm.h.  If set, it turns off the ANSI C
        function prototyping feature.

        For compilers that do not support the const variable
        type, a NO_CONST flag is used to handle this problem in
        lib/Xm/XmP.h, lib/Mrm/Mrm.h, and clients/uil/UilDefI.h.
        This has been added to MotifDefines in ultrix.cf and
        sun.cf.

     Optimization Problem

        We have noticed that when compiling with optimization
        (-O) on some platforms, compiles take a long time and
        can even seem to hang.  If you are compiling with
        optimization turned on and this symptom occurs, you
        should turn optimization off.  You can do this by
        building with CDEBUGFLAGS equal to no value or to a
        debug value (-g), or by setting the value for
        OptimizedCDebugFlags in your site.def file to some
        value other than -O .

     Using imake on OSF/1

        On the OSF/1 1.0 platform, it is necessary to use the
        -traditional flag with cpp when using imake to make
        Makefiles. If you are not using the -traditional flag,
        you might get an error such as

        ./config/Imake.tmpl:6: # operator should be followed by a macro argument name

        when building a Makefile.  You may also get an error
        such as the following for any Imakefile that has a
        single quote mark in a comment (line 30 in the
        example):

        ./Imakefile:30: unterminated string or character constant

        A change has been made to the file ./config/imakemdep.h
        that  will cause imake, when built using GNU C (gcc),
        to use the -traditional flag. As an alternative to
        changing imakemdep.h you may use the environment
        variable IMAKECPP to point to a cpp program that uses
        the -traditional flag by default.

     Building XConnDis.o on OSF/1

        In order to build the R5 X11 library on an OSF/1 1.0
        platform, you may have to add the inclusion of
        <sys/param.h> to the file XConnDis.c before the
        inclusion of <netinet/tcp.h>.  This is a bug in the
        OSF/1 1.0 include files.

   Motif Makefiles

        Before building Motif, determine whether or not your
        system requires tailoring.  For more information, see
        the previous sections on "Tailoring the Build Process."

        This Motif release contains a minimal top-level
        Makefile and a copy of this makefile called
        Makefile.ini.  Makefile.ini can be used to bootstrap
        your build process, especially if you have accidentally
        damaged all Makefiles or are starting afresh on a new
        architecture with shared sources.

        Makefile.ini provides the Makefile and World targets.
        For example, you can rebuild by issuing the command:

        make Makefile "BOOTSTRAPCFLAGS=-IXTop/X11"

        and then continuing with the rest of the build process
        as outlined below.  For information on the proper value
        for Xtop, see the section "Integrating X11 Release 5
        and Motif".

        The test suites contained in the ./tests directory are
        enormous when compiled.  (On our HP reference machine
        the tests grow to over 600MB when compiled.)  The tests
        are not built by default.  To add the tests to the
        build, add the word tests to the end of the list of
        SUBDIRS in the Imakefile or Makefile at the top of the
        Motif source tree.  The default process builds only the
        Makefile in the ./tests directory itself.

        We have provided the necessary files so that you can
        use the X11 utility imake to create system specific
        Makefiles.  The directory ./config contains the source
        for the imake program as well as rules for creating
        make targets (Imake.rules, supplied by MIT, and
        Motif.rules for Motif-specific rules), two Makefile
        templates (Imake.tmpl and Motif.tmpl) and some system
        dependent configuration files including a default
        configuration file (generic.cf).

        Note:  OSF does not support the imake utility.
               It is provided as a convenience to our
               licensees.

        To create machine-specific Makefiles for your system,
        change directories to the root of the Motif source tree
        and give the following set of commands:

             make Makefile  (creates the toplevel Makefile )

             make Makefiles (walks the source tree creating
                            Makefiles)

             make testsMakefile (creates Makefile in the
                            ./tests directory)

             make includes  (creates the ./X11 directory with
                            header file links)

             make depend    (adds dependency lists to the
                            Makefiles)

        This sequence produces Makefiles that are ready for
        building the remainder of Motif.  The command make -k
        then builds the Motif components.

        At OSF we have found the following sequence of commands
        to be most convenient:

        make Makefile
        make Makefiles
        make testsMakefile
        make includes
        make depend
        make -k

        You can perform the entire make process by issuing one
        of the following commands from the top of the Motif
        source tree:

        make World "BOOTSTRAPCFLAGS=-IXTop/X11"

        or

        make Everything "BOOTSTRAPCFLAGS=-IXTop/X11"

        The difference between these commands is that the World
        target removes all object files from the tree.  You may
        prefer to use make Everything after changing some
        settings in the configuration files.

        Unless you have added the word tests to the list of
        SUBDIRS in the Imakefile or Makefile at the top of the
        Motif source tree, this scheme does not create the
        proper Makefiles in the ./tests directory that would
        allow you to compile each test as needed.  To do this,
        issue the following sequence of commands inside the
        ./tests directory:

        make Makefile
        make Makefiles
        make includes
        make depend

        To install Motif libraries, clients, and header files,
        use the command make install from the top of the Motif
        tree.  If you have built Motif with installed X11R5
        files, as described in the section "Using X11R5
        Installed Libraries and Header Files", the make install
        command might stop at the ./config directory.  The most
        likely cause for this failure is that make depend has
        failed in the ./config directory.  If this happens, use
        the following commands:

        cd config
        make depend "BOOTSTRAPCFLAGS=-I/installed/x11R5/usr/include/X11"

        where /installed/x11R5/usr/include/X11 is the location
        of your installed X11 header files (or your IncRoot/X11
        or ProjectRoot/include/X11).  Then use the command
        make install again from the top of the Motif tree.

        There are several flags in the Makefiles that you may
        need to modify to build Motif correctly on your
        machine.  If you do not use imake, you may have to edit
        all of the Makefiles in the Motif source tree.  Using
        imake, global changes to the entire set of Makefiles
        can be made in the imake configuration file.  If you
        are not using one of the configuration files provided,
        you can write your own system-specific configuration
        file or edit the default configuration file,
        ./config/generic.cf.  Changes to individual Makefiles
        can be made in the Imakefile in the same directory.

        Motif has not been tested with shared libraries.  We
        have added rules modeled after the Xaw library, but
        have not tested them.

   The Motif Build Tree

        The default source build compiles the Motif sources in
        the following order:

             config/            (imake)
             lib/
                  Xm       (the Motif widget library)
                  Mrm      (the resource manager library)
             tools/
                  wml      (the widget meta-language facility)
             clients/
                  mwm      (the Motif window manager)
                  uil      (the uil compiler and callable library)
                  xmbind   (to setup virtual bindings)
             demos/
                  DragAndDrop   (a DragAndDrop demo)
                  clipboard     (an XmClipboard demo)
                  dogs          (a widget demo)
                  helloint      (an internationalized uil demo)
                  hellomotif    (a uil demo)
                  motifanim     (a uil demo)
                  motifburger   (a uil demo)
                  motifgif      (a toolkit demo)
                  motifshell    (a toolkit demo)
                  periodic      (a uil demo)
                  textedit      (an XmText demo)
                  uilsymdump    (a uil demo)
                  view          (an internationalization demo)
                  xmpiano       (a toolkit demo)
                  xmsamplers/
                       xmapdef       (application defined scrolled window)
                       xmdialogs     (dialog sampler)
                       xmeditor      (simple text editor)
                       xmfonts       (font browser)
                       xmforc        (form attachment + rowcolumn)
                       xmform        (form attachment)
                       xmgetres      (resource fetching example)
                       xmlist        (list example)
                       xmmap         (drawingarea + scrolled window)
                       xmprotocol    (window manager protocols)
                       xmter         (shape and animation example)
                  xmtravel      (a comprehensive Motif demo)

        In addition, if you are building all the test suites,
        they are compiled and built by default in the following
        order:

             tests/
                  General       (supporting libraries and binaries)
                  Manual        (holds libraries compiled for manual testing)
                  Toolkit            (tests of Motif widgets)
                  Performance        (tests of Motif performance)
                  Mrm           (tests of the Motif resource manager)
                  uil           (tests of the user interface language)
                  mwm           (tests of the Motif window manager)
                  DragandDrop        (tests for Drag and Drop functionality)
                  XmString      (tests of compound strings)
                  util               (tools for testing)
                  memory        (tests for memory problems)

        You can build the source tree out of order if you wish.
        However, be sure the libraries have finished compiling
        before attempting to link with them.  The libraries
        usually can be built concurrently.  Once the libraries
        are built, the clients and tests can be built
        concurrently.  You must build ./tools/wml before
        building ./clients/uil.  You must build ./clients/uil
        before building any of the UIL demos.

   Lint

        The use of lint is untested in this release.

The OSF/Motif Documentation

	Only the Programmer's Guide, User's Guide and Style Guide,
	and the DTE tools, are included with Motif 1.2.1. The
	remainder of this section is reprinted from the Motif 1.2
	release notes for those who have never used Motif 1.2.

        The complete Motif documentation set is made up of the
        following documents:

           * AES User Environment Volume

           * OSF/Motif Programmer's Reference

           * OSF/Motif Programmer's Guide

           * OSF/Motif Release Notes

           * OSF/Motif Style Guide

           * OSF/Motif User's Guide

        These documents are contained in one of the major
        subdirectories ( ./doc ) of the OSF/Motif 1.2.1 tree.

        Note:  You can print out copies of these
               documents in either PostScript or ASCII
               format. Within each manual directory are
               the subdirectories Output/draft/ps and
               Output/draft/ascii.  These directories
               contain files that you can use
               immediately, without having to build the
               document from scratch.

               The files in the Output/draft/ascii
               subdirectories are intended primarily for
               screen display.  Some of these files
               contain long lines that may be truncated
               when you send them to a printer.

        Also included in this release is OSF's documentation
        tool package, the Documentation Tools Environment
        (DTE), which you can use to rebuild the documentation.
        The DTE is separate from the OSF/Motif offering and is
        not included in any OSF/Motif support, although we
        would appreciate any comments you have about it.  For
        most people, the formatted documents we have provided
        are sufficient, but we supply our working build
        environment for the few of you who may want to rebuild
        some or all of the documents.  In order to rebuild the
        documentation you must first build the DTE.  Building
        the DTE is described in the section "Building the DTE"
        below.  If you intend to work extensively with the
        documentation and the DTE, familiarize yourself with
        the complete documentation contained in the directory
        ./doc/DTE/tools/dtedoc/dte_user.gd.
   Structure of the Documentation Directory Tree

        The ./doc directory contains the following files and
        directories:

        COPYRIGHT       This file contains a general copyright
                        notice for the OSF/Motif documentation
                        set.

        DTE             This directory contains the sources and
                        documentation for the DTE.

        Makefile        This makefile uses the DTE to build the
                        OSF/Motif documentation set.  This
                        makefile expects the DTE to be built
                        and in your path.  It has the following
                        make targets:

                        all         builds all books in
                                    PostScript and ascii with
                                    book-format.

                        ps          builds all books in
                                    PostScript.

                        ascii       builds all books in ascii.

                        clean       removes the Sync
                                    directories from each of
                                    the manual directories.
                                    These directories hold page
                                    number synchronization
                                    information and should be
                                    removed when a documents
                                    file structure changes.
                                    They are automatically
                                    regenerated by the book-
                                    format command of the DTE.

                        clobber     removes the Sync and Output
                                    directories from each of
                                    the manual directories.
                                    The Output directories
                                    contain output ready for
                                    printing.  They are
                                    automatically regenerated
                                    by the book-format command
                                    of the DTE.

        README          This file contains a description of the
                        contents of the ./doc directory.

        aes             This directory contains the source and
                        output files for the AES User
                        Environment Volume.

        man             This directory contains the source and
                        output files for the OSF/Motif
                        Programmer's Reference.

        programGuide    This directory contains the source and
                        output files for the OSF/Motif
                        Programmer's Guide.

        releaseNotes    This directory contains the source and
                        output files for the OSF/Motif Release
                        Notes.

        styleGuide      This directory contains the source and
                        output files for the OSF/Motif Style
                        Guide.

        usersGuide      This directory contains the source and
                        output files for the OSF/Motif User's
                        Guide.

        Some source directories contain a subdirectory called
        graphics.  This directory contains figures for the
        document in PostScript format.  These figures have been
        included in the PostScript output for the manuals in
        this release.  In order to print any of the PostScript
        figure files individually, you need to run a script to
        convert the format.  See the section "Printing
        PostScript Figures" below for more information.

   The man/pointer Directory

        The man directory, which contains the files for the
        OSF/Motif Programmer's Reference, contains a
        subdirectory called pointer.  This directory contains
        pointer files needed on machines without longname
        support.  The pointer files exist to help users resolve
        name conflicts when two manpage names truncate to the
        same name.

        You should install these pointer files into your
        manpage directory so that when you enter man with an
        ambiguous file name you get information from the
        pointer file directing you to an unambiguous name.  The
        pointer files are not needed on machines with longname
        support.

   Building the DTE

        To build and use the DTE you need the following:

           * Approximately 3.5 megabytes of free local storage.

           * A Documenter's Workbench package, including the
             following UNIX system commands:

                - Text processing tools:

                     - nroff

                     - troff

                     - pic

                     - tbl

                     - eqn

                     - neqn

                     - eps (or another PostScript
                       postprocessor.)

                     - tmac directory files (or other directory
                       files); these include the mm and man
                       packages.

             In most cases the following commands are all that
             is needed to build the tools:

             cd /root_path/doc/DTE/tools/src
             make TOP=/root_path/doc/DTE/tools/src MACHINE=`machine` install

             To use the documentation tools, include the
             directory:

             ./doc/DTE/tools/bin/`machine`

             in your path, and set the environment variable
             DTE_LIBDIR to

             ./doc/DTE/tools/libdata

             Note:  The character ` in the commands
                    above is a grave accent or "back
                    quote."

             The makefiles use the makefile variable InstallCmd
             to specify an installation program.  The value of
             InstallCmd is passed down by any makefile to lower
             level makefiles that it invokes.  For example, if
             InstallCmd is set to install, it will use install
             for any programs installed at that level, or at
             lower levels invoked during that execution of
             make.  InstallCmd can be set by editing the
             topmost DTE makefile, or specifying a value for
             InstallCmd on the command line.  The default value
             for InstallCmd is cp.

             We also provide a variable that specifies the make
             command to be used when a makefile needs to invoke
             a lower level makefile.  The variable is MAKE and
             its default value is make.

             The makefile variable TOP specifies the top of the
             tree where the installed DTE will reside.  This
             includes the bin, man, and libdata directories.
             This should always be specified on the command
             line, or the topmost DTE makefile should be
             edited.  The default value for TOP is /tmp/DTE,
             which will at least allow the DTE to be built
             (although it will probably not be installed where
             you want it).

             A more detailed description of the build process
             for the DTE is provided in the DTE subdirectory
             ./doc/DTE/tools/dtedoc in the files dte_build.ps,
             dte_build.sml, and dte_build.txt.

     Long File Names

        The names of some files in the DTE subdirectories are
        more than 14 characters long.  Some of these names are
        not unique to 14 characters.  If your system does not
        support file names longer than 14 characters, you may
        need to rename and reinstall these files, and you may
        need to change references to these files in the DTE
        Makefiles and Description files.  Following are the
        files with names longer than 14 characters:

        ./doc/DTE/tools/src/dte/ifdef-filter/filter_driver.c
        ./doc/DTE/tools/src/dte/ifdef-filter/site_specific.c
        ./doc/DTE/tools/src/dte/ifdef-filter/site_specific.h
        ./doc/DTE/tools/src/dte/ifdef-filter/tests/ifexpressiontest
        ./doc/DTE/tools/dtedoc/style.gd/ch02.10int_ex2.sml
        ./doc/DTE/tools/dtedoc/style.gd/ch02.11ds_ex.sml
        ./doc/DTE/tools/dtedoc/style.gd/ch02.2refintro.sml
        ./doc/DTE/tools/dtedoc/style.gd/ch02.3tempintro.sml
        ./doc/DTE/tools/dtedoc/style.gd/ch02.4comm_temp.sml
        ./doc/DTE/tools/dtedoc/style.gd/ch02.5int_temp.sml
        ./doc/DTE/tools/dtedoc/style.gd/ch02.7comm_ex.sml
        ./doc/DTE/tools/dtedoc/style.gd/ch02.8comm_ex2.sml
        ./doc/DTE/tools/dtedoc/style.gd/ch02.9int_ex.sml

   Rebuilding the Documentation

        For detailed information on using the DTE and Semantic
        Markup Language (SML) macros, with which all OSF
        documents are formatted, please read the Documentation
        Tools Environment User's Guide and Reference, located
        in the directory:

        ./doc/DTE/tools/dtedoc/dte_user.gd

        This section contains only a very brief overview.  In
        most cases all that is needed to build the OSF/Motif
        books is:

        cd /root_path/doc
        make LIBDIR=/root_path/doc/DTE/tools/libdata all

        To rebuild an individual document, familiarize yourself
        with the book-format command by reading the appropriate
        sections of the Documentation Tools Environment User's
        Guide and Reference.  In general, you must change to
        the appropriate directory and specify book-format with
        or without options, with the parts of the document you
        want to build specified as arguments.  These parts are
        listed in the document's Description file.  For
        example, to build a PostScript version of Chapters 2
        and 4 of the OSF/Motif Programmer's Guide, enter:

        cd ./doc/programGuide
        book-format ch02 ch04

   Installing the Reference Pages

        The DTE includes a program, install-ref, that installs
        the reference pages delivered with this release.  Not
        only does this program properly install the SML based
        man pages on your system, but it also allows you to do
        the following:

           - Expand filenames for systems with longname support
             using the -expand option.

           - Reorganize the wide widget resource tables to fit
             better on an 80 column display using the -
             hacktables option.

           - Reorganize the wide widget resource tables to fit
             better on an 80 column display, but only when
             processed with nroff, using the -duptables option.
             This option allows systems that use the same
             reference pages source files for both troff and
             nroff based processing to work properly with both.

        These options and other options to this program are
        fully described in the README file in the directory
        ./doc/DTE/tools/src/installref.  To install the
        OSF/Motif reference pages with reorganized widget
        resource tables on a system that supports longnames,
        enter the following commands:

        cd /root_path/doc/DTE/tools/src/installref
        install-ref -hacktables -expand -offering motif -insert -smart \
        -doc /root_path/doc \
        -man /man_destination \
        -sml /root_path/doc/DTE/tools/libdata/macros

        where man_destination is the directory where you want
        to install reference pages.

        Note:  The install-ref command installs files in
               the destination directory with the same
               file types that they have in the source
               directory.  The names of Motif reference
               page files typically end with the
               character X, and this results in file
               types such as .1X, .3X, and .5X.  Some
               versions of the man command do not
               recognize files whose types differ from
               the traditional man section numbers.  If
               your man command has this limitation, you
               must rename the Motif reference page
               files, removing the final X.  You can
               either rename the Motif source files
               before installing the reference pages or
               rename the installed files after
               installing the reference pages.

   Including PostScript Figures

        Three of the documents provided with OSF/Motif 1.2.1 (the
        Programmer's Guide, Style Guide, and User's Guide)
        include figures in PostScript format.  These PostScript
        files reside in a graphics subdirectory beneath the
        source text files for each book.

        These files are included directly into the PostScript
        output for each manual using the .P! or .pI troff
        macros.  These macros are interpreted by the eroff
        processor to include PostScript files into the troff
        source.  If you are using Transcript style troff you
        may be able to include the PostScript figures directly
        into the troff source by defining the .P! macro in a
        way similar to the following:

        .de P!
        \\&
        .fl
        \\!%PB
        \\!/showpage{}def
        .fl
        .sy cat \\$1
        \\!PE
        \\!.
        .sp \\$2
        ..

   Printing PostScript Figures

        In their current form, the PostScript figure files are
        only suitable for inclusion within the text files.
        That is, you can print any of the chapters and
        appendixes that include figures and the figures will
        print in the correct positions within the text.
        However, you cannot print any of the figures
        individually in their current form.

        In order to print an individual figure, you need to
        convert it to the printable format using the conversion
        script, print-eps provided in the DTE.  print-eps takes
        a PostScript figure suitable for inclusion in a manual
        and converts it to a format suitable for printing
        separately.  The output of print-eps is sent to the
        standard output and can be piped to a printer command.

        For example, if you want to print the PostScript figure
        list1.ps from from the directory
        ./doc/programGuide/source/graphics, you should enter
        the following command.

        print-eps ./doc/programGuide/source/graphics/list1.ps | lp

        print-eps also takes arguments of -xoff and -yoff to
        specify and offset from the lower left corner in
        inches.

        Be aware that the figure conversion script can be run
        on a single PostScript file or on multiple files.
        Thus, both of the following command lines are
        acceptable:

        print-eps  -xoff  2  -yoff  4  list1.ps  list2.ps | lp

        print-eps  * | lp

The OSF/Motif Test Suite

	No modifications to the test suite are included with this
	release. Sites which have licensed the Motif Validation
	Test Suite (MVTS) and Quality Assurance Test Suite (QATS)
	separately will receive in the near future updates to
	the test automation libraries required if the Motif 1.2.1
	window manager will be used for automated testing.


Quality Initiatives in this Release

   Clean Builds

        Motif 1.2.1 libraries, clients and demos build cleanly
        with no errors and no warnings on the following
        machines. The Motif tests compile with no errors but
        may produce warnings.  Examples of the compile line
        used are provided.

     DECstation 3100 running OSF/1 1.0.3

        gcc -c -O2 -ansi -I. -I/project/motif/build/X11r5/osf1/X11
        -I../.././X11  -I/project/motif/build/X11r5/osf1 -I../../.
        -DSTRINGS_ALIGNED -DNO_REGEX -DNO_REGCOMP
        -DFUNCPROTO   WmIconBox.c

        Note:  The -ansi flag makes this an ANSI/C
               build. With the flags  -Wall, -pedantic
               and -ansi, some small number of warnings
               remain. We have investigated most of
               these and determined that they require no
               action. However, if valid warnings remain
               they will be fixed in a future patch
               release.

     HP 9000/700 running HP-UX 8.05

        cc -c   -I. -I/project/motif/build/X11r5/hp700/X11 -I../.././X11
        -I/project/motif/build/X11r5/hp700 -I../../.
        -DSYSV -DMALLOC_0_RETURNS_NULL -D_HPUX_SOURCE -DANSICPP -Aa
        -DLIBDIR="/usr/lib/X11" -DINCDIR="/usr/include/X11" Xmos.c

        Note:  The -Aa flag makes this an ANSI/C build.
               Consult the man page for the use of the
               -DHPUX_SOURCE flag; it is required under
               this revision of the OS.

     Silicon Graphics Personal Iris running IRIX 4.0.1

        rm -f Mrmcontext.o Mrmcontext.os
        && cc -c  -O -ansi -float  -Wf,-XNh2000 -Wf,-XNd8000 -Wf,-XNp8000
        -woff182 -I. -I/usr/work/X11r5/sgi/X11 -I../.././X11 -I../.././lib
        -I/usr/work/X11r5/sgi -I../../.  -DSYSV -DSYS_DIR -DPORT_NOVFORK
        -DSTRINGS_ALIGNED  -DFUNCPROTO=7 -DNARROWPROTO  Mrmcontext.c
        && ld -r Mrmcontext.o -o Mrmcontext.os
        && mv Mrmcontext.os Mrmcontext.o

        Note:  The warning suppressed by -woff182 is a
               legitimate problem which is not fixed in
               this release. However, we believe there
               is no real risk associated with these
               warnings. The -ansi flag makes this an
               ANSI build. We found this compiler to be
               quite particular.

     SPARCstation 2 running SunOS 4.1.1

        cc -c -O  -I. -I/project/motif/build/X11r5/sun/X11 -I../.././X11
        -I../.././lib -I/project/motif/build/X11r5/sun -I../../.
        -DSTRINGS_ALIGNED -DNO_REGEX -DNO_ISDIR -DUSE_RE_COMP -DUSE_GETWD
        -DNO_MEMMOVE -DNO_ALLOCA -DBOGUS_MB_MAX -DNO_CONST     UilSarVal.c

   Other compile tests

     Build defining -DXTFUNCPROTO

        Using the following compile line on a DECstation 3100
        running OSF/1 1.0.3:

        rm -f UilDB.o
        gcc -c -O2 -ansi -I. -I/project/motif/build/X11r5/osf1/X11
        -I../.././X11 -I../.././lib  -I/project/motif/build/X11r5/osf1
        -I../../.  -DXTFUNCPROTO -DSTRINGS_ALIGNED -DNO_REGEX
        -DNO_REGCOMP -DFUNCPROTO  -DLIBDIR="/usr/lib/X11"
        -DINCDIR="/usr/include/X11" UilDB.c

        Motif clients and libraries compile without errors and,
        at the time of this writing, with a small number of
        warnings in clients/uil/UilParser.c.

   Readiness for Certification

        At the time of this writing, the Motif Validation Test
        Suite (VTS 1.1) was run and passed on the following
        configurations:

           * DECstation 3100 running OSF/1 1.0.3, MIT R4 or R5
             server

           * DECstation 3100 running Ultrix 4.1, MIT R5 server

           * HP 9000/700 running HP-UX 8.05, R4 server

           * SPARCstation 2 running SunOS 4.4.1, R4 server

           * Silicon Graphics Personal Iris running IRIX 4.0.1,
             R4 server

           * HP 9000/700 (HPUX 8.05) hosting monochrome Visual
             X Terminal, R4 server.

   Bug Lists

        On the tape appear two files, OPENBUGS and CLOSEDBUGS,
        which contain, respectively, the list of all bugs from
        any version of Motif not yet closed, and all bugs from
        any version of Motif fixed in the 1.2.1 release.



	
