.TH Set_Iconified Desktop "05 Apr 1994" "SunSoft" "ToolTalk Policy"
.SH NAME
.PP
Set_Iconified, Get_Iconified - set/get a tool's iconic state
.SH SYNOPSIS
.so ../.synopsis
	Set_Iconified(	in	boolean	\fIiconic\f(CW	
		[in	messageID	\fIcommission\f(CW] );		
.\"		|in	viewID	\fIview2Iconify\f(CW	
	Get_Iconified(	out	boolean	\fIiconic\f(CW	
		[in	messageID	\fIcommission\f(CW] );	
.\"		|in	viewID	\fIview2Query\f(CW	
.ft
.fi
.SH DESCRIPTION
.PP
Set or report the iconic state of the optionally specified
window, or of the window primarily associated with the handling
procid (if no window is specified).
.PP
If the handler does not map window-system windows one-to-one to
commissions
.\", views,
or procids, then it may interpret "iconic state"
liberally.  For example, consider a
.BR Display ()
request on an \f(CWISO_Latin_1\fR file, handled by a gnuemacs instance
that then devotes an emacs "window" to the file.  "Windows" in
gnuemacs are not separate X11 windows, and are not separately
iconifiable.  However, a
.BR Set_Iconified ()
issued with respect to the ongoing
.BR Display ()
request could be liberally interpreted by gnuemacs to mean it should
minimize the screen real estate devoted to the operation, perhaps by
"burying" the buffer or dividing its window's real estate among
neighboring windows.  And, if the
.BR Display ()
request happens to be the only thing emacs is working on at the
moment, it could instead take a literal interpretation, and actually
iconify itself.
.SH REQUIRED ARGUMENTS
.TP
\f(CWboolean\fR \fIiconic\fR
Boolean value indicating whether the specified window is (to be)
iconified.
.SH OPTIONAL ARGUMENTS
.TP
\f(CWmessageID\fR \fIcommission\fR
The ID of the ongoing request, if any, that resulted in the creation
of the window(s) in question.  
.PP
.\".PD 0
.\".HP 8
.\"\f(CWviewID\fR \fIview2Iconify\fR
.\".TP
.\"\f(CWviewID\fR \fIview2Query\fR
.\".PD
.\"The ID of the view, if any, associated with the window in question.
.SH EXAMPLES
.PP
.BR ttdt_session_join ()
and
.BR ttdt_message_accept ()
can be used by Xt applications to register for and
transparently process these messages.
.PP
These messages can be sent like so:
.nf
.ft CW
.ps -2
Tt_message msg = tttk_message_create( 0, TT_REQUEST, TT_SESSION,
			the_recipient_procid, TTDT_SET_ICONIFIED,
			my_callback );
tt_message_iarg_add( msg, TT_IN, Tttk_boolean, 1 );
tt_message_send( msg );
.ps
.ft
.fi
.SH WARNINGS
.PP
\f(CWSet_Iconified()\fR
.so .edict
