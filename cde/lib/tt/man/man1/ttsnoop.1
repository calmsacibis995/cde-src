.de LI
.\" simulate -mm .LIs by turning them into .TPs
.TP \\n()Jn
\\$1
..
.TH ttsnoop 1 "1 March 1996" "ToolTalk 1.3" "ToolTalk Commands" 
.BH "1 March 1996"
.\" (c) Copyright 1993, 1994 Hewlett-Packard Company
.\" (c) Copyright 1993, 1994 International Business Machines Corp.
.\" (c) Copyright 1993, 1994 Sun Microsystems, Inc.
.\" (c) Copyright 1993, 1994 Novell, Inc.
.IX "ttsnoop.1" "" "ttsnoop.1" ""
.SH NAME
ttsnoop \- ToolTalk graphical user interface
.SH SYNOPSIS
.ft 3
.fi
.na
ttsnoop
[\f2options\fP]
[\(miF\0\f2scopefile\fP]
[\(mi<\0\f2procid\fP]
[\(miv\0\f2media\fP]
[\(mim\0\f2op\fP]
.PP
.fi
.ft 3
.fi
.na
ttsnoop
[\f2options\fP]
[\(mie\0\f2script\fP]
command
[\f2args\fP]
.PP
.fi
.ft 3
.fi
.na
ttsnoop
[\f2options\fP]
\(min
\(bv
\(miN
.PP
.fi
.ft 3
.fi
.na
ttsnoop
[\(miTuX]
[\(miS\0\f2sessid\fP]
[\(miw\0\f2n\fP]
[\(mil\0\f2n\fP]
[\(mio\0\f2snoopfile\fP]
[\(miO\0\f2tracefile\fP]
.PP
.fi
.SH DESCRIPTION
.LP
The
.BR ttsnoop 
utility interactively monitors ToolTalk message traffic,
.BR ttsession (1)
pattern matching, and ToolTalk client function calls.
.BR ttsnoop 
allows the interactive execution of almost any valid sequence of
ToolTalk function calls, while optionally tracing those calls.
.BR ttsnoop 
can interactively create and send any ToolTalk message, and
can automatically create many of the standard ToolTalk messages.
.BR ttsnoop 
can interactively create and register any ToolTalk pattern.  Messages
received by virtue of these patterns can be processed (e.g. replied to)
interactively or automatically.  For any message encountered,
.BR ttsnoop 
can clone a copy of it or generate a pattern that will match similar messages.
For any message encountered,
.BR ttsnoop 
can generate C source code for recreating it,
.BR dtactionfile (4)
source for a message action that will send it, or
.BR tt_type_comp (1)
source for a static pattern that will match it.
.BR ttsnoop 
can dump the system's installed static patterns and message actions.
.PP
Like
.BR tttrace (1),
.BR ttsnoop 
operates in two fundamental modes.
.BR ttsnoop 
either runs
.BR command 
with ToolTalk client tracing turned on, or (if
.BR command 
is omitted) snoops message traffic in the default ToolTalk scope.
For client tracing,
.BR ttsnoop 
simply invokes
.BR tttrace 
and logs the trace output to the
.BR ttsnoop 
terminal pane.
For message snooping,
.BR ttsnoop 
registers a ToolTalk pattern in the default scope and prints each
matching message in the terminal pane.  When
.BR ttsnoop 
receives a message, it prints the current time, the address
of the internal
.BR Tt_message_callback 
that received the message, and a description of the message as
generated by
.BR tt_message_print (3).
.SH "OPTIONS"
The following options are available:
.PP
.RS 3
.nr )J 6
.LI \f3\(miF\0\f2scopefile\f1
.br
Scope initial pattern also to
.IR scopefile .
.LI \f3\(mi<\0\f2procid\f1
.br
Limit initial pattern to messages from
.IR procid .
.LI \f3\(miv\0\f2mediaType\f1
.br
Limit initial pattern to messages for
.IR mediaType .
.LI \f3\(mim\0\f2op\f1
.br
Limit initial pattern to messages with
.IR op .
.LI \f3\(min\fP
Skip initial pattern.
.LI \f3\(miN\fP
Skip initial
.BR ttdt_open (3),
also.
.LI \f3\(mie\0\f2script\f1
.br
Take
.IR script
as a
.BR tttrace (1)
setting.  See
.BR tttracefile (4).
.LI \f3\(miT\fP
Trace (even initial)
ToolTalk API calls made by
.BR ttsnoop. 
.LI \f3\(miu\fP
Map (de-iconify) on snoop output.
.LI \f3\(miS\0\f2sessid\f1
.br
Set default session to
.IR sessid .
.LI \f3\(miX\fP
Set default session to the X session of $DISPLAY.
.LI \f3\(miw\0\f2n\f1
Set global timeout to
.I n
seconds.
.LI \f3\(mil\0\f2n\f1
Set
.BR tttrace 
.BR dtterm 
saveLines to
.I n
lines.
.LI \f3\(mio\0\f2snoopfile\f1
.br
Log snoop output to
.IR snoopfile .
.LI \f3\(mio\0\f2tracefile\f1
.br
Log API tracing to
.IR tracefile .
.PP
.RE
.nr )J 0
.SH OPERANDS
The following operands are supported:
.PP
.RS 3
.nr )J 6
.LI \f2command\0[args]\fP
.br
Invoke
.I command
[ with
.I args
] and snoop its ToolTalk API calls.
.PP
.RE
.nr )J 0
.SH RESOURCES
The main widgets that make up the 
.BR ttsnoop 
hierarchy are shown under this
heading to aid in specifying resources.
The widget instance name is shown first,
followed by the widget class name in parentheses.
Indentation indicates hierarchical structure.
.PP
.sp -1
.RS 5
.ta 4m +4m +4m +4m +4m +4m +4m
.nf
.ft 3
Ttsnoop
    ttsnoopWin (topLevelShellWidgetClass)
    dtb_ttsnoop_ttsnoop_pane_pane (DtTerm)
    dtb_message_props_message_props (DialogShell)
    dtb_pattern_props_pattern_props (DialogShell)
    dtb_api_tracer_tracer (DialogShell)
        dtb_api_tracer_trace_pane_obj_pane (DtTerm)
.PP
.ft 1
.fi
.RE
.SH STDIN
Not used.
.SH "INPUT FILES"
None.
.SH "ASYNCHRONOUS EVENTS"
\f3ToolTalk\fP \f3Messages\fP
.PP
If
.I command
is omitted,
.BR ttsnoop 
by default registers a pattern in the default scope to observe all
messages, and prints all observed messages to the terminal pane.
.BR ttsnoop 
can be made to register the handler patterns described in
.BR ttdt_session_join (3),
.BR ttdt_file_join (3),
.BR ttdt_message_accept (3),
.BR ttdt_subcontract_manage (3),
and
.BR ttmedia_ptype_declare (3).
.BR ttsnoop 
can interactively create and register any ToolTalk handler pattern.
The user can install a pattern callback to open the matched messages
in a dialog window, or automatically accept, reject, reply, or fail it.
.SH STDOUT
Not used.
.SH STDERR
Errors encountered during initialization are written to stderr.
After initialization, stderr is not used.
.SH "OUTPUT FILES"
None.
.SH "EXIT STATUS"
The following exit values are returned:
.PP
.RS 3
.nr )J 4
.LI 0
Successful completion.
.LI 1
Could not open X display.
.LI 2
Incorrect command line options.
.LI 3
Could not fork
.IR command .
.LI 4
ToolTalk initialization error.
.LI 5
Caught a fatal signal.
.PP
.RE
.nr )J 0
.SH "NOTES"
.PP
Like any ToolTalk client,
.BR ttsnoop 
can observe multicast messages, but not
.BR \s-1TT_HANDLER\s+1 -\c
addressed messages.  Only
.BR tttrace (1)
can monitor
.BR \s-1TT_HANDLER\s+1 -\c
addressed messages.  Run
.BR tttrace (1)
by choosing "ttsession" from the "Snoop" menu.
.PP
.BR ttsnoop 
allows a message to be opened as long as it has not been destroyed.
However,
.BR ttsnoop 
exposes certain ToolTalk convenience routines --
.BR ttdt_Get_Modified (3),
.BR ttdt_Save (3),
and
.BR ttdt_Revert (3)
-- that send and destroy requests without ever returning them above the API.
When
.BR ttsnoop 
uses these routines to send a request to itself, the message
should not be manipulated after the convenience routines have destroyed it.
.SH FILES
.PP
.RS 3
.nr )J 6
.LI "\f3/usr/dt/app-defaults/$LANG/Ttsnoop\fP"
.br
.BR ttsnoop 
Application Defaults.
.PP
.RE
.nr )J 0
.SH "SEE ALSO"
.na
.BR tttrace (1),
.BR ttsession (1),
.BR tt_type_comp (1),
.BR dttypes (1),
.BR truss (1),
.BR DtTerm (3),
.BR dtactionfile (4)
