.de Lc
.\" version of .LI that emboldens its argument
.TP \\n()Jn
\s-1\f3\\$1\f1\s+1
..
.TH ttmedia_ptype_declare 3 "1 March 1996" "ToolTalk 1.3" "ToolTalk Functions"
.BH "1 March 1996"
.\" CDE Common Source Format, Version 1.0.0
.\" (c) Copyright 1993, 1994 Hewlett-Packard Company
.\" (c) Copyright 1993, 1994 International Business Machines Corp.
.\" (c) Copyright 1993, 1994 Sun Microsystems, Inc.
.\" (c) Copyright 1993, 1994 Novell, Inc.
.IX "ttmedia_ptype_declare.3" "" "ttmedia_ptype_declare.3" "" 
.SH NAME
ttmedia_ptype_declare \- declare the ptype of a Media Exchange media editor
.SH SYNOPSIS
.ft 3
.nf
#include <Tt/tttk.h>
.sp 0.5v
.ta \w'Tt_status ttmedia_ptype_declare('u
Tt_status ttmedia_ptype_declare(const char *\f2ptype\fP,
	int \f2base_opnum\fP,
	Ttmedia_load_pat_cb \f2cb\fP,
	void *\f2clientdata\fP,
	int \f2declare\fP);
.PP
.fi
.SH DESCRIPTION
The
.BR ttmedia_ptype_declare (\|)
function
is used to initialize an editor that implements the Media Exchange
message interface for a particular media type.
The
.BR ttmedia_ptype_declare (\|)
function
notifies
the ToolTalk service
that the
.I cb
callback is to be called when the editor is asked to edit a document
of the kind supported by
ptype.
The
.BR ttmedia_ptype_declare (\|)
function
installs an implementation-specific
.I opnum
callback on a series of signatures that
ptype
is assumed to contain.
These signatures are listed below, with
their corresponding opnum offsets.
Opnums in
ptype
for these signatures start at
.IR base_opnum ,
which must be zero or a multiple of 1000.
The implementation-specific
opnum callback will pass
.I clientdata
to
.I cb
when a request is received that matches one of these signatures.
.PP
If
.I declare
is True,
.BR ttmedia_ptype_declare (\|)
calls
.BR tt_ptype_declare (\|)
with the
ptype
argument.
If
ptype
implements Media Exchange for several different media types,
then
.BR ttmedia_ptype_declare (\|)
can be called multiple times, with a different
.I base_opnum
each time, and with
.I declare
being True only once.
.PP
The
.B Ttmedia_load_pat_cb
argument is a callback defined as:
.PP
.sp -1
.RS 5
.ta 4m +4m +4m +4m +4m +4m +4m
.nf
.ft 3
.ta \w'Tt_message (*Ttmedia_load_pat_cb)('u
Tt_message (*Ttmedia_load_pat_cb)(Tt_message \f2msg\fP,
	void *\f2clientdata\fP,
	Tttk_op \f2op\fP,
	Tt_status \f2diagnosis\fP,
	unsigned char *\f2contents\fP,
	int \f2len\fP,
	char *\f2file\fP,
	char *\f2docname\fP);
.PP
.ft 1
.fi
.RE
.PP
The
.I msg
argument is a
.BR \s-1TT_REQUEST\s+1
in
.B Tt_state
.BR \s-1TT_SENT\s+1 .
The client
program becomes responsible for either failing, rejecting or replying
to it.
This can either be done inside the callback, or the message
can be saved and dismissed later (that is, after the callback returns).
Usually, the callback will either immediately reject/fail the request,
or it will start processing the request, perhaps by associating it
with a new window.
When the request is finally dismissed, it should
be destroyed, for example, using
.BR tt_message_destroy (\|).
.PP
If the callback knows it will handle the request (either fail or reply
to it, but not reject it), then it should call
.BR ttdt_message_accept (3).
But if the return value of
.BR tt_message_status (3)
of
.I msg
is
.BR \s-1TT_WRN_START_MESSAGE\s+1 ,
then the callback should probably do
.BR ttdt_session_join (\|),
and perhaps a
.BR ttdt_file_join (\|),
before accepting the message.
The
.I op
argument is the
op of the incoming request,
one of
.BR \s-1TTME_COMPOSE\s+1 ,
.BR \s-1TTME_EDIT\s+1
or
.BR \s-1TTME_DISPLAY\s+1 .
The
.I diagnosis
argument is the
recommended error code;
if the ToolTalk service
detects a problem with the request (for example,
.BR \s-1TT_DESKTOP_ENODATA\s+1 ),
then it passes in the error code
that it recommends the request should be failed with.
If
.I diagnosis
was not
.BR \s-1TT_OK\s+1
and the
.B Ttmedia_load_pat_cb
returns
.IR msg ,
then the ToolTalk service
will fail and destroy
.IR msg .
.PP
The ToolTalk service
does not simply fail the request transparently, because
the request may be the reason that the client process was started
by ToolTalk in the first place.
So if
.I diagnosis
is not
.BR \s-1TT_OK\s+1
and the
.BR tt_message_status (\|)
of
.I msg
is
.BR \s-1TT_WRN_START_MESSAGE\s+1 ,
then many applications will
decide that they have no reason to continue running.
If such an application chooses to exit in the callback, then
it should first dismiss the request.
Otherwise, it can set
some global flag, return
.I msg
(thus allowing the ToolTalk service
to dismiss the message), and then
have
.BR main (\|)
check the flag and exit before even entering the
event loop.
(Exiting without dismissing the request would fail
it with status
.BR \s-1TT_ERR_PROCID\s+1 ,
instead of with
.IR diagnostic .)
.PP
The
.IR contents ,
.IR len ,
and
.I file
arguments represent the
contents of the arriving document.
If
.I len
is zero, then the document is contained in
.IR file .
If
.I contents
or
.I file
are non-\c
.BR \s-1NULL\s+1 ,
they can be freed using
.BR tt_free (\|).
.PP
The
.I docname
argument is the
name of the document, if any.
The
.I clientdata
argument is the
.I clientdata
passed to
.BR ttmedia_ptype_declare (\|).
.PP
A
.B Ttmedia_load_pat_cb
should return zero if it processes
.I msg
successfully, or a
.BR tt_error_pointer (\|)
cast to
.B Tt_message
if processing results in an error.
It should return the
.I msg
if it does not consume it.
If
.I diagnosis
is not
.BR \s-1TT_OK\s+1
and
.I msg
is returned, then the ToolTalk service
will consume (namely, fail and destroy) it.
If
.I diagnosis
is
.BR \s-1TT_OK\s+1
and
.I msg
is returned, then the ToolTalk service will pass
.BR \s-1TT_CALLBACK_CONTINUE\s+1
down the call stack, so that
.I msg
will be offered to other callbacks or (more likely) be returned from
.BR tt_message_receive (3).
Applications will rarely want
.I msg
to get processed by other callbacks or in the main event loop.
.SH "RETURN VALUE"
Upon successful completion, the
.BR ttmedia_ptype_declare (\|)
function returns the status of the operation.
The application can use
.BR tt_ptr_error (3)
to extract one of the following
.B Tt_status
values from the returned handle:
.PP
.RS 3
.nr )J 8
.Lc TT_OK
The operation completed successfully.
.Lc TT_ERR_NOMP
.br
The
.BR ttsession (1)
process is not running and the ToolTalk service cannot restart it.
.Lc TT_ERR_POINTER
.br
The pointer passed does not point to an object
of the correct type for this operation.
.Lc TT_ERR_PROCID
.br
The specified process identifier is out of date or invalid.
.Lc TT_ERR_PTYPE
.br
The specified process type is not the name of an installed process type.
.PP
.RE
.nr )J 0
.SH EXAMPLES
This is the typical algorithm of a
.BR Ttmedia_load_pat_cb :
.PP
.sp -1
.ta 4m +4m +4m +4m +4m +4m +4m
.nf
.ft 3
Tt_message
myAcmeSheetLoadCB(
	Tt_message      msg,
	void           *client_data,
	Tttk_op         op,
	Tt_status       diagnosis,
	unsigned char  *contents,
	int             len,
	char           *file,
	char           *docname
)
{
	Tt_status status = TT_OK;
	if (diagnosis != TT_OK) {
		/* toolkit detected an error */
		if (tt_message_status(msg) == TT_WRN_START_MESSAGE) {
			/*
			 * Error is in start message!  We now have no
			 * reason to live, so tell main() to exit().
			 */
			myAbortCode = 2;
		}
		/* let toolkit handle the error */
		return msg;
	}

	/* We should only operate on files we own. */
	if (tt_message_uid() != getuid() || tt_message_gid() != getgid()) {
		tttk_message_fail(msg, TT_DESKTOP_EACCES, 0, 1);
		/* tt_free as appropriate... */
		return 0;
	}

	if ((op == TTME_COMPOSE)&&(file == 0)) {
		/* open empty new buffer */
	} else if (len > 0) {
		/* load contents into new buffer */
	} else if (file != 0) {
		if (ttdt_Get_Modified(msg, file, TT_BOTH, myCntxt, 5000)) {
			switch(myUserChoice("Save, Revert, Ignore?")) {
			    case 0:
				ttdt_Save(msg, file, TT_BOTH, myCntxt, 5000);
				break;
			    case 1:
				ttdt_Revert(msg, file, TT_BOTH, myCntxt, 5000);
				break;
			}
		}
		/* load file into new buffer */
	} else {
		tttk_message_fail(msg, TT_DESKTOP_ENODATA, 0, 1);
		tt_free(contents); tt_free(file); tt_free(docname);
		return 0;
	}
	int w, h, x, y = INT_MAX;
	ttdt_sender_imprint_on(0, msg, 0, &w, &h, &x, &y, myCntxt, 5000);
	positionMyWindowRelativeTo(w, h, x, y);
	if (maxBuffersAreNowOpen) {
		/* Un-volunteer to handle future requests until less busy */
		tt_ptype_undeclare("Acme_Calc");
	}
	if (tt_message_status(msg) == TT_WRN_START_MESSAGE) {
		/*
		 * Join session before accepting start message,
		 * to prevent unnecessary starts of our ptype
		 */
		ttdt_session_join(0, myContractCB, myShell, 0, 1);
	}
	ttdt_message_accept(msg, myContractCB, myShell, 0, 1, 1);
	tt_free(contents); tt_free(file); tt_free(docname);
	return 0;
}
.PP
.ft 1
.fi
.PP
This is the signature layout that
ptype
should conform to:
.PP
.sp -1
.ta 4m +4m +4m +4m +4m +4m +4m
.nf
.ft 3
ptype Acme_Calc {
    start "acalc";
    handle:
	/*
	 * Display Acme_Sheet
	 * Include in tool's ptype if tool can display a document.
	 */
	session Display( in    Acme_Sheet  contents     ) => start opnum = 1;
	session Display( in    Acme_Sheet  contents,
			 in    messageID   counterfoil  ) => start opnum = 2;
	session Display( in    Acme_Sheet  contents,
			 in    title       docName      ) => start opnum = 3;
	session Display( in    Acme_Sheet  contents,
			 in    messageID   counterfoil,
			 in    title       docName      ) => start opnum = 4;
	/*
	 * Edit Acme_Sheet
	 * Include in tool's ptype if tool can edit a document.
	 */
	session Edit(    inout Acme_Sheet  contents     ) => start opnum = 101;
	session Edit(    inout Acme_Sheet  contents,
			 in    messageID   counterfoil  ) => start opnum = 102;
	session Edit(    inout Acme_Sheet  contents,
			 in    title       docName      ) => start opnum = 103;
	session Edit(    inout Acme_Sheet  contents,
			 in    messageID   counterfoil,
			 in    title       docName      ) => start opnum = 104;
	/*
	 * Compose Acme_Sheet
	 * Include in tool's ptype if tool can compose a document from scratch.
	 */
	session Edit(    out   Acme_Sheet  contents     ) => start opnum = 201;
	session Edit(    out   Acme_Sheet  contents,
			 in    messageID   counterfoil  ) => start opnum = 202;
	session Edit(    out   Acme_Sheet  contents,
			 in    title       docName      ) => start opnum = 203;
	session Edit(    out   Acme_Sheet  contents,
			 in    messageID   counterfoil,
			 in    title       docName      ) => start opnum = 204;
	/*
	 * Mail Acme_Sheet
	 * Include in tool's ptype if tool can mail a document.
	 */
	session Mail(    in    Acme_Sheet  contents     ) => start opnum = 301;
	session Mail(    inout Acme_Sheet  contents     ) => start opnum = 311;
	session Mail(    inout Acme_Sheet  contents,
			 in    title       docName      ) => start opnum = 313;
	session Mail(    out   Acme_Sheet  contents     ) => start opnum = 321;
	session Mail(    out   Acme_Sheet  contents,
			 in    messageID   counterfoil  ) => start opnum = 323;
};
.PP
.ft 1
.fi
.SH "SEE ALSO"
.na
.BR tttk (5),
.BR tt_ptype_declare (3),
.BR tt_ptype_undeclare (3),
.BR ttdt_message_accept (3),
.BR ttdt_session_join (3),
.BR ttdt_file_join (3),
.BR tt_free (3),
.BR tt_message_receive (3).
